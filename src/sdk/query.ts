/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { queryConversations } from "../funcs/queryConversations.js";
import { queryExport } from "../funcs/queryExport.js";
import { queryTable } from "../funcs/queryTable.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Query extends ClientSDK {
  /**
   * Query Conversations
   */
  async conversations(
    security: operations.QueryConversationsSecurity,
    request: operations.QueryConversationsRequestBody,
    options?: RequestOptions,
  ): Promise<operations.QueryConversationsResponseBody> {
    return unwrapAsync(queryConversations(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Query
   */
  async table(
    security: operations.QueryTableSecurity,
    request: operations.QueryTableRequest,
    options?: RequestOptions,
  ): Promise<operations.QueryTableResponseBody> {
    return unwrapAsync(queryTable(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Query Export
   */
  async export(
    request: operations.ExportQueryRequest,
    options?: RequestOptions,
  ): Promise<ReadableStream<Uint8Array>> {
    return unwrapAsync(queryExport(
      this,
      request,
      options,
    ));
  }
}
