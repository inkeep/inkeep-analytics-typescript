/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { queryConversations } from "../funcs/queryConversations.js";
import { queryExportSemanticThreadsQueryResults } from "../funcs/queryExportSemanticThreadsQueryResults.js";
import { queryQueryEvents } from "../funcs/queryQueryEvents.js";
import { queryQuerySemanticThreads } from "../funcs/queryQuerySemanticThreads.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Query extends ClientSDK {
  /**
   * Query Conversations
   */
  async conversations(
    security: operations.QueryConversationsSecurity,
    request: operations.QueryConversationsRequestBody,
    options?: RequestOptions,
  ): Promise<operations.QueryConversationsResponseBody> {
    return unwrapAsync(queryConversations(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Query Events
   */
  async queryEvents(
    security: operations.QueryEventsSecurity,
    request: operations.QueryEventsRequestBody,
    options?: RequestOptions,
  ): Promise<operations.QueryEventsResponseBody> {
    return unwrapAsync(queryQueryEvents(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Query Semantic Threads
   */
  async querySemanticThreads(
    security: operations.QuerySemanticThreadsSecurity,
    request: components.QuerySemanticThreadsParamsSchema,
    options?: RequestOptions,
  ): Promise<operations.QuerySemanticThreadsResponseBody> {
    return unwrapAsync(queryQuerySemanticThreads(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Export Semantic Threads Query Results
   */
  async exportSemanticThreadsQueryResults(
    request: components.QuerySemanticThreadsParamsSchema,
    options?: RequestOptions,
  ): Promise<ReadableStream<Uint8Array>> {
    return unwrapAsync(queryExportSemanticThreadsQueryResults(
      this,
      request,
      options,
    ));
  }
}
