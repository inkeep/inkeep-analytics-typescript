/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  OpenAIExtendedMessage,
  OpenAIExtendedMessage$inboundSchema,
  OpenAIExtendedMessage$Outbound,
  OpenAIExtendedMessage$outboundSchema,
} from "./openaiextendedmessage.js";
import {
  SupportCopilotMessage,
  SupportCopilotMessage$inboundSchema,
  SupportCopilotMessage$Outbound,
  SupportCopilotMessage$outboundSchema,
} from "./supportcopilotmessage.js";
import {
  SupportTicketMessage,
  SupportTicketMessage$inboundSchema,
  SupportTicketMessage$Outbound,
  SupportTicketMessage$outboundSchema,
} from "./supportticketmessage.js";

export type Message =
  | (OpenAIExtendedMessage & { type: "openai" })
  | (SupportTicketMessage & { type: "support_ticket" })
  | (SupportCopilotMessage & { type: "support_copilot" });

/** @internal */
export const Message$inboundSchema: z.ZodType<Message, z.ZodTypeDef, unknown> =
  z.union([
    OpenAIExtendedMessage$inboundSchema.and(
      z.object({ type: z.literal("openai") }).transform((v) => ({
        type: v.type,
      })),
    ),
    SupportTicketMessage$inboundSchema.and(
      z.object({ type: z.literal("support_ticket") }).transform((v) => ({
        type: v.type,
      })),
    ),
    SupportCopilotMessage$inboundSchema.and(
      z.object({ type: z.literal("support_copilot") }).transform((v) => ({
        type: v.type,
      })),
    ),
  ]);

/** @internal */
export type Message$Outbound =
  | (OpenAIExtendedMessage$Outbound & { type: "openai" })
  | (SupportTicketMessage$Outbound & { type: "support_ticket" })
  | (SupportCopilotMessage$Outbound & { type: "support_copilot" });

/** @internal */
export const Message$outboundSchema: z.ZodType<
  Message$Outbound,
  z.ZodTypeDef,
  Message
> = z.union([
  OpenAIExtendedMessage$outboundSchema.and(
    z.object({ type: z.literal("openai") }).transform((v) => ({
      type: v.type,
    })),
  ),
  SupportTicketMessage$outboundSchema.and(
    z.object({ type: z.literal("support_ticket") }).transform((v) => ({
      type: v.type,
    })),
  ),
  SupportCopilotMessage$outboundSchema.and(
    z.object({ type: z.literal("support_copilot") }).transform((v) => ({
      type: v.type,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Message$ {
  /** @deprecated use `Message$inboundSchema` instead. */
  export const inboundSchema = Message$inboundSchema;
  /** @deprecated use `Message$outboundSchema` instead. */
  export const outboundSchema = Message$outboundSchema;
  /** @deprecated use `Message$Outbound` instead. */
  export type Outbound = Message$Outbound;
}

export function messageToJSON(message: Message): string {
  return JSON.stringify(Message$outboundSchema.parse(message));
}

export function messageFromJSON(
  jsonString: string,
): SafeParseResult<Message, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Message$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Message' from JSON`,
  );
}
