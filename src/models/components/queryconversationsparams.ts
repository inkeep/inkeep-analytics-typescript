/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ConversationsFilter,
  ConversationsFilter$inboundSchema,
  ConversationsFilter$Outbound,
  ConversationsFilter$outboundSchema,
} from "./conversationsfilter.js";
import {
  ConversationsGroupBy,
  ConversationsGroupBy$inboundSchema,
  ConversationsGroupBy$Outbound,
  ConversationsGroupBy$outboundSchema,
} from "./conversationsgroupby.js";
import {
  ConversationsOrderBy,
  ConversationsOrderBy$inboundSchema,
  ConversationsOrderBy$Outbound,
  ConversationsOrderBy$outboundSchema,
} from "./conversationsorderby.js";
import {
  ConversationsSelection,
  ConversationsSelection$inboundSchema,
  ConversationsSelection$Outbound,
  ConversationsSelection$outboundSchema,
} from "./conversationsselection.js";

export type QueryConversationsParams = {
  select?: Array<ConversationsSelection> | undefined;
  groupBy?: Array<ConversationsGroupBy> | undefined;
  where?: ConversationsFilter | undefined;
  orderBy?: Array<ConversationsOrderBy> | undefined;
  /**
   * Notes are not persisted, but may be useful for your debugging purposes
   */
  notes?: string | undefined;
};

/** @internal */
export const QueryConversationsParams$inboundSchema: z.ZodType<
  QueryConversationsParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  select: z.array(ConversationsSelection$inboundSchema).optional(),
  groupBy: z.array(ConversationsGroupBy$inboundSchema).optional(),
  where: ConversationsFilter$inboundSchema.optional(),
  orderBy: z.array(ConversationsOrderBy$inboundSchema).optional(),
  notes: z.string().optional(),
});

/** @internal */
export type QueryConversationsParams$Outbound = {
  select?: Array<ConversationsSelection$Outbound> | undefined;
  groupBy?: Array<ConversationsGroupBy$Outbound> | undefined;
  where?: ConversationsFilter$Outbound | undefined;
  orderBy?: Array<ConversationsOrderBy$Outbound> | undefined;
  notes?: string | undefined;
};

/** @internal */
export const QueryConversationsParams$outboundSchema: z.ZodType<
  QueryConversationsParams$Outbound,
  z.ZodTypeDef,
  QueryConversationsParams
> = z.object({
  select: z.array(ConversationsSelection$outboundSchema).optional(),
  groupBy: z.array(ConversationsGroupBy$outboundSchema).optional(),
  where: ConversationsFilter$outboundSchema.optional(),
  orderBy: z.array(ConversationsOrderBy$outboundSchema).optional(),
  notes: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryConversationsParams$ {
  /** @deprecated use `QueryConversationsParams$inboundSchema` instead. */
  export const inboundSchema = QueryConversationsParams$inboundSchema;
  /** @deprecated use `QueryConversationsParams$outboundSchema` instead. */
  export const outboundSchema = QueryConversationsParams$outboundSchema;
  /** @deprecated use `QueryConversationsParams$Outbound` instead. */
  export type Outbound = QueryConversationsParams$Outbound;
}

export function queryConversationsParamsToJSON(
  queryConversationsParams: QueryConversationsParams,
): string {
  return JSON.stringify(
    QueryConversationsParams$outboundSchema.parse(queryConversationsParams),
  );
}

export function queryConversationsParamsFromJSON(
  jsonString: string,
): SafeParseResult<QueryConversationsParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryConversationsParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryConversationsParams' from JSON`,
  );
}
