/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  And,
  And$inboundSchema,
  And$Outbound,
  And$outboundSchema,
} from "./and.js";
import {
  Conditiion,
  Conditiion$inboundSchema,
  Conditiion$Outbound,
  Conditiion$outboundSchema,
} from "./conditiion.js";
import { Or, Or$inboundSchema, Or$Outbound, Or$outboundSchema } from "./or.js";

export type SemanticThreadFilter = Conditiion | And | Or;

/** @internal */
export const SemanticThreadFilter$inboundSchema: z.ZodType<
  SemanticThreadFilter,
  z.ZodTypeDef,
  unknown
> = z.union([
  Conditiion$inboundSchema,
  z.lazy(() => And$inboundSchema),
  z.lazy(() => Or$inboundSchema),
]);

/** @internal */
export type SemanticThreadFilter$Outbound =
  | Conditiion$Outbound
  | And$Outbound
  | Or$Outbound;

/** @internal */
export const SemanticThreadFilter$outboundSchema: z.ZodType<
  SemanticThreadFilter$Outbound,
  z.ZodTypeDef,
  SemanticThreadFilter
> = z.union([
  Conditiion$outboundSchema,
  z.lazy(() => And$outboundSchema),
  z.lazy(() => Or$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SemanticThreadFilter$ {
  /** @deprecated use `SemanticThreadFilter$inboundSchema` instead. */
  export const inboundSchema = SemanticThreadFilter$inboundSchema;
  /** @deprecated use `SemanticThreadFilter$outboundSchema` instead. */
  export const outboundSchema = SemanticThreadFilter$outboundSchema;
  /** @deprecated use `SemanticThreadFilter$Outbound` instead. */
  export type Outbound = SemanticThreadFilter$Outbound;
}

export function semanticThreadFilterToJSON(
  semanticThreadFilter: SemanticThreadFilter,
): string {
  return JSON.stringify(
    SemanticThreadFilter$outboundSchema.parse(semanticThreadFilter),
  );
}

export function semanticThreadFilterFromJSON(
  jsonString: string,
): SafeParseResult<SemanticThreadFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SemanticThreadFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SemanticThreadFilter' from JSON`,
  );
}
