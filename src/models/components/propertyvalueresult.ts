/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PropertyValueResult = {
  /**
   * Property value
   */
  value: string | null;
  /**
   * Number of times this value appears
   */
  count: number;
};

/** @internal */
export const PropertyValueResult$inboundSchema: z.ZodType<
  PropertyValueResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.nullable(z.string()),
  count: z.number(),
});

/** @internal */
export type PropertyValueResult$Outbound = {
  value: string | null;
  count: number;
};

/** @internal */
export const PropertyValueResult$outboundSchema: z.ZodType<
  PropertyValueResult$Outbound,
  z.ZodTypeDef,
  PropertyValueResult
> = z.object({
  value: z.nullable(z.string()),
  count: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PropertyValueResult$ {
  /** @deprecated use `PropertyValueResult$inboundSchema` instead. */
  export const inboundSchema = PropertyValueResult$inboundSchema;
  /** @deprecated use `PropertyValueResult$outboundSchema` instead. */
  export const outboundSchema = PropertyValueResult$outboundSchema;
  /** @deprecated use `PropertyValueResult$Outbound` instead. */
  export type Outbound = PropertyValueResult$Outbound;
}

export function propertyValueResultToJSON(
  propertyValueResult: PropertyValueResult,
): string {
  return JSON.stringify(
    PropertyValueResult$outboundSchema.parse(propertyValueResult),
  );
}

export function propertyValueResultFromJSON(
  jsonString: string,
): SafeParseResult<PropertyValueResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PropertyValueResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PropertyValueResult' from JSON`,
  );
}
