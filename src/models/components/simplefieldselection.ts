/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const SimpleFieldSelectionType = {
  Field: "field",
} as const;
export type SimpleFieldSelectionType = ClosedEnum<
  typeof SimpleFieldSelectionType
>;

export const SimpleFieldSelectionField = {
  Id: "id",
  MessageIds: "messageIds",
  MessagesCount: "messagesCount",
  OrganizationId: "organizationId",
  Question: "question",
  QuestionLength: "questionLength",
  Answer: "answer",
  IsOnTopic: "isOnTopic",
  IsClear: "isClear",
  IsDocumented: "isDocumented",
  IsFeatureSupported: "isFeatureSupported",
  IsAnswerConfident: "isAnswerConfident",
  GapSummary: "gapSummary",
  Subject: "subject",
  Category: "category",
  Languages: "languages",
  FirstPartyEntities: "firstPartyEntities",
  ThirdPartyEntities: "thirdPartyEntities",
  Emotion: "emotion",
  Sentiment: "sentiment",
  QuestionType: "questionType",
  ProjectId: "projectId",
  IntegrationId: "integrationId",
  FirstMessageTime: "firstMessageTime",
  LastMessageTime: "lastMessageTime",
  LastUpdated: "lastUpdated",
  HasPositiveFeedback: "hasPositiveFeedback",
  HasNegativeFeedback: "hasNegativeFeedback",
  ConversationIds: "conversationIds",
  AreAIAnnotationsVerified: "areAIAnnotationsVerified",
  IsInitialQuestionAnswer: "isInitialQuestionAnswer",
} as const;
export type SimpleFieldSelectionField = ClosedEnum<
  typeof SimpleFieldSelectionField
>;

export type SimpleFieldSelection = {
  type: SimpleFieldSelectionType;
  field: SimpleFieldSelectionField;
};

/** @internal */
export const SimpleFieldSelectionType$inboundSchema: z.ZodNativeEnum<
  typeof SimpleFieldSelectionType
> = z.nativeEnum(SimpleFieldSelectionType);

/** @internal */
export const SimpleFieldSelectionType$outboundSchema: z.ZodNativeEnum<
  typeof SimpleFieldSelectionType
> = SimpleFieldSelectionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SimpleFieldSelectionType$ {
  /** @deprecated use `SimpleFieldSelectionType$inboundSchema` instead. */
  export const inboundSchema = SimpleFieldSelectionType$inboundSchema;
  /** @deprecated use `SimpleFieldSelectionType$outboundSchema` instead. */
  export const outboundSchema = SimpleFieldSelectionType$outboundSchema;
}

/** @internal */
export const SimpleFieldSelectionField$inboundSchema: z.ZodNativeEnum<
  typeof SimpleFieldSelectionField
> = z.nativeEnum(SimpleFieldSelectionField);

/** @internal */
export const SimpleFieldSelectionField$outboundSchema: z.ZodNativeEnum<
  typeof SimpleFieldSelectionField
> = SimpleFieldSelectionField$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SimpleFieldSelectionField$ {
  /** @deprecated use `SimpleFieldSelectionField$inboundSchema` instead. */
  export const inboundSchema = SimpleFieldSelectionField$inboundSchema;
  /** @deprecated use `SimpleFieldSelectionField$outboundSchema` instead. */
  export const outboundSchema = SimpleFieldSelectionField$outboundSchema;
}

/** @internal */
export const SimpleFieldSelection$inboundSchema: z.ZodType<
  SimpleFieldSelection,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: SimpleFieldSelectionType$inboundSchema,
  field: SimpleFieldSelectionField$inboundSchema,
});

/** @internal */
export type SimpleFieldSelection$Outbound = {
  type: string;
  field: string;
};

/** @internal */
export const SimpleFieldSelection$outboundSchema: z.ZodType<
  SimpleFieldSelection$Outbound,
  z.ZodTypeDef,
  SimpleFieldSelection
> = z.object({
  type: SimpleFieldSelectionType$outboundSchema,
  field: SimpleFieldSelectionField$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SimpleFieldSelection$ {
  /** @deprecated use `SimpleFieldSelection$inboundSchema` instead. */
  export const inboundSchema = SimpleFieldSelection$inboundSchema;
  /** @deprecated use `SimpleFieldSelection$outboundSchema` instead. */
  export const outboundSchema = SimpleFieldSelection$outboundSchema;
  /** @deprecated use `SimpleFieldSelection$Outbound` instead. */
  export type Outbound = SimpleFieldSelection$Outbound;
}

export function simpleFieldSelectionToJSON(
  simpleFieldSelection: SimpleFieldSelection,
): string {
  return JSON.stringify(
    SimpleFieldSelection$outboundSchema.parse(simpleFieldSelection),
  );
}

export function simpleFieldSelectionFromJSON(
  jsonString: string,
): SafeParseResult<SimpleFieldSelection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SimpleFieldSelection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SimpleFieldSelection' from JSON`,
  );
}
