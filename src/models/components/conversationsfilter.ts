/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FilterOperator,
  FilterOperator$inboundSchema,
  FilterOperator$outboundSchema,
} from "./filteroperator.js";

export type ConversationsFilterOr =
  | ConversationsFilter1
  | ConversationsFilter2
  | ConversationsFilter3;

export type ConversationsFilter3 = {
  /**
   * Or condition
   */
  or: Array<ConversationsFilter1 | ConversationsFilter2 | ConversationsFilter3>;
};

export type ConversationsFilterAnd =
  | ConversationsFilter1
  | ConversationsFilter2
  | ConversationsFilter3;

export type ConversationsFilter2 = {
  /**
   * And condition
   */
  and: Array<
    ConversationsFilter1 | ConversationsFilter2 | ConversationsFilter3
  >;
};

export const ConversationsFilterField7 = {
  Type: "type",
} as const;
export type ConversationsFilterField7 = ClosedEnum<
  typeof ConversationsFilterField7
>;

export const ConversationsFilterField6 = {
  FirstMessageTime: "firstMessageTime",
} as const;
export type ConversationsFilterField6 = ClosedEnum<
  typeof ConversationsFilterField6
>;

export const ConversationsFilterField5 = {
  IntegrationId: "integrationId",
} as const;
export type ConversationsFilterField5 = ClosedEnum<
  typeof ConversationsFilterField5
>;

export const ConversationsFilterField4 = {
  ProjectId: "projectId",
} as const;
export type ConversationsFilterField4 = ClosedEnum<
  typeof ConversationsFilterField4
>;

export const ConversationsFilterField3 = {
  OrganizationId: "organizationId",
} as const;
export type ConversationsFilterField3 = ClosedEnum<
  typeof ConversationsFilterField3
>;

export const ConversationsFilterField2 = {
  UserMessageCount: "userMessageCount",
} as const;
export type ConversationsFilterField2 = ClosedEnum<
  typeof ConversationsFilterField2
>;

export const ConversationsFilterField1 = {
  Id: "id",
} as const;
export type ConversationsFilterField1 = ClosedEnum<
  typeof ConversationsFilterField1
>;

export type ConversationsFilterField =
  | ConversationsFilterField1
  | ConversationsFilterField2
  | ConversationsFilterField3
  | ConversationsFilterField4
  | ConversationsFilterField5
  | ConversationsFilterField6
  | ConversationsFilterField7;

export type ConversationsFilterValue =
  | string
  | boolean
  | number
  | Array<string>;

export type ConversationsFilterCondition = {
  field:
    | ConversationsFilterField1
    | ConversationsFilterField2
    | ConversationsFilterField3
    | ConversationsFilterField4
    | ConversationsFilterField5
    | ConversationsFilterField6
    | ConversationsFilterField7;
  /**
   * Available Select Operators
   */
  operator: FilterOperator;
  value: string | boolean | number | Array<string>;
};

export type ConversationsFilter1 = {
  condition: ConversationsFilterCondition;
};

export type ConversationsFilter =
  | ConversationsFilter1
  | ConversationsFilter2
  | ConversationsFilter3;

/** @internal */
export const ConversationsFilterOr$inboundSchema: z.ZodType<
  ConversationsFilterOr,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ConversationsFilter1$inboundSchema),
  z.lazy(() => ConversationsFilter2$inboundSchema),
  z.lazy(() => ConversationsFilter3$inboundSchema),
]);

/** @internal */
export type ConversationsFilterOr$Outbound =
  | ConversationsFilter1$Outbound
  | ConversationsFilter2$Outbound
  | ConversationsFilter3$Outbound;

/** @internal */
export const ConversationsFilterOr$outboundSchema: z.ZodType<
  ConversationsFilterOr$Outbound,
  z.ZodTypeDef,
  ConversationsFilterOr
> = z.union([
  z.lazy(() => ConversationsFilter1$outboundSchema),
  z.lazy(() => ConversationsFilter2$outboundSchema),
  z.lazy(() => ConversationsFilter3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsFilterOr$ {
  /** @deprecated use `ConversationsFilterOr$inboundSchema` instead. */
  export const inboundSchema = ConversationsFilterOr$inboundSchema;
  /** @deprecated use `ConversationsFilterOr$outboundSchema` instead. */
  export const outboundSchema = ConversationsFilterOr$outboundSchema;
  /** @deprecated use `ConversationsFilterOr$Outbound` instead. */
  export type Outbound = ConversationsFilterOr$Outbound;
}

export function conversationsFilterOrToJSON(
  conversationsFilterOr: ConversationsFilterOr,
): string {
  return JSON.stringify(
    ConversationsFilterOr$outboundSchema.parse(conversationsFilterOr),
  );
}

export function conversationsFilterOrFromJSON(
  jsonString: string,
): SafeParseResult<ConversationsFilterOr, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConversationsFilterOr$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConversationsFilterOr' from JSON`,
  );
}

/** @internal */
export const ConversationsFilter3$inboundSchema: z.ZodType<
  ConversationsFilter3,
  z.ZodTypeDef,
  unknown
> = z.object({
  or: z.array(
    z.union([
      z.lazy(() => ConversationsFilter1$inboundSchema),
      z.lazy(() => ConversationsFilter2$inboundSchema),
      z.lazy(() => ConversationsFilter3$inboundSchema),
    ]),
  ),
});

/** @internal */
export type ConversationsFilter3$Outbound = {
  or: Array<
    | ConversationsFilter1$Outbound
    | ConversationsFilter2$Outbound
    | ConversationsFilter3$Outbound
  >;
};

/** @internal */
export const ConversationsFilter3$outboundSchema: z.ZodType<
  ConversationsFilter3$Outbound,
  z.ZodTypeDef,
  ConversationsFilter3
> = z.object({
  or: z.array(
    z.union([
      z.lazy(() => ConversationsFilter1$outboundSchema),
      z.lazy(() => ConversationsFilter2$outboundSchema),
      z.lazy(() => ConversationsFilter3$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsFilter3$ {
  /** @deprecated use `ConversationsFilter3$inboundSchema` instead. */
  export const inboundSchema = ConversationsFilter3$inboundSchema;
  /** @deprecated use `ConversationsFilter3$outboundSchema` instead. */
  export const outboundSchema = ConversationsFilter3$outboundSchema;
  /** @deprecated use `ConversationsFilter3$Outbound` instead. */
  export type Outbound = ConversationsFilter3$Outbound;
}

export function conversationsFilter3ToJSON(
  conversationsFilter3: ConversationsFilter3,
): string {
  return JSON.stringify(
    ConversationsFilter3$outboundSchema.parse(conversationsFilter3),
  );
}

export function conversationsFilter3FromJSON(
  jsonString: string,
): SafeParseResult<ConversationsFilter3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConversationsFilter3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConversationsFilter3' from JSON`,
  );
}

/** @internal */
export const ConversationsFilterAnd$inboundSchema: z.ZodType<
  ConversationsFilterAnd,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ConversationsFilter1$inboundSchema),
  z.lazy(() => ConversationsFilter2$inboundSchema),
  z.lazy(() => ConversationsFilter3$inboundSchema),
]);

/** @internal */
export type ConversationsFilterAnd$Outbound =
  | ConversationsFilter1$Outbound
  | ConversationsFilter2$Outbound
  | ConversationsFilter3$Outbound;

/** @internal */
export const ConversationsFilterAnd$outboundSchema: z.ZodType<
  ConversationsFilterAnd$Outbound,
  z.ZodTypeDef,
  ConversationsFilterAnd
> = z.union([
  z.lazy(() => ConversationsFilter1$outboundSchema),
  z.lazy(() => ConversationsFilter2$outboundSchema),
  z.lazy(() => ConversationsFilter3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsFilterAnd$ {
  /** @deprecated use `ConversationsFilterAnd$inboundSchema` instead. */
  export const inboundSchema = ConversationsFilterAnd$inboundSchema;
  /** @deprecated use `ConversationsFilterAnd$outboundSchema` instead. */
  export const outboundSchema = ConversationsFilterAnd$outboundSchema;
  /** @deprecated use `ConversationsFilterAnd$Outbound` instead. */
  export type Outbound = ConversationsFilterAnd$Outbound;
}

export function conversationsFilterAndToJSON(
  conversationsFilterAnd: ConversationsFilterAnd,
): string {
  return JSON.stringify(
    ConversationsFilterAnd$outboundSchema.parse(conversationsFilterAnd),
  );
}

export function conversationsFilterAndFromJSON(
  jsonString: string,
): SafeParseResult<ConversationsFilterAnd, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConversationsFilterAnd$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConversationsFilterAnd' from JSON`,
  );
}

/** @internal */
export const ConversationsFilter2$inboundSchema: z.ZodType<
  ConversationsFilter2,
  z.ZodTypeDef,
  unknown
> = z.object({
  and: z.array(
    z.union([
      z.lazy(() => ConversationsFilter1$inboundSchema),
      z.lazy(() => ConversationsFilter2$inboundSchema),
      z.lazy(() => ConversationsFilter3$inboundSchema),
    ]),
  ),
});

/** @internal */
export type ConversationsFilter2$Outbound = {
  and: Array<
    | ConversationsFilter1$Outbound
    | ConversationsFilter2$Outbound
    | ConversationsFilter3$Outbound
  >;
};

/** @internal */
export const ConversationsFilter2$outboundSchema: z.ZodType<
  ConversationsFilter2$Outbound,
  z.ZodTypeDef,
  ConversationsFilter2
> = z.object({
  and: z.array(
    z.union([
      z.lazy(() => ConversationsFilter1$outboundSchema),
      z.lazy(() => ConversationsFilter2$outboundSchema),
      z.lazy(() => ConversationsFilter3$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsFilter2$ {
  /** @deprecated use `ConversationsFilter2$inboundSchema` instead. */
  export const inboundSchema = ConversationsFilter2$inboundSchema;
  /** @deprecated use `ConversationsFilter2$outboundSchema` instead. */
  export const outboundSchema = ConversationsFilter2$outboundSchema;
  /** @deprecated use `ConversationsFilter2$Outbound` instead. */
  export type Outbound = ConversationsFilter2$Outbound;
}

export function conversationsFilter2ToJSON(
  conversationsFilter2: ConversationsFilter2,
): string {
  return JSON.stringify(
    ConversationsFilter2$outboundSchema.parse(conversationsFilter2),
  );
}

export function conversationsFilter2FromJSON(
  jsonString: string,
): SafeParseResult<ConversationsFilter2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConversationsFilter2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConversationsFilter2' from JSON`,
  );
}

/** @internal */
export const ConversationsFilterField7$inboundSchema: z.ZodNativeEnum<
  typeof ConversationsFilterField7
> = z.nativeEnum(ConversationsFilterField7);

/** @internal */
export const ConversationsFilterField7$outboundSchema: z.ZodNativeEnum<
  typeof ConversationsFilterField7
> = ConversationsFilterField7$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsFilterField7$ {
  /** @deprecated use `ConversationsFilterField7$inboundSchema` instead. */
  export const inboundSchema = ConversationsFilterField7$inboundSchema;
  /** @deprecated use `ConversationsFilterField7$outboundSchema` instead. */
  export const outboundSchema = ConversationsFilterField7$outboundSchema;
}

/** @internal */
export const ConversationsFilterField6$inboundSchema: z.ZodNativeEnum<
  typeof ConversationsFilterField6
> = z.nativeEnum(ConversationsFilterField6);

/** @internal */
export const ConversationsFilterField6$outboundSchema: z.ZodNativeEnum<
  typeof ConversationsFilterField6
> = ConversationsFilterField6$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsFilterField6$ {
  /** @deprecated use `ConversationsFilterField6$inboundSchema` instead. */
  export const inboundSchema = ConversationsFilterField6$inboundSchema;
  /** @deprecated use `ConversationsFilterField6$outboundSchema` instead. */
  export const outboundSchema = ConversationsFilterField6$outboundSchema;
}

/** @internal */
export const ConversationsFilterField5$inboundSchema: z.ZodNativeEnum<
  typeof ConversationsFilterField5
> = z.nativeEnum(ConversationsFilterField5);

/** @internal */
export const ConversationsFilterField5$outboundSchema: z.ZodNativeEnum<
  typeof ConversationsFilterField5
> = ConversationsFilterField5$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsFilterField5$ {
  /** @deprecated use `ConversationsFilterField5$inboundSchema` instead. */
  export const inboundSchema = ConversationsFilterField5$inboundSchema;
  /** @deprecated use `ConversationsFilterField5$outboundSchema` instead. */
  export const outboundSchema = ConversationsFilterField5$outboundSchema;
}

/** @internal */
export const ConversationsFilterField4$inboundSchema: z.ZodNativeEnum<
  typeof ConversationsFilterField4
> = z.nativeEnum(ConversationsFilterField4);

/** @internal */
export const ConversationsFilterField4$outboundSchema: z.ZodNativeEnum<
  typeof ConversationsFilterField4
> = ConversationsFilterField4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsFilterField4$ {
  /** @deprecated use `ConversationsFilterField4$inboundSchema` instead. */
  export const inboundSchema = ConversationsFilterField4$inboundSchema;
  /** @deprecated use `ConversationsFilterField4$outboundSchema` instead. */
  export const outboundSchema = ConversationsFilterField4$outboundSchema;
}

/** @internal */
export const ConversationsFilterField3$inboundSchema: z.ZodNativeEnum<
  typeof ConversationsFilterField3
> = z.nativeEnum(ConversationsFilterField3);

/** @internal */
export const ConversationsFilterField3$outboundSchema: z.ZodNativeEnum<
  typeof ConversationsFilterField3
> = ConversationsFilterField3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsFilterField3$ {
  /** @deprecated use `ConversationsFilterField3$inboundSchema` instead. */
  export const inboundSchema = ConversationsFilterField3$inboundSchema;
  /** @deprecated use `ConversationsFilterField3$outboundSchema` instead. */
  export const outboundSchema = ConversationsFilterField3$outboundSchema;
}

/** @internal */
export const ConversationsFilterField2$inboundSchema: z.ZodNativeEnum<
  typeof ConversationsFilterField2
> = z.nativeEnum(ConversationsFilterField2);

/** @internal */
export const ConversationsFilterField2$outboundSchema: z.ZodNativeEnum<
  typeof ConversationsFilterField2
> = ConversationsFilterField2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsFilterField2$ {
  /** @deprecated use `ConversationsFilterField2$inboundSchema` instead. */
  export const inboundSchema = ConversationsFilterField2$inboundSchema;
  /** @deprecated use `ConversationsFilterField2$outboundSchema` instead. */
  export const outboundSchema = ConversationsFilterField2$outboundSchema;
}

/** @internal */
export const ConversationsFilterField1$inboundSchema: z.ZodNativeEnum<
  typeof ConversationsFilterField1
> = z.nativeEnum(ConversationsFilterField1);

/** @internal */
export const ConversationsFilterField1$outboundSchema: z.ZodNativeEnum<
  typeof ConversationsFilterField1
> = ConversationsFilterField1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsFilterField1$ {
  /** @deprecated use `ConversationsFilterField1$inboundSchema` instead. */
  export const inboundSchema = ConversationsFilterField1$inboundSchema;
  /** @deprecated use `ConversationsFilterField1$outboundSchema` instead. */
  export const outboundSchema = ConversationsFilterField1$outboundSchema;
}

/** @internal */
export const ConversationsFilterField$inboundSchema: z.ZodType<
  ConversationsFilterField,
  z.ZodTypeDef,
  unknown
> = z.union([
  ConversationsFilterField1$inboundSchema,
  ConversationsFilterField2$inboundSchema,
  ConversationsFilterField3$inboundSchema,
  ConversationsFilterField4$inboundSchema,
  ConversationsFilterField5$inboundSchema,
  ConversationsFilterField6$inboundSchema,
  ConversationsFilterField7$inboundSchema,
]);

/** @internal */
export type ConversationsFilterField$Outbound =
  | string
  | string
  | string
  | string
  | string
  | string
  | string;

/** @internal */
export const ConversationsFilterField$outboundSchema: z.ZodType<
  ConversationsFilterField$Outbound,
  z.ZodTypeDef,
  ConversationsFilterField
> = z.union([
  ConversationsFilterField1$outboundSchema,
  ConversationsFilterField2$outboundSchema,
  ConversationsFilterField3$outboundSchema,
  ConversationsFilterField4$outboundSchema,
  ConversationsFilterField5$outboundSchema,
  ConversationsFilterField6$outboundSchema,
  ConversationsFilterField7$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsFilterField$ {
  /** @deprecated use `ConversationsFilterField$inboundSchema` instead. */
  export const inboundSchema = ConversationsFilterField$inboundSchema;
  /** @deprecated use `ConversationsFilterField$outboundSchema` instead. */
  export const outboundSchema = ConversationsFilterField$outboundSchema;
  /** @deprecated use `ConversationsFilterField$Outbound` instead. */
  export type Outbound = ConversationsFilterField$Outbound;
}

export function conversationsFilterFieldToJSON(
  conversationsFilterField: ConversationsFilterField,
): string {
  return JSON.stringify(
    ConversationsFilterField$outboundSchema.parse(conversationsFilterField),
  );
}

export function conversationsFilterFieldFromJSON(
  jsonString: string,
): SafeParseResult<ConversationsFilterField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConversationsFilterField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConversationsFilterField' from JSON`,
  );
}

/** @internal */
export const ConversationsFilterValue$inboundSchema: z.ZodType<
  ConversationsFilterValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.boolean(), z.number(), z.array(z.string())]);

/** @internal */
export type ConversationsFilterValue$Outbound =
  | string
  | boolean
  | number
  | Array<string>;

/** @internal */
export const ConversationsFilterValue$outboundSchema: z.ZodType<
  ConversationsFilterValue$Outbound,
  z.ZodTypeDef,
  ConversationsFilterValue
> = z.union([z.string(), z.boolean(), z.number(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsFilterValue$ {
  /** @deprecated use `ConversationsFilterValue$inboundSchema` instead. */
  export const inboundSchema = ConversationsFilterValue$inboundSchema;
  /** @deprecated use `ConversationsFilterValue$outboundSchema` instead. */
  export const outboundSchema = ConversationsFilterValue$outboundSchema;
  /** @deprecated use `ConversationsFilterValue$Outbound` instead. */
  export type Outbound = ConversationsFilterValue$Outbound;
}

export function conversationsFilterValueToJSON(
  conversationsFilterValue: ConversationsFilterValue,
): string {
  return JSON.stringify(
    ConversationsFilterValue$outboundSchema.parse(conversationsFilterValue),
  );
}

export function conversationsFilterValueFromJSON(
  jsonString: string,
): SafeParseResult<ConversationsFilterValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConversationsFilterValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConversationsFilterValue' from JSON`,
  );
}

/** @internal */
export const ConversationsFilterCondition$inboundSchema: z.ZodType<
  ConversationsFilterCondition,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: z.union([
    ConversationsFilterField1$inboundSchema,
    ConversationsFilterField2$inboundSchema,
    ConversationsFilterField3$inboundSchema,
    ConversationsFilterField4$inboundSchema,
    ConversationsFilterField5$inboundSchema,
    ConversationsFilterField6$inboundSchema,
    ConversationsFilterField7$inboundSchema,
  ]),
  operator: FilterOperator$inboundSchema,
  value: z.union([z.string(), z.boolean(), z.number(), z.array(z.string())]),
});

/** @internal */
export type ConversationsFilterCondition$Outbound = {
  field: string | string | string | string | string | string | string;
  operator: string;
  value: string | boolean | number | Array<string>;
};

/** @internal */
export const ConversationsFilterCondition$outboundSchema: z.ZodType<
  ConversationsFilterCondition$Outbound,
  z.ZodTypeDef,
  ConversationsFilterCondition
> = z.object({
  field: z.union([
    ConversationsFilterField1$outboundSchema,
    ConversationsFilterField2$outboundSchema,
    ConversationsFilterField3$outboundSchema,
    ConversationsFilterField4$outboundSchema,
    ConversationsFilterField5$outboundSchema,
    ConversationsFilterField6$outboundSchema,
    ConversationsFilterField7$outboundSchema,
  ]),
  operator: FilterOperator$outboundSchema,
  value: z.union([z.string(), z.boolean(), z.number(), z.array(z.string())]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsFilterCondition$ {
  /** @deprecated use `ConversationsFilterCondition$inboundSchema` instead. */
  export const inboundSchema = ConversationsFilterCondition$inboundSchema;
  /** @deprecated use `ConversationsFilterCondition$outboundSchema` instead. */
  export const outboundSchema = ConversationsFilterCondition$outboundSchema;
  /** @deprecated use `ConversationsFilterCondition$Outbound` instead. */
  export type Outbound = ConversationsFilterCondition$Outbound;
}

export function conversationsFilterConditionToJSON(
  conversationsFilterCondition: ConversationsFilterCondition,
): string {
  return JSON.stringify(
    ConversationsFilterCondition$outboundSchema.parse(
      conversationsFilterCondition,
    ),
  );
}

export function conversationsFilterConditionFromJSON(
  jsonString: string,
): SafeParseResult<ConversationsFilterCondition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConversationsFilterCondition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConversationsFilterCondition' from JSON`,
  );
}

/** @internal */
export const ConversationsFilter1$inboundSchema: z.ZodType<
  ConversationsFilter1,
  z.ZodTypeDef,
  unknown
> = z.object({
  condition: z.lazy(() => ConversationsFilterCondition$inboundSchema),
});

/** @internal */
export type ConversationsFilter1$Outbound = {
  condition: ConversationsFilterCondition$Outbound;
};

/** @internal */
export const ConversationsFilter1$outboundSchema: z.ZodType<
  ConversationsFilter1$Outbound,
  z.ZodTypeDef,
  ConversationsFilter1
> = z.object({
  condition: z.lazy(() => ConversationsFilterCondition$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsFilter1$ {
  /** @deprecated use `ConversationsFilter1$inboundSchema` instead. */
  export const inboundSchema = ConversationsFilter1$inboundSchema;
  /** @deprecated use `ConversationsFilter1$outboundSchema` instead. */
  export const outboundSchema = ConversationsFilter1$outboundSchema;
  /** @deprecated use `ConversationsFilter1$Outbound` instead. */
  export type Outbound = ConversationsFilter1$Outbound;
}

export function conversationsFilter1ToJSON(
  conversationsFilter1: ConversationsFilter1,
): string {
  return JSON.stringify(
    ConversationsFilter1$outboundSchema.parse(conversationsFilter1),
  );
}

export function conversationsFilter1FromJSON(
  jsonString: string,
): SafeParseResult<ConversationsFilter1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConversationsFilter1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConversationsFilter1' from JSON`,
  );
}

/** @internal */
export const ConversationsFilter$inboundSchema: z.ZodType<
  ConversationsFilter,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ConversationsFilter1$inboundSchema),
  z.lazy(() => ConversationsFilter2$inboundSchema),
  z.lazy(() => ConversationsFilter3$inboundSchema),
]);

/** @internal */
export type ConversationsFilter$Outbound =
  | ConversationsFilter1$Outbound
  | ConversationsFilter2$Outbound
  | ConversationsFilter3$Outbound;

/** @internal */
export const ConversationsFilter$outboundSchema: z.ZodType<
  ConversationsFilter$Outbound,
  z.ZodTypeDef,
  ConversationsFilter
> = z.union([
  z.lazy(() => ConversationsFilter1$outboundSchema),
  z.lazy(() => ConversationsFilter2$outboundSchema),
  z.lazy(() => ConversationsFilter3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsFilter$ {
  /** @deprecated use `ConversationsFilter$inboundSchema` instead. */
  export const inboundSchema = ConversationsFilter$inboundSchema;
  /** @deprecated use `ConversationsFilter$outboundSchema` instead. */
  export const outboundSchema = ConversationsFilter$outboundSchema;
  /** @deprecated use `ConversationsFilter$Outbound` instead. */
  export type Outbound = ConversationsFilter$Outbound;
}

export function conversationsFilterToJSON(
  conversationsFilter: ConversationsFilter,
): string {
  return JSON.stringify(
    ConversationsFilter$outboundSchema.parse(conversationsFilter),
  );
}

export function conversationsFilterFromJSON(
  jsonString: string,
): SafeParseResult<ConversationsFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConversationsFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConversationsFilter' from JSON`,
  );
}
