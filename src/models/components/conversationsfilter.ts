/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Or =
  | ConversationsFilter1
  | ConversationsFilter2
  | ConversationsFilter3;

export type ConversationsFilter3 = {
  /**
   * Or condition
   */
  or: Array<ConversationsFilter1 | ConversationsFilter2 | ConversationsFilter3>;
};

export type And =
  | ConversationsFilter1
  | ConversationsFilter2
  | ConversationsFilter3;

export type ConversationsFilter2 = {
  /**
   * And condition
   */
  and: Array<
    ConversationsFilter1 | ConversationsFilter2 | ConversationsFilter3
  >;
};

export const ConversationsFilterField7 = {
  Type: "type",
} as const;
export type ConversationsFilterField7 = ClosedEnum<
  typeof ConversationsFilterField7
>;

export const ConversationsFilterField6 = {
  FirstMessageTime: "firstMessageTime",
} as const;
export type ConversationsFilterField6 = ClosedEnum<
  typeof ConversationsFilterField6
>;

export const ConversationsFilterField5 = {
  IntegrationId: "integrationId",
} as const;
export type ConversationsFilterField5 = ClosedEnum<
  typeof ConversationsFilterField5
>;

export const ConversationsFilterField4 = {
  ProjectId: "projectId",
} as const;
export type ConversationsFilterField4 = ClosedEnum<
  typeof ConversationsFilterField4
>;

export const ConversationsFilterField3 = {
  OrganizationId: "organizationId",
} as const;
export type ConversationsFilterField3 = ClosedEnum<
  typeof ConversationsFilterField3
>;

export const ConversationsFilterField2 = {
  UserMessageCount: "userMessageCount",
} as const;
export type ConversationsFilterField2 = ClosedEnum<
  typeof ConversationsFilterField2
>;

export const ConversationsFilterField1 = {
  Id: "id",
} as const;
export type ConversationsFilterField1 = ClosedEnum<
  typeof ConversationsFilterField1
>;

export type ConversationsFilterField =
  | ConversationsFilterField1
  | ConversationsFilterField2
  | ConversationsFilterField3
  | ConversationsFilterField4
  | ConversationsFilterField5
  | ConversationsFilterField6
  | ConversationsFilterField7;

export const SelectOperators9 = {
  ArrayContains: "arrayContains",
} as const;
export type SelectOperators9 = ClosedEnum<typeof SelectOperators9>;

export const SelectOperators8 = {
  NotIn: "notIn",
} as const;
export type SelectOperators8 = ClosedEnum<typeof SelectOperators8>;

export const SelectOperators7 = {
  In: "in",
} as const;
export type SelectOperators7 = ClosedEnum<typeof SelectOperators7>;

export const SelectOperators6 = {
  Lte: "lte",
} as const;
export type SelectOperators6 = ClosedEnum<typeof SelectOperators6>;

export const SelectOperators5 = {
  Lt: "lt",
} as const;
export type SelectOperators5 = ClosedEnum<typeof SelectOperators5>;

export const SelectOperators4 = {
  Gte: "gte",
} as const;
export type SelectOperators4 = ClosedEnum<typeof SelectOperators4>;

export const SelectOperators3 = {
  Gt: "gt",
} as const;
export type SelectOperators3 = ClosedEnum<typeof SelectOperators3>;

export const SelectOperators2 = {
  Neq: "neq",
} as const;
export type SelectOperators2 = ClosedEnum<typeof SelectOperators2>;

export const SelectOperators1 = {
  Eq: "eq",
} as const;
export type SelectOperators1 = ClosedEnum<typeof SelectOperators1>;

/**
 * Available Select Operators
 */
export type SelectOperators =
  | SelectOperators1
  | SelectOperators2
  | SelectOperators3
  | SelectOperators4
  | SelectOperators5
  | SelectOperators6
  | SelectOperators7
  | SelectOperators8
  | SelectOperators9;

export type Value = string | boolean | number | Array<string>;

export type Condition = {
  field:
    | ConversationsFilterField1
    | ConversationsFilterField2
    | ConversationsFilterField3
    | ConversationsFilterField4
    | ConversationsFilterField5
    | ConversationsFilterField6
    | ConversationsFilterField7;
  /**
   * Available Select Operators
   */
  operator:
    | SelectOperators1
    | SelectOperators2
    | SelectOperators3
    | SelectOperators4
    | SelectOperators5
    | SelectOperators6
    | SelectOperators7
    | SelectOperators8
    | SelectOperators9;
  value: string | boolean | number | Array<string>;
};

export type ConversationsFilter1 = {
  condition: Condition;
};

export type ConversationsFilter =
  | ConversationsFilter1
  | ConversationsFilter2
  | ConversationsFilter3;

/** @internal */
export const Or$inboundSchema: z.ZodType<Or, z.ZodTypeDef, unknown> = z.union([
  z.lazy(() => ConversationsFilter1$inboundSchema),
  z.lazy(() => ConversationsFilter2$inboundSchema),
  z.lazy(() => ConversationsFilter3$inboundSchema),
]);

/** @internal */
export type Or$Outbound =
  | ConversationsFilter1$Outbound
  | ConversationsFilter2$Outbound
  | ConversationsFilter3$Outbound;

/** @internal */
export const Or$outboundSchema: z.ZodType<Or$Outbound, z.ZodTypeDef, Or> = z
  .union([
    z.lazy(() => ConversationsFilter1$outboundSchema),
    z.lazy(() => ConversationsFilter2$outboundSchema),
    z.lazy(() => ConversationsFilter3$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Or$ {
  /** @deprecated use `Or$inboundSchema` instead. */
  export const inboundSchema = Or$inboundSchema;
  /** @deprecated use `Or$outboundSchema` instead. */
  export const outboundSchema = Or$outboundSchema;
  /** @deprecated use `Or$Outbound` instead. */
  export type Outbound = Or$Outbound;
}

export function orToJSON(or: Or): string {
  return JSON.stringify(Or$outboundSchema.parse(or));
}

export function orFromJSON(
  jsonString: string,
): SafeParseResult<Or, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Or$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Or' from JSON`,
  );
}

/** @internal */
export const ConversationsFilter3$inboundSchema: z.ZodType<
  ConversationsFilter3,
  z.ZodTypeDef,
  unknown
> = z.object({
  or: z.array(
    z.union([
      z.lazy(() => ConversationsFilter1$inboundSchema),
      z.lazy(() => ConversationsFilter2$inboundSchema),
      z.lazy(() => ConversationsFilter3$inboundSchema),
    ]),
  ),
});

/** @internal */
export type ConversationsFilter3$Outbound = {
  or: Array<
    | ConversationsFilter1$Outbound
    | ConversationsFilter2$Outbound
    | ConversationsFilter3$Outbound
  >;
};

/** @internal */
export const ConversationsFilter3$outboundSchema: z.ZodType<
  ConversationsFilter3$Outbound,
  z.ZodTypeDef,
  ConversationsFilter3
> = z.object({
  or: z.array(
    z.union([
      z.lazy(() => ConversationsFilter1$outboundSchema),
      z.lazy(() => ConversationsFilter2$outboundSchema),
      z.lazy(() => ConversationsFilter3$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsFilter3$ {
  /** @deprecated use `ConversationsFilter3$inboundSchema` instead. */
  export const inboundSchema = ConversationsFilter3$inboundSchema;
  /** @deprecated use `ConversationsFilter3$outboundSchema` instead. */
  export const outboundSchema = ConversationsFilter3$outboundSchema;
  /** @deprecated use `ConversationsFilter3$Outbound` instead. */
  export type Outbound = ConversationsFilter3$Outbound;
}

export function conversationsFilter3ToJSON(
  conversationsFilter3: ConversationsFilter3,
): string {
  return JSON.stringify(
    ConversationsFilter3$outboundSchema.parse(conversationsFilter3),
  );
}

export function conversationsFilter3FromJSON(
  jsonString: string,
): SafeParseResult<ConversationsFilter3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConversationsFilter3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConversationsFilter3' from JSON`,
  );
}

/** @internal */
export const And$inboundSchema: z.ZodType<And, z.ZodTypeDef, unknown> = z.union(
  [
    z.lazy(() => ConversationsFilter1$inboundSchema),
    z.lazy(() => ConversationsFilter2$inboundSchema),
    z.lazy(() => ConversationsFilter3$inboundSchema),
  ],
);

/** @internal */
export type And$Outbound =
  | ConversationsFilter1$Outbound
  | ConversationsFilter2$Outbound
  | ConversationsFilter3$Outbound;

/** @internal */
export const And$outboundSchema: z.ZodType<And$Outbound, z.ZodTypeDef, And> = z
  .union([
    z.lazy(() => ConversationsFilter1$outboundSchema),
    z.lazy(() => ConversationsFilter2$outboundSchema),
    z.lazy(() => ConversationsFilter3$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace And$ {
  /** @deprecated use `And$inboundSchema` instead. */
  export const inboundSchema = And$inboundSchema;
  /** @deprecated use `And$outboundSchema` instead. */
  export const outboundSchema = And$outboundSchema;
  /** @deprecated use `And$Outbound` instead. */
  export type Outbound = And$Outbound;
}

export function andToJSON(and: And): string {
  return JSON.stringify(And$outboundSchema.parse(and));
}

export function andFromJSON(
  jsonString: string,
): SafeParseResult<And, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => And$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'And' from JSON`,
  );
}

/** @internal */
export const ConversationsFilter2$inboundSchema: z.ZodType<
  ConversationsFilter2,
  z.ZodTypeDef,
  unknown
> = z.object({
  and: z.array(
    z.union([
      z.lazy(() => ConversationsFilter1$inboundSchema),
      z.lazy(() => ConversationsFilter2$inboundSchema),
      z.lazy(() => ConversationsFilter3$inboundSchema),
    ]),
  ),
});

/** @internal */
export type ConversationsFilter2$Outbound = {
  and: Array<
    | ConversationsFilter1$Outbound
    | ConversationsFilter2$Outbound
    | ConversationsFilter3$Outbound
  >;
};

/** @internal */
export const ConversationsFilter2$outboundSchema: z.ZodType<
  ConversationsFilter2$Outbound,
  z.ZodTypeDef,
  ConversationsFilter2
> = z.object({
  and: z.array(
    z.union([
      z.lazy(() => ConversationsFilter1$outboundSchema),
      z.lazy(() => ConversationsFilter2$outboundSchema),
      z.lazy(() => ConversationsFilter3$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsFilter2$ {
  /** @deprecated use `ConversationsFilter2$inboundSchema` instead. */
  export const inboundSchema = ConversationsFilter2$inboundSchema;
  /** @deprecated use `ConversationsFilter2$outboundSchema` instead. */
  export const outboundSchema = ConversationsFilter2$outboundSchema;
  /** @deprecated use `ConversationsFilter2$Outbound` instead. */
  export type Outbound = ConversationsFilter2$Outbound;
}

export function conversationsFilter2ToJSON(
  conversationsFilter2: ConversationsFilter2,
): string {
  return JSON.stringify(
    ConversationsFilter2$outboundSchema.parse(conversationsFilter2),
  );
}

export function conversationsFilter2FromJSON(
  jsonString: string,
): SafeParseResult<ConversationsFilter2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConversationsFilter2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConversationsFilter2' from JSON`,
  );
}

/** @internal */
export const ConversationsFilterField7$inboundSchema: z.ZodNativeEnum<
  typeof ConversationsFilterField7
> = z.nativeEnum(ConversationsFilterField7);

/** @internal */
export const ConversationsFilterField7$outboundSchema: z.ZodNativeEnum<
  typeof ConversationsFilterField7
> = ConversationsFilterField7$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsFilterField7$ {
  /** @deprecated use `ConversationsFilterField7$inboundSchema` instead. */
  export const inboundSchema = ConversationsFilterField7$inboundSchema;
  /** @deprecated use `ConversationsFilterField7$outboundSchema` instead. */
  export const outboundSchema = ConversationsFilterField7$outboundSchema;
}

/** @internal */
export const ConversationsFilterField6$inboundSchema: z.ZodNativeEnum<
  typeof ConversationsFilterField6
> = z.nativeEnum(ConversationsFilterField6);

/** @internal */
export const ConversationsFilterField6$outboundSchema: z.ZodNativeEnum<
  typeof ConversationsFilterField6
> = ConversationsFilterField6$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsFilterField6$ {
  /** @deprecated use `ConversationsFilterField6$inboundSchema` instead. */
  export const inboundSchema = ConversationsFilterField6$inboundSchema;
  /** @deprecated use `ConversationsFilterField6$outboundSchema` instead. */
  export const outboundSchema = ConversationsFilterField6$outboundSchema;
}

/** @internal */
export const ConversationsFilterField5$inboundSchema: z.ZodNativeEnum<
  typeof ConversationsFilterField5
> = z.nativeEnum(ConversationsFilterField5);

/** @internal */
export const ConversationsFilterField5$outboundSchema: z.ZodNativeEnum<
  typeof ConversationsFilterField5
> = ConversationsFilterField5$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsFilterField5$ {
  /** @deprecated use `ConversationsFilterField5$inboundSchema` instead. */
  export const inboundSchema = ConversationsFilterField5$inboundSchema;
  /** @deprecated use `ConversationsFilterField5$outboundSchema` instead. */
  export const outboundSchema = ConversationsFilterField5$outboundSchema;
}

/** @internal */
export const ConversationsFilterField4$inboundSchema: z.ZodNativeEnum<
  typeof ConversationsFilterField4
> = z.nativeEnum(ConversationsFilterField4);

/** @internal */
export const ConversationsFilterField4$outboundSchema: z.ZodNativeEnum<
  typeof ConversationsFilterField4
> = ConversationsFilterField4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsFilterField4$ {
  /** @deprecated use `ConversationsFilterField4$inboundSchema` instead. */
  export const inboundSchema = ConversationsFilterField4$inboundSchema;
  /** @deprecated use `ConversationsFilterField4$outboundSchema` instead. */
  export const outboundSchema = ConversationsFilterField4$outboundSchema;
}

/** @internal */
export const ConversationsFilterField3$inboundSchema: z.ZodNativeEnum<
  typeof ConversationsFilterField3
> = z.nativeEnum(ConversationsFilterField3);

/** @internal */
export const ConversationsFilterField3$outboundSchema: z.ZodNativeEnum<
  typeof ConversationsFilterField3
> = ConversationsFilterField3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsFilterField3$ {
  /** @deprecated use `ConversationsFilterField3$inboundSchema` instead. */
  export const inboundSchema = ConversationsFilterField3$inboundSchema;
  /** @deprecated use `ConversationsFilterField3$outboundSchema` instead. */
  export const outboundSchema = ConversationsFilterField3$outboundSchema;
}

/** @internal */
export const ConversationsFilterField2$inboundSchema: z.ZodNativeEnum<
  typeof ConversationsFilterField2
> = z.nativeEnum(ConversationsFilterField2);

/** @internal */
export const ConversationsFilterField2$outboundSchema: z.ZodNativeEnum<
  typeof ConversationsFilterField2
> = ConversationsFilterField2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsFilterField2$ {
  /** @deprecated use `ConversationsFilterField2$inboundSchema` instead. */
  export const inboundSchema = ConversationsFilterField2$inboundSchema;
  /** @deprecated use `ConversationsFilterField2$outboundSchema` instead. */
  export const outboundSchema = ConversationsFilterField2$outboundSchema;
}

/** @internal */
export const ConversationsFilterField1$inboundSchema: z.ZodNativeEnum<
  typeof ConversationsFilterField1
> = z.nativeEnum(ConversationsFilterField1);

/** @internal */
export const ConversationsFilterField1$outboundSchema: z.ZodNativeEnum<
  typeof ConversationsFilterField1
> = ConversationsFilterField1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsFilterField1$ {
  /** @deprecated use `ConversationsFilterField1$inboundSchema` instead. */
  export const inboundSchema = ConversationsFilterField1$inboundSchema;
  /** @deprecated use `ConversationsFilterField1$outboundSchema` instead. */
  export const outboundSchema = ConversationsFilterField1$outboundSchema;
}

/** @internal */
export const ConversationsFilterField$inboundSchema: z.ZodType<
  ConversationsFilterField,
  z.ZodTypeDef,
  unknown
> = z.union([
  ConversationsFilterField1$inboundSchema,
  ConversationsFilterField2$inboundSchema,
  ConversationsFilterField3$inboundSchema,
  ConversationsFilterField4$inboundSchema,
  ConversationsFilterField5$inboundSchema,
  ConversationsFilterField6$inboundSchema,
  ConversationsFilterField7$inboundSchema,
]);

/** @internal */
export type ConversationsFilterField$Outbound =
  | string
  | string
  | string
  | string
  | string
  | string
  | string;

/** @internal */
export const ConversationsFilterField$outboundSchema: z.ZodType<
  ConversationsFilterField$Outbound,
  z.ZodTypeDef,
  ConversationsFilterField
> = z.union([
  ConversationsFilterField1$outboundSchema,
  ConversationsFilterField2$outboundSchema,
  ConversationsFilterField3$outboundSchema,
  ConversationsFilterField4$outboundSchema,
  ConversationsFilterField5$outboundSchema,
  ConversationsFilterField6$outboundSchema,
  ConversationsFilterField7$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsFilterField$ {
  /** @deprecated use `ConversationsFilterField$inboundSchema` instead. */
  export const inboundSchema = ConversationsFilterField$inboundSchema;
  /** @deprecated use `ConversationsFilterField$outboundSchema` instead. */
  export const outboundSchema = ConversationsFilterField$outboundSchema;
  /** @deprecated use `ConversationsFilterField$Outbound` instead. */
  export type Outbound = ConversationsFilterField$Outbound;
}

export function conversationsFilterFieldToJSON(
  conversationsFilterField: ConversationsFilterField,
): string {
  return JSON.stringify(
    ConversationsFilterField$outboundSchema.parse(conversationsFilterField),
  );
}

export function conversationsFilterFieldFromJSON(
  jsonString: string,
): SafeParseResult<ConversationsFilterField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConversationsFilterField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConversationsFilterField' from JSON`,
  );
}

/** @internal */
export const SelectOperators9$inboundSchema: z.ZodNativeEnum<
  typeof SelectOperators9
> = z.nativeEnum(SelectOperators9);

/** @internal */
export const SelectOperators9$outboundSchema: z.ZodNativeEnum<
  typeof SelectOperators9
> = SelectOperators9$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelectOperators9$ {
  /** @deprecated use `SelectOperators9$inboundSchema` instead. */
  export const inboundSchema = SelectOperators9$inboundSchema;
  /** @deprecated use `SelectOperators9$outboundSchema` instead. */
  export const outboundSchema = SelectOperators9$outboundSchema;
}

/** @internal */
export const SelectOperators8$inboundSchema: z.ZodNativeEnum<
  typeof SelectOperators8
> = z.nativeEnum(SelectOperators8);

/** @internal */
export const SelectOperators8$outboundSchema: z.ZodNativeEnum<
  typeof SelectOperators8
> = SelectOperators8$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelectOperators8$ {
  /** @deprecated use `SelectOperators8$inboundSchema` instead. */
  export const inboundSchema = SelectOperators8$inboundSchema;
  /** @deprecated use `SelectOperators8$outboundSchema` instead. */
  export const outboundSchema = SelectOperators8$outboundSchema;
}

/** @internal */
export const SelectOperators7$inboundSchema: z.ZodNativeEnum<
  typeof SelectOperators7
> = z.nativeEnum(SelectOperators7);

/** @internal */
export const SelectOperators7$outboundSchema: z.ZodNativeEnum<
  typeof SelectOperators7
> = SelectOperators7$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelectOperators7$ {
  /** @deprecated use `SelectOperators7$inboundSchema` instead. */
  export const inboundSchema = SelectOperators7$inboundSchema;
  /** @deprecated use `SelectOperators7$outboundSchema` instead. */
  export const outboundSchema = SelectOperators7$outboundSchema;
}

/** @internal */
export const SelectOperators6$inboundSchema: z.ZodNativeEnum<
  typeof SelectOperators6
> = z.nativeEnum(SelectOperators6);

/** @internal */
export const SelectOperators6$outboundSchema: z.ZodNativeEnum<
  typeof SelectOperators6
> = SelectOperators6$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelectOperators6$ {
  /** @deprecated use `SelectOperators6$inboundSchema` instead. */
  export const inboundSchema = SelectOperators6$inboundSchema;
  /** @deprecated use `SelectOperators6$outboundSchema` instead. */
  export const outboundSchema = SelectOperators6$outboundSchema;
}

/** @internal */
export const SelectOperators5$inboundSchema: z.ZodNativeEnum<
  typeof SelectOperators5
> = z.nativeEnum(SelectOperators5);

/** @internal */
export const SelectOperators5$outboundSchema: z.ZodNativeEnum<
  typeof SelectOperators5
> = SelectOperators5$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelectOperators5$ {
  /** @deprecated use `SelectOperators5$inboundSchema` instead. */
  export const inboundSchema = SelectOperators5$inboundSchema;
  /** @deprecated use `SelectOperators5$outboundSchema` instead. */
  export const outboundSchema = SelectOperators5$outboundSchema;
}

/** @internal */
export const SelectOperators4$inboundSchema: z.ZodNativeEnum<
  typeof SelectOperators4
> = z.nativeEnum(SelectOperators4);

/** @internal */
export const SelectOperators4$outboundSchema: z.ZodNativeEnum<
  typeof SelectOperators4
> = SelectOperators4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelectOperators4$ {
  /** @deprecated use `SelectOperators4$inboundSchema` instead. */
  export const inboundSchema = SelectOperators4$inboundSchema;
  /** @deprecated use `SelectOperators4$outboundSchema` instead. */
  export const outboundSchema = SelectOperators4$outboundSchema;
}

/** @internal */
export const SelectOperators3$inboundSchema: z.ZodNativeEnum<
  typeof SelectOperators3
> = z.nativeEnum(SelectOperators3);

/** @internal */
export const SelectOperators3$outboundSchema: z.ZodNativeEnum<
  typeof SelectOperators3
> = SelectOperators3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelectOperators3$ {
  /** @deprecated use `SelectOperators3$inboundSchema` instead. */
  export const inboundSchema = SelectOperators3$inboundSchema;
  /** @deprecated use `SelectOperators3$outboundSchema` instead. */
  export const outboundSchema = SelectOperators3$outboundSchema;
}

/** @internal */
export const SelectOperators2$inboundSchema: z.ZodNativeEnum<
  typeof SelectOperators2
> = z.nativeEnum(SelectOperators2);

/** @internal */
export const SelectOperators2$outboundSchema: z.ZodNativeEnum<
  typeof SelectOperators2
> = SelectOperators2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelectOperators2$ {
  /** @deprecated use `SelectOperators2$inboundSchema` instead. */
  export const inboundSchema = SelectOperators2$inboundSchema;
  /** @deprecated use `SelectOperators2$outboundSchema` instead. */
  export const outboundSchema = SelectOperators2$outboundSchema;
}

/** @internal */
export const SelectOperators1$inboundSchema: z.ZodNativeEnum<
  typeof SelectOperators1
> = z.nativeEnum(SelectOperators1);

/** @internal */
export const SelectOperators1$outboundSchema: z.ZodNativeEnum<
  typeof SelectOperators1
> = SelectOperators1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelectOperators1$ {
  /** @deprecated use `SelectOperators1$inboundSchema` instead. */
  export const inboundSchema = SelectOperators1$inboundSchema;
  /** @deprecated use `SelectOperators1$outboundSchema` instead. */
  export const outboundSchema = SelectOperators1$outboundSchema;
}

/** @internal */
export const SelectOperators$inboundSchema: z.ZodType<
  SelectOperators,
  z.ZodTypeDef,
  unknown
> = z.union([
  SelectOperators1$inboundSchema,
  SelectOperators2$inboundSchema,
  SelectOperators3$inboundSchema,
  SelectOperators4$inboundSchema,
  SelectOperators5$inboundSchema,
  SelectOperators6$inboundSchema,
  SelectOperators7$inboundSchema,
  SelectOperators8$inboundSchema,
  SelectOperators9$inboundSchema,
]);

/** @internal */
export type SelectOperators$Outbound =
  | string
  | string
  | string
  | string
  | string
  | string
  | string
  | string
  | string;

/** @internal */
export const SelectOperators$outboundSchema: z.ZodType<
  SelectOperators$Outbound,
  z.ZodTypeDef,
  SelectOperators
> = z.union([
  SelectOperators1$outboundSchema,
  SelectOperators2$outboundSchema,
  SelectOperators3$outboundSchema,
  SelectOperators4$outboundSchema,
  SelectOperators5$outboundSchema,
  SelectOperators6$outboundSchema,
  SelectOperators7$outboundSchema,
  SelectOperators8$outboundSchema,
  SelectOperators9$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelectOperators$ {
  /** @deprecated use `SelectOperators$inboundSchema` instead. */
  export const inboundSchema = SelectOperators$inboundSchema;
  /** @deprecated use `SelectOperators$outboundSchema` instead. */
  export const outboundSchema = SelectOperators$outboundSchema;
  /** @deprecated use `SelectOperators$Outbound` instead. */
  export type Outbound = SelectOperators$Outbound;
}

export function selectOperatorsToJSON(
  selectOperators: SelectOperators,
): string {
  return JSON.stringify(SelectOperators$outboundSchema.parse(selectOperators));
}

export function selectOperatorsFromJSON(
  jsonString: string,
): SafeParseResult<SelectOperators, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SelectOperators$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SelectOperators' from JSON`,
  );
}

/** @internal */
export const Value$inboundSchema: z.ZodType<Value, z.ZodTypeDef, unknown> = z
  .union([z.string(), z.boolean(), z.number(), z.array(z.string())]);

/** @internal */
export type Value$Outbound = string | boolean | number | Array<string>;

/** @internal */
export const Value$outboundSchema: z.ZodType<
  Value$Outbound,
  z.ZodTypeDef,
  Value
> = z.union([z.string(), z.boolean(), z.number(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Value$ {
  /** @deprecated use `Value$inboundSchema` instead. */
  export const inboundSchema = Value$inboundSchema;
  /** @deprecated use `Value$outboundSchema` instead. */
  export const outboundSchema = Value$outboundSchema;
  /** @deprecated use `Value$Outbound` instead. */
  export type Outbound = Value$Outbound;
}

export function valueToJSON(value: Value): string {
  return JSON.stringify(Value$outboundSchema.parse(value));
}

export function valueFromJSON(
  jsonString: string,
): SafeParseResult<Value, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Value$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Value' from JSON`,
  );
}

/** @internal */
export const Condition$inboundSchema: z.ZodType<
  Condition,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: z.union([
    ConversationsFilterField1$inboundSchema,
    ConversationsFilterField2$inboundSchema,
    ConversationsFilterField3$inboundSchema,
    ConversationsFilterField4$inboundSchema,
    ConversationsFilterField5$inboundSchema,
    ConversationsFilterField6$inboundSchema,
    ConversationsFilterField7$inboundSchema,
  ]),
  operator: z.union([
    SelectOperators1$inboundSchema,
    SelectOperators2$inboundSchema,
    SelectOperators3$inboundSchema,
    SelectOperators4$inboundSchema,
    SelectOperators5$inboundSchema,
    SelectOperators6$inboundSchema,
    SelectOperators7$inboundSchema,
    SelectOperators8$inboundSchema,
    SelectOperators9$inboundSchema,
  ]),
  value: z.union([z.string(), z.boolean(), z.number(), z.array(z.string())]),
});

/** @internal */
export type Condition$Outbound = {
  field: string | string | string | string | string | string | string;
  operator:
    | string
    | string
    | string
    | string
    | string
    | string
    | string
    | string
    | string;
  value: string | boolean | number | Array<string>;
};

/** @internal */
export const Condition$outboundSchema: z.ZodType<
  Condition$Outbound,
  z.ZodTypeDef,
  Condition
> = z.object({
  field: z.union([
    ConversationsFilterField1$outboundSchema,
    ConversationsFilterField2$outboundSchema,
    ConversationsFilterField3$outboundSchema,
    ConversationsFilterField4$outboundSchema,
    ConversationsFilterField5$outboundSchema,
    ConversationsFilterField6$outboundSchema,
    ConversationsFilterField7$outboundSchema,
  ]),
  operator: z.union([
    SelectOperators1$outboundSchema,
    SelectOperators2$outboundSchema,
    SelectOperators3$outboundSchema,
    SelectOperators4$outboundSchema,
    SelectOperators5$outboundSchema,
    SelectOperators6$outboundSchema,
    SelectOperators7$outboundSchema,
    SelectOperators8$outboundSchema,
    SelectOperators9$outboundSchema,
  ]),
  value: z.union([z.string(), z.boolean(), z.number(), z.array(z.string())]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Condition$ {
  /** @deprecated use `Condition$inboundSchema` instead. */
  export const inboundSchema = Condition$inboundSchema;
  /** @deprecated use `Condition$outboundSchema` instead. */
  export const outboundSchema = Condition$outboundSchema;
  /** @deprecated use `Condition$Outbound` instead. */
  export type Outbound = Condition$Outbound;
}

export function conditionToJSON(condition: Condition): string {
  return JSON.stringify(Condition$outboundSchema.parse(condition));
}

export function conditionFromJSON(
  jsonString: string,
): SafeParseResult<Condition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Condition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Condition' from JSON`,
  );
}

/** @internal */
export const ConversationsFilter1$inboundSchema: z.ZodType<
  ConversationsFilter1,
  z.ZodTypeDef,
  unknown
> = z.object({
  condition: z.lazy(() => Condition$inboundSchema),
});

/** @internal */
export type ConversationsFilter1$Outbound = {
  condition: Condition$Outbound;
};

/** @internal */
export const ConversationsFilter1$outboundSchema: z.ZodType<
  ConversationsFilter1$Outbound,
  z.ZodTypeDef,
  ConversationsFilter1
> = z.object({
  condition: z.lazy(() => Condition$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsFilter1$ {
  /** @deprecated use `ConversationsFilter1$inboundSchema` instead. */
  export const inboundSchema = ConversationsFilter1$inboundSchema;
  /** @deprecated use `ConversationsFilter1$outboundSchema` instead. */
  export const outboundSchema = ConversationsFilter1$outboundSchema;
  /** @deprecated use `ConversationsFilter1$Outbound` instead. */
  export type Outbound = ConversationsFilter1$Outbound;
}

export function conversationsFilter1ToJSON(
  conversationsFilter1: ConversationsFilter1,
): string {
  return JSON.stringify(
    ConversationsFilter1$outboundSchema.parse(conversationsFilter1),
  );
}

export function conversationsFilter1FromJSON(
  jsonString: string,
): SafeParseResult<ConversationsFilter1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConversationsFilter1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConversationsFilter1' from JSON`,
  );
}

/** @internal */
export const ConversationsFilter$inboundSchema: z.ZodType<
  ConversationsFilter,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ConversationsFilter1$inboundSchema),
  z.lazy(() => ConversationsFilter2$inboundSchema),
  z.lazy(() => ConversationsFilter3$inboundSchema),
]);

/** @internal */
export type ConversationsFilter$Outbound =
  | ConversationsFilter1$Outbound
  | ConversationsFilter2$Outbound
  | ConversationsFilter3$Outbound;

/** @internal */
export const ConversationsFilter$outboundSchema: z.ZodType<
  ConversationsFilter$Outbound,
  z.ZodTypeDef,
  ConversationsFilter
> = z.union([
  z.lazy(() => ConversationsFilter1$outboundSchema),
  z.lazy(() => ConversationsFilter2$outboundSchema),
  z.lazy(() => ConversationsFilter3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsFilter$ {
  /** @deprecated use `ConversationsFilter$inboundSchema` instead. */
  export const inboundSchema = ConversationsFilter$inboundSchema;
  /** @deprecated use `ConversationsFilter$outboundSchema` instead. */
  export const outboundSchema = ConversationsFilter$outboundSchema;
  /** @deprecated use `ConversationsFilter$Outbound` instead. */
  export type Outbound = ConversationsFilter$Outbound;
}

export function conversationsFilterToJSON(
  conversationsFilter: ConversationsFilter,
): string {
  return JSON.stringify(
    ConversationsFilter$outboundSchema.parse(conversationsFilter),
  );
}

export function conversationsFilterFromJSON(
  jsonString: string,
): SafeParseResult<ConversationsFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConversationsFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConversationsFilter' from JSON`,
  );
}
