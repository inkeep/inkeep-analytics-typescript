/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SemanticThreadFilter,
  SemanticThreadFilter$inboundSchema,
  SemanticThreadFilter$Outbound,
  SemanticThreadFilter$outboundSchema,
} from "./semanticthreadfilter.js";

export type Andand = SemanticThreadFilter;

/**
 * AND operator
 */
export type And = {
  /**
   * And condition
   */
  and: Array<SemanticThreadFilter>;
};

/** @internal */
export const Andand$inboundSchema: z.ZodType<Andand, z.ZodTypeDef, unknown> = z
  .lazy(() => SemanticThreadFilter$inboundSchema);

/** @internal */
export type Andand$Outbound = SemanticThreadFilter$Outbound;

/** @internal */
export const Andand$outboundSchema: z.ZodType<
  Andand$Outbound,
  z.ZodTypeDef,
  Andand
> = z.lazy(() => SemanticThreadFilter$outboundSchema);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Andand$ {
  /** @deprecated use `Andand$inboundSchema` instead. */
  export const inboundSchema = Andand$inboundSchema;
  /** @deprecated use `Andand$outboundSchema` instead. */
  export const outboundSchema = Andand$outboundSchema;
  /** @deprecated use `Andand$Outbound` instead. */
  export type Outbound = Andand$Outbound;
}

export function andANDToJSON(andand: Andand): string {
  return JSON.stringify(Andand$outboundSchema.parse(andand));
}

export function andANDFromJSON(
  jsonString: string,
): SafeParseResult<Andand, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Andand$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Andand' from JSON`,
  );
}

/** @internal */
export const And$inboundSchema: z.ZodType<And, z.ZodTypeDef, unknown> = z
  .object({
    and: z.array(z.lazy(() => SemanticThreadFilter$inboundSchema)),
  });

/** @internal */
export type And$Outbound = {
  and: Array<SemanticThreadFilter$Outbound>;
};

/** @internal */
export const And$outboundSchema: z.ZodType<And$Outbound, z.ZodTypeDef, And> = z
  .object({
    and: z.array(z.lazy(() => SemanticThreadFilter$outboundSchema)),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace And$ {
  /** @deprecated use `And$inboundSchema` instead. */
  export const inboundSchema = And$inboundSchema;
  /** @deprecated use `And$outboundSchema` instead. */
  export const outboundSchema = And$outboundSchema;
  /** @deprecated use `And$Outbound` instead. */
  export type Outbound = And$Outbound;
}

export function andToJSON(and: And): string {
  return JSON.stringify(And$outboundSchema.parse(and));
}

export function andFromJSON(
  jsonString: string,
): SafeParseResult<And, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => And$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'And' from JSON`,
  );
}
