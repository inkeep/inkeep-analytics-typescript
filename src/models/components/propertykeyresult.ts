/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PropertyKeyResult = {
  /**
   * Property key name
   */
  key: string;
  /**
   * Number of times this key appears
   */
  count: number;
};

/** @internal */
export const PropertyKeyResult$inboundSchema: z.ZodType<
  PropertyKeyResult,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  count: z.number(),
});

/** @internal */
export type PropertyKeyResult$Outbound = {
  key: string;
  count: number;
};

/** @internal */
export const PropertyKeyResult$outboundSchema: z.ZodType<
  PropertyKeyResult$Outbound,
  z.ZodTypeDef,
  PropertyKeyResult
> = z.object({
  key: z.string(),
  count: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PropertyKeyResult$ {
  /** @deprecated use `PropertyKeyResult$inboundSchema` instead. */
  export const inboundSchema = PropertyKeyResult$inboundSchema;
  /** @deprecated use `PropertyKeyResult$outboundSchema` instead. */
  export const outboundSchema = PropertyKeyResult$outboundSchema;
  /** @deprecated use `PropertyKeyResult$Outbound` instead. */
  export type Outbound = PropertyKeyResult$Outbound;
}

export function propertyKeyResultToJSON(
  propertyKeyResult: PropertyKeyResult,
): string {
  return JSON.stringify(
    PropertyKeyResult$outboundSchema.parse(propertyKeyResult),
  );
}

export function propertyKeyResultFromJSON(
  jsonString: string,
): SafeParseResult<PropertyKeyResult, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PropertyKeyResult$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PropertyKeyResult' from JSON`,
  );
}
