/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ConditionValue,
  ConditionValue$inboundSchema,
  ConditionValue$Outbound,
  ConditionValue$outboundSchema,
} from "./conditionvalue.js";
import {
  FilterOperator,
  FilterOperator$inboundSchema,
  FilterOperator$outboundSchema,
} from "./filteroperator.js";

export const ConditiionField = {
  Id: "id",
  MessageIds: "messageIds",
  MessagesCount: "messagesCount",
  OrganizationId: "organizationId",
  Question: "question",
  QuestionLength: "questionLength",
  Answer: "answer",
  IsOnTopic: "isOnTopic",
  IsClear: "isClear",
  IsDocumented: "isDocumented",
  IsFeatureSupported: "isFeatureSupported",
  IsAnswerConfident: "isAnswerConfident",
  GapSummary: "gapSummary",
  Subject: "subject",
  Category: "category",
  Languages: "languages",
  FirstPartyEntities: "firstPartyEntities",
  ThirdPartyEntities: "thirdPartyEntities",
  Emotion: "emotion",
  Sentiment: "sentiment",
  QuestionType: "questionType",
  ProjectId: "projectId",
  IntegrationId: "integrationId",
  FirstMessageTime: "firstMessageTime",
  LastMessageTime: "lastMessageTime",
  LastUpdated: "lastUpdated",
  HasPositiveFeedback: "hasPositiveFeedback",
  HasNegativeFeedback: "hasNegativeFeedback",
  ConversationIds: "conversationIds",
  AreAIAnnotationsVerified: "areAIAnnotationsVerified",
  IsInitialQuestionAnswer: "isInitialQuestionAnswer",
} as const;
export type ConditiionField = ClosedEnum<typeof ConditiionField>;

export type Condition = {
  field: ConditiionField;
  /**
   * Available Select Operators
   */
  operator: FilterOperator;
  /**
   * The value to compare the field against
   */
  value: ConditionValue;
};

export type Conditiion = {
  condition: Condition;
};

/** @internal */
export const ConditiionField$inboundSchema: z.ZodNativeEnum<
  typeof ConditiionField
> = z.nativeEnum(ConditiionField);

/** @internal */
export const ConditiionField$outboundSchema: z.ZodNativeEnum<
  typeof ConditiionField
> = ConditiionField$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConditiionField$ {
  /** @deprecated use `ConditiionField$inboundSchema` instead. */
  export const inboundSchema = ConditiionField$inboundSchema;
  /** @deprecated use `ConditiionField$outboundSchema` instead. */
  export const outboundSchema = ConditiionField$outboundSchema;
}

/** @internal */
export const Condition$inboundSchema: z.ZodType<
  Condition,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: ConditiionField$inboundSchema,
  operator: FilterOperator$inboundSchema,
  value: ConditionValue$inboundSchema,
});

/** @internal */
export type Condition$Outbound = {
  field: string;
  operator: string;
  value: ConditionValue$Outbound;
};

/** @internal */
export const Condition$outboundSchema: z.ZodType<
  Condition$Outbound,
  z.ZodTypeDef,
  Condition
> = z.object({
  field: ConditiionField$outboundSchema,
  operator: FilterOperator$outboundSchema,
  value: ConditionValue$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Condition$ {
  /** @deprecated use `Condition$inboundSchema` instead. */
  export const inboundSchema = Condition$inboundSchema;
  /** @deprecated use `Condition$outboundSchema` instead. */
  export const outboundSchema = Condition$outboundSchema;
  /** @deprecated use `Condition$Outbound` instead. */
  export type Outbound = Condition$Outbound;
}

export function conditionToJSON(condition: Condition): string {
  return JSON.stringify(Condition$outboundSchema.parse(condition));
}

export function conditionFromJSON(
  jsonString: string,
): SafeParseResult<Condition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Condition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Condition' from JSON`,
  );
}

/** @internal */
export const Conditiion$inboundSchema: z.ZodType<
  Conditiion,
  z.ZodTypeDef,
  unknown
> = z.object({
  condition: z.lazy(() => Condition$inboundSchema),
});

/** @internal */
export type Conditiion$Outbound = {
  condition: Condition$Outbound;
};

/** @internal */
export const Conditiion$outboundSchema: z.ZodType<
  Conditiion$Outbound,
  z.ZodTypeDef,
  Conditiion
> = z.object({
  condition: z.lazy(() => Condition$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Conditiion$ {
  /** @deprecated use `Conditiion$inboundSchema` instead. */
  export const inboundSchema = Conditiion$inboundSchema;
  /** @deprecated use `Conditiion$outboundSchema` instead. */
  export const outboundSchema = Conditiion$outboundSchema;
  /** @deprecated use `Conditiion$Outbound` instead. */
  export type Outbound = Conditiion$Outbound;
}

export function conditiionToJSON(conditiion: Conditiion): string {
  return JSON.stringify(Conditiion$outboundSchema.parse(conditiion));
}

export function conditiionFromJSON(
  jsonString: string,
): SafeParseResult<Conditiion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Conditiion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Conditiion' from JSON`,
  );
}
