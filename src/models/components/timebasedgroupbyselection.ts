/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const TimeBasedGroupBySelectionType = {
  Time: "time",
} as const;
export type TimeBasedGroupBySelectionType = ClosedEnum<
  typeof TimeBasedGroupBySelectionType
>;

export const TimeBasedGroupBySelectionTimeUnit4 = {
  Month: "month",
} as const;
export type TimeBasedGroupBySelectionTimeUnit4 = ClosedEnum<
  typeof TimeBasedGroupBySelectionTimeUnit4
>;

export const TimeBasedGroupBySelectionTimeUnit3 = {
  Week: "week",
} as const;
export type TimeBasedGroupBySelectionTimeUnit3 = ClosedEnum<
  typeof TimeBasedGroupBySelectionTimeUnit3
>;

export const TimeBasedGroupBySelectionTimeUnit2 = {
  Day: "day",
} as const;
export type TimeBasedGroupBySelectionTimeUnit2 = ClosedEnum<
  typeof TimeBasedGroupBySelectionTimeUnit2
>;

export const TimeBasedGroupBySelectionTimeUnit1 = {
  Hour: "hour",
} as const;
export type TimeBasedGroupBySelectionTimeUnit1 = ClosedEnum<
  typeof TimeBasedGroupBySelectionTimeUnit1
>;

/**
 * Available Time Units
 */
export type TimeBasedGroupBySelectionTimeUnit =
  | TimeBasedGroupBySelectionTimeUnit1
  | TimeBasedGroupBySelectionTimeUnit2
  | TimeBasedGroupBySelectionTimeUnit3
  | TimeBasedGroupBySelectionTimeUnit4;

export const Field31 = {
  IsInitialQuestionAnswer: "isInitialQuestionAnswer",
} as const;
export type Field31 = ClosedEnum<typeof Field31>;

export const Field30 = {
  AreAIAnnotationsVerified: "areAIAnnotationsVerified",
} as const;
export type Field30 = ClosedEnum<typeof Field30>;

export const Field29 = {
  ConversationIds: "conversationIds",
} as const;
export type Field29 = ClosedEnum<typeof Field29>;

export const Field28 = {
  HasNegativeFeedback: "hasNegativeFeedback",
} as const;
export type Field28 = ClosedEnum<typeof Field28>;

export const Field27 = {
  HasPositiveFeedback: "hasPositiveFeedback",
} as const;
export type Field27 = ClosedEnum<typeof Field27>;

export const Field26 = {
  LastUpdated: "lastUpdated",
} as const;
export type Field26 = ClosedEnum<typeof Field26>;

export const Field25 = {
  LastMessageTime: "lastMessageTime",
} as const;
export type Field25 = ClosedEnum<typeof Field25>;

export const Field24 = {
  FirstMessageTime: "firstMessageTime",
} as const;
export type Field24 = ClosedEnum<typeof Field24>;

export const Field23 = {
  IntegrationId: "integrationId",
} as const;
export type Field23 = ClosedEnum<typeof Field23>;

export const Field22 = {
  ProjectId: "projectId",
} as const;
export type Field22 = ClosedEnum<typeof Field22>;

export const Field21 = {
  QuestionType: "questionType",
} as const;
export type Field21 = ClosedEnum<typeof Field21>;

export const Field20 = {
  Sentiment: "sentiment",
} as const;
export type Field20 = ClosedEnum<typeof Field20>;

export const Field19 = {
  Emotion: "emotion",
} as const;
export type Field19 = ClosedEnum<typeof Field19>;

export const Field18 = {
  ThirdPartyEntities: "thirdPartyEntities",
} as const;
export type Field18 = ClosedEnum<typeof Field18>;

export const Field17 = {
  FirstPartyEntities: "firstPartyEntities",
} as const;
export type Field17 = ClosedEnum<typeof Field17>;

export const Field16 = {
  Languages: "languages",
} as const;
export type Field16 = ClosedEnum<typeof Field16>;

export const Field15 = {
  Category: "category",
} as const;
export type Field15 = ClosedEnum<typeof Field15>;

export const Field14 = {
  Subject: "subject",
} as const;
export type Field14 = ClosedEnum<typeof Field14>;

export const Field13 = {
  GapSummary: "gapSummary",
} as const;
export type Field13 = ClosedEnum<typeof Field13>;

export const Field12 = {
  IsAnswerConfident: "isAnswerConfident",
} as const;
export type Field12 = ClosedEnum<typeof Field12>;

export const Field11 = {
  IsFeatureSupported: "isFeatureSupported",
} as const;
export type Field11 = ClosedEnum<typeof Field11>;

export const Field10 = {
  IsDocumented: "isDocumented",
} as const;
export type Field10 = ClosedEnum<typeof Field10>;

export const Field9 = {
  IsClear: "isClear",
} as const;
export type Field9 = ClosedEnum<typeof Field9>;

export const Field8 = {
  IsOnTopic: "isOnTopic",
} as const;
export type Field8 = ClosedEnum<typeof Field8>;

export const TimeBasedGroupBySelectionField7 = {
  Answer: "answer",
} as const;
export type TimeBasedGroupBySelectionField7 = ClosedEnum<
  typeof TimeBasedGroupBySelectionField7
>;

export const TimeBasedGroupBySelectionField6 = {
  QuestionLength: "questionLength",
} as const;
export type TimeBasedGroupBySelectionField6 = ClosedEnum<
  typeof TimeBasedGroupBySelectionField6
>;

export const TimeBasedGroupBySelectionField5 = {
  Question: "question",
} as const;
export type TimeBasedGroupBySelectionField5 = ClosedEnum<
  typeof TimeBasedGroupBySelectionField5
>;

export const TimeBasedGroupBySelectionField4 = {
  OrganizationId: "organizationId",
} as const;
export type TimeBasedGroupBySelectionField4 = ClosedEnum<
  typeof TimeBasedGroupBySelectionField4
>;

export const TimeBasedGroupBySelectionField3 = {
  MessagesCount: "messagesCount",
} as const;
export type TimeBasedGroupBySelectionField3 = ClosedEnum<
  typeof TimeBasedGroupBySelectionField3
>;

export const TimeBasedGroupBySelectionField2 = {
  MessageIds: "messageIds",
} as const;
export type TimeBasedGroupBySelectionField2 = ClosedEnum<
  typeof TimeBasedGroupBySelectionField2
>;

export const TimeBasedGroupBySelectionField1 = {
  Id: "id",
} as const;
export type TimeBasedGroupBySelectionField1 = ClosedEnum<
  typeof TimeBasedGroupBySelectionField1
>;

export type TimeBasedGroupBySelectionField =
  | TimeBasedGroupBySelectionField1
  | TimeBasedGroupBySelectionField2
  | TimeBasedGroupBySelectionField3
  | TimeBasedGroupBySelectionField4
  | TimeBasedGroupBySelectionField5
  | TimeBasedGroupBySelectionField6
  | TimeBasedGroupBySelectionField7
  | Field8
  | Field9
  | Field10
  | Field11
  | Field12
  | Field13
  | Field14
  | Field15
  | Field16
  | Field17
  | Field18
  | Field19
  | Field20
  | Field21
  | Field22
  | Field23
  | Field24
  | Field25
  | Field26
  | Field27
  | Field28
  | Field29
  | Field30
  | Field31;

export type TimeBasedGroupBySelection = {
  type: TimeBasedGroupBySelectionType;
  /**
   * Available Time Units
   */
  timeUnit:
    | TimeBasedGroupBySelectionTimeUnit1
    | TimeBasedGroupBySelectionTimeUnit2
    | TimeBasedGroupBySelectionTimeUnit3
    | TimeBasedGroupBySelectionTimeUnit4;
  field:
    | TimeBasedGroupBySelectionField1
    | TimeBasedGroupBySelectionField2
    | TimeBasedGroupBySelectionField3
    | TimeBasedGroupBySelectionField4
    | TimeBasedGroupBySelectionField5
    | TimeBasedGroupBySelectionField6
    | TimeBasedGroupBySelectionField7
    | Field8
    | Field9
    | Field10
    | Field11
    | Field12
    | Field13
    | Field14
    | Field15
    | Field16
    | Field17
    | Field18
    | Field19
    | Field20
    | Field21
    | Field22
    | Field23
    | Field24
    | Field25
    | Field26
    | Field27
    | Field28
    | Field29
    | Field30
    | Field31;
};

/** @internal */
export const TimeBasedGroupBySelectionType$inboundSchema: z.ZodNativeEnum<
  typeof TimeBasedGroupBySelectionType
> = z.nativeEnum(TimeBasedGroupBySelectionType);

/** @internal */
export const TimeBasedGroupBySelectionType$outboundSchema: z.ZodNativeEnum<
  typeof TimeBasedGroupBySelectionType
> = TimeBasedGroupBySelectionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeBasedGroupBySelectionType$ {
  /** @deprecated use `TimeBasedGroupBySelectionType$inboundSchema` instead. */
  export const inboundSchema = TimeBasedGroupBySelectionType$inboundSchema;
  /** @deprecated use `TimeBasedGroupBySelectionType$outboundSchema` instead. */
  export const outboundSchema = TimeBasedGroupBySelectionType$outboundSchema;
}

/** @internal */
export const TimeBasedGroupBySelectionTimeUnit4$inboundSchema: z.ZodNativeEnum<
  typeof TimeBasedGroupBySelectionTimeUnit4
> = z.nativeEnum(TimeBasedGroupBySelectionTimeUnit4);

/** @internal */
export const TimeBasedGroupBySelectionTimeUnit4$outboundSchema: z.ZodNativeEnum<
  typeof TimeBasedGroupBySelectionTimeUnit4
> = TimeBasedGroupBySelectionTimeUnit4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeBasedGroupBySelectionTimeUnit4$ {
  /** @deprecated use `TimeBasedGroupBySelectionTimeUnit4$inboundSchema` instead. */
  export const inboundSchema = TimeBasedGroupBySelectionTimeUnit4$inboundSchema;
  /** @deprecated use `TimeBasedGroupBySelectionTimeUnit4$outboundSchema` instead. */
  export const outboundSchema =
    TimeBasedGroupBySelectionTimeUnit4$outboundSchema;
}

/** @internal */
export const TimeBasedGroupBySelectionTimeUnit3$inboundSchema: z.ZodNativeEnum<
  typeof TimeBasedGroupBySelectionTimeUnit3
> = z.nativeEnum(TimeBasedGroupBySelectionTimeUnit3);

/** @internal */
export const TimeBasedGroupBySelectionTimeUnit3$outboundSchema: z.ZodNativeEnum<
  typeof TimeBasedGroupBySelectionTimeUnit3
> = TimeBasedGroupBySelectionTimeUnit3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeBasedGroupBySelectionTimeUnit3$ {
  /** @deprecated use `TimeBasedGroupBySelectionTimeUnit3$inboundSchema` instead. */
  export const inboundSchema = TimeBasedGroupBySelectionTimeUnit3$inboundSchema;
  /** @deprecated use `TimeBasedGroupBySelectionTimeUnit3$outboundSchema` instead. */
  export const outboundSchema =
    TimeBasedGroupBySelectionTimeUnit3$outboundSchema;
}

/** @internal */
export const TimeBasedGroupBySelectionTimeUnit2$inboundSchema: z.ZodNativeEnum<
  typeof TimeBasedGroupBySelectionTimeUnit2
> = z.nativeEnum(TimeBasedGroupBySelectionTimeUnit2);

/** @internal */
export const TimeBasedGroupBySelectionTimeUnit2$outboundSchema: z.ZodNativeEnum<
  typeof TimeBasedGroupBySelectionTimeUnit2
> = TimeBasedGroupBySelectionTimeUnit2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeBasedGroupBySelectionTimeUnit2$ {
  /** @deprecated use `TimeBasedGroupBySelectionTimeUnit2$inboundSchema` instead. */
  export const inboundSchema = TimeBasedGroupBySelectionTimeUnit2$inboundSchema;
  /** @deprecated use `TimeBasedGroupBySelectionTimeUnit2$outboundSchema` instead. */
  export const outboundSchema =
    TimeBasedGroupBySelectionTimeUnit2$outboundSchema;
}

/** @internal */
export const TimeBasedGroupBySelectionTimeUnit1$inboundSchema: z.ZodNativeEnum<
  typeof TimeBasedGroupBySelectionTimeUnit1
> = z.nativeEnum(TimeBasedGroupBySelectionTimeUnit1);

/** @internal */
export const TimeBasedGroupBySelectionTimeUnit1$outboundSchema: z.ZodNativeEnum<
  typeof TimeBasedGroupBySelectionTimeUnit1
> = TimeBasedGroupBySelectionTimeUnit1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeBasedGroupBySelectionTimeUnit1$ {
  /** @deprecated use `TimeBasedGroupBySelectionTimeUnit1$inboundSchema` instead. */
  export const inboundSchema = TimeBasedGroupBySelectionTimeUnit1$inboundSchema;
  /** @deprecated use `TimeBasedGroupBySelectionTimeUnit1$outboundSchema` instead. */
  export const outboundSchema =
    TimeBasedGroupBySelectionTimeUnit1$outboundSchema;
}

/** @internal */
export const TimeBasedGroupBySelectionTimeUnit$inboundSchema: z.ZodType<
  TimeBasedGroupBySelectionTimeUnit,
  z.ZodTypeDef,
  unknown
> = z.union([
  TimeBasedGroupBySelectionTimeUnit1$inboundSchema,
  TimeBasedGroupBySelectionTimeUnit2$inboundSchema,
  TimeBasedGroupBySelectionTimeUnit3$inboundSchema,
  TimeBasedGroupBySelectionTimeUnit4$inboundSchema,
]);

/** @internal */
export type TimeBasedGroupBySelectionTimeUnit$Outbound =
  | string
  | string
  | string
  | string;

/** @internal */
export const TimeBasedGroupBySelectionTimeUnit$outboundSchema: z.ZodType<
  TimeBasedGroupBySelectionTimeUnit$Outbound,
  z.ZodTypeDef,
  TimeBasedGroupBySelectionTimeUnit
> = z.union([
  TimeBasedGroupBySelectionTimeUnit1$outboundSchema,
  TimeBasedGroupBySelectionTimeUnit2$outboundSchema,
  TimeBasedGroupBySelectionTimeUnit3$outboundSchema,
  TimeBasedGroupBySelectionTimeUnit4$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeBasedGroupBySelectionTimeUnit$ {
  /** @deprecated use `TimeBasedGroupBySelectionTimeUnit$inboundSchema` instead. */
  export const inboundSchema = TimeBasedGroupBySelectionTimeUnit$inboundSchema;
  /** @deprecated use `TimeBasedGroupBySelectionTimeUnit$outboundSchema` instead. */
  export const outboundSchema =
    TimeBasedGroupBySelectionTimeUnit$outboundSchema;
  /** @deprecated use `TimeBasedGroupBySelectionTimeUnit$Outbound` instead. */
  export type Outbound = TimeBasedGroupBySelectionTimeUnit$Outbound;
}

export function timeBasedGroupBySelectionTimeUnitToJSON(
  timeBasedGroupBySelectionTimeUnit: TimeBasedGroupBySelectionTimeUnit,
): string {
  return JSON.stringify(
    TimeBasedGroupBySelectionTimeUnit$outboundSchema.parse(
      timeBasedGroupBySelectionTimeUnit,
    ),
  );
}

export function timeBasedGroupBySelectionTimeUnitFromJSON(
  jsonString: string,
): SafeParseResult<TimeBasedGroupBySelectionTimeUnit, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TimeBasedGroupBySelectionTimeUnit$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TimeBasedGroupBySelectionTimeUnit' from JSON`,
  );
}

/** @internal */
export const Field31$inboundSchema: z.ZodNativeEnum<typeof Field31> = z
  .nativeEnum(Field31);

/** @internal */
export const Field31$outboundSchema: z.ZodNativeEnum<typeof Field31> =
  Field31$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field31$ {
  /** @deprecated use `Field31$inboundSchema` instead. */
  export const inboundSchema = Field31$inboundSchema;
  /** @deprecated use `Field31$outboundSchema` instead. */
  export const outboundSchema = Field31$outboundSchema;
}

/** @internal */
export const Field30$inboundSchema: z.ZodNativeEnum<typeof Field30> = z
  .nativeEnum(Field30);

/** @internal */
export const Field30$outboundSchema: z.ZodNativeEnum<typeof Field30> =
  Field30$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field30$ {
  /** @deprecated use `Field30$inboundSchema` instead. */
  export const inboundSchema = Field30$inboundSchema;
  /** @deprecated use `Field30$outboundSchema` instead. */
  export const outboundSchema = Field30$outboundSchema;
}

/** @internal */
export const Field29$inboundSchema: z.ZodNativeEnum<typeof Field29> = z
  .nativeEnum(Field29);

/** @internal */
export const Field29$outboundSchema: z.ZodNativeEnum<typeof Field29> =
  Field29$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field29$ {
  /** @deprecated use `Field29$inboundSchema` instead. */
  export const inboundSchema = Field29$inboundSchema;
  /** @deprecated use `Field29$outboundSchema` instead. */
  export const outboundSchema = Field29$outboundSchema;
}

/** @internal */
export const Field28$inboundSchema: z.ZodNativeEnum<typeof Field28> = z
  .nativeEnum(Field28);

/** @internal */
export const Field28$outboundSchema: z.ZodNativeEnum<typeof Field28> =
  Field28$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field28$ {
  /** @deprecated use `Field28$inboundSchema` instead. */
  export const inboundSchema = Field28$inboundSchema;
  /** @deprecated use `Field28$outboundSchema` instead. */
  export const outboundSchema = Field28$outboundSchema;
}

/** @internal */
export const Field27$inboundSchema: z.ZodNativeEnum<typeof Field27> = z
  .nativeEnum(Field27);

/** @internal */
export const Field27$outboundSchema: z.ZodNativeEnum<typeof Field27> =
  Field27$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field27$ {
  /** @deprecated use `Field27$inboundSchema` instead. */
  export const inboundSchema = Field27$inboundSchema;
  /** @deprecated use `Field27$outboundSchema` instead. */
  export const outboundSchema = Field27$outboundSchema;
}

/** @internal */
export const Field26$inboundSchema: z.ZodNativeEnum<typeof Field26> = z
  .nativeEnum(Field26);

/** @internal */
export const Field26$outboundSchema: z.ZodNativeEnum<typeof Field26> =
  Field26$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field26$ {
  /** @deprecated use `Field26$inboundSchema` instead. */
  export const inboundSchema = Field26$inboundSchema;
  /** @deprecated use `Field26$outboundSchema` instead. */
  export const outboundSchema = Field26$outboundSchema;
}

/** @internal */
export const Field25$inboundSchema: z.ZodNativeEnum<typeof Field25> = z
  .nativeEnum(Field25);

/** @internal */
export const Field25$outboundSchema: z.ZodNativeEnum<typeof Field25> =
  Field25$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field25$ {
  /** @deprecated use `Field25$inboundSchema` instead. */
  export const inboundSchema = Field25$inboundSchema;
  /** @deprecated use `Field25$outboundSchema` instead. */
  export const outboundSchema = Field25$outboundSchema;
}

/** @internal */
export const Field24$inboundSchema: z.ZodNativeEnum<typeof Field24> = z
  .nativeEnum(Field24);

/** @internal */
export const Field24$outboundSchema: z.ZodNativeEnum<typeof Field24> =
  Field24$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field24$ {
  /** @deprecated use `Field24$inboundSchema` instead. */
  export const inboundSchema = Field24$inboundSchema;
  /** @deprecated use `Field24$outboundSchema` instead. */
  export const outboundSchema = Field24$outboundSchema;
}

/** @internal */
export const Field23$inboundSchema: z.ZodNativeEnum<typeof Field23> = z
  .nativeEnum(Field23);

/** @internal */
export const Field23$outboundSchema: z.ZodNativeEnum<typeof Field23> =
  Field23$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field23$ {
  /** @deprecated use `Field23$inboundSchema` instead. */
  export const inboundSchema = Field23$inboundSchema;
  /** @deprecated use `Field23$outboundSchema` instead. */
  export const outboundSchema = Field23$outboundSchema;
}

/** @internal */
export const Field22$inboundSchema: z.ZodNativeEnum<typeof Field22> = z
  .nativeEnum(Field22);

/** @internal */
export const Field22$outboundSchema: z.ZodNativeEnum<typeof Field22> =
  Field22$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field22$ {
  /** @deprecated use `Field22$inboundSchema` instead. */
  export const inboundSchema = Field22$inboundSchema;
  /** @deprecated use `Field22$outboundSchema` instead. */
  export const outboundSchema = Field22$outboundSchema;
}

/** @internal */
export const Field21$inboundSchema: z.ZodNativeEnum<typeof Field21> = z
  .nativeEnum(Field21);

/** @internal */
export const Field21$outboundSchema: z.ZodNativeEnum<typeof Field21> =
  Field21$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field21$ {
  /** @deprecated use `Field21$inboundSchema` instead. */
  export const inboundSchema = Field21$inboundSchema;
  /** @deprecated use `Field21$outboundSchema` instead. */
  export const outboundSchema = Field21$outboundSchema;
}

/** @internal */
export const Field20$inboundSchema: z.ZodNativeEnum<typeof Field20> = z
  .nativeEnum(Field20);

/** @internal */
export const Field20$outboundSchema: z.ZodNativeEnum<typeof Field20> =
  Field20$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field20$ {
  /** @deprecated use `Field20$inboundSchema` instead. */
  export const inboundSchema = Field20$inboundSchema;
  /** @deprecated use `Field20$outboundSchema` instead. */
  export const outboundSchema = Field20$outboundSchema;
}

/** @internal */
export const Field19$inboundSchema: z.ZodNativeEnum<typeof Field19> = z
  .nativeEnum(Field19);

/** @internal */
export const Field19$outboundSchema: z.ZodNativeEnum<typeof Field19> =
  Field19$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field19$ {
  /** @deprecated use `Field19$inboundSchema` instead. */
  export const inboundSchema = Field19$inboundSchema;
  /** @deprecated use `Field19$outboundSchema` instead. */
  export const outboundSchema = Field19$outboundSchema;
}

/** @internal */
export const Field18$inboundSchema: z.ZodNativeEnum<typeof Field18> = z
  .nativeEnum(Field18);

/** @internal */
export const Field18$outboundSchema: z.ZodNativeEnum<typeof Field18> =
  Field18$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field18$ {
  /** @deprecated use `Field18$inboundSchema` instead. */
  export const inboundSchema = Field18$inboundSchema;
  /** @deprecated use `Field18$outboundSchema` instead. */
  export const outboundSchema = Field18$outboundSchema;
}

/** @internal */
export const Field17$inboundSchema: z.ZodNativeEnum<typeof Field17> = z
  .nativeEnum(Field17);

/** @internal */
export const Field17$outboundSchema: z.ZodNativeEnum<typeof Field17> =
  Field17$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field17$ {
  /** @deprecated use `Field17$inboundSchema` instead. */
  export const inboundSchema = Field17$inboundSchema;
  /** @deprecated use `Field17$outboundSchema` instead. */
  export const outboundSchema = Field17$outboundSchema;
}

/** @internal */
export const Field16$inboundSchema: z.ZodNativeEnum<typeof Field16> = z
  .nativeEnum(Field16);

/** @internal */
export const Field16$outboundSchema: z.ZodNativeEnum<typeof Field16> =
  Field16$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field16$ {
  /** @deprecated use `Field16$inboundSchema` instead. */
  export const inboundSchema = Field16$inboundSchema;
  /** @deprecated use `Field16$outboundSchema` instead. */
  export const outboundSchema = Field16$outboundSchema;
}

/** @internal */
export const Field15$inboundSchema: z.ZodNativeEnum<typeof Field15> = z
  .nativeEnum(Field15);

/** @internal */
export const Field15$outboundSchema: z.ZodNativeEnum<typeof Field15> =
  Field15$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field15$ {
  /** @deprecated use `Field15$inboundSchema` instead. */
  export const inboundSchema = Field15$inboundSchema;
  /** @deprecated use `Field15$outboundSchema` instead. */
  export const outboundSchema = Field15$outboundSchema;
}

/** @internal */
export const Field14$inboundSchema: z.ZodNativeEnum<typeof Field14> = z
  .nativeEnum(Field14);

/** @internal */
export const Field14$outboundSchema: z.ZodNativeEnum<typeof Field14> =
  Field14$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field14$ {
  /** @deprecated use `Field14$inboundSchema` instead. */
  export const inboundSchema = Field14$inboundSchema;
  /** @deprecated use `Field14$outboundSchema` instead. */
  export const outboundSchema = Field14$outboundSchema;
}

/** @internal */
export const Field13$inboundSchema: z.ZodNativeEnum<typeof Field13> = z
  .nativeEnum(Field13);

/** @internal */
export const Field13$outboundSchema: z.ZodNativeEnum<typeof Field13> =
  Field13$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field13$ {
  /** @deprecated use `Field13$inboundSchema` instead. */
  export const inboundSchema = Field13$inboundSchema;
  /** @deprecated use `Field13$outboundSchema` instead. */
  export const outboundSchema = Field13$outboundSchema;
}

/** @internal */
export const Field12$inboundSchema: z.ZodNativeEnum<typeof Field12> = z
  .nativeEnum(Field12);

/** @internal */
export const Field12$outboundSchema: z.ZodNativeEnum<typeof Field12> =
  Field12$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field12$ {
  /** @deprecated use `Field12$inboundSchema` instead. */
  export const inboundSchema = Field12$inboundSchema;
  /** @deprecated use `Field12$outboundSchema` instead. */
  export const outboundSchema = Field12$outboundSchema;
}

/** @internal */
export const Field11$inboundSchema: z.ZodNativeEnum<typeof Field11> = z
  .nativeEnum(Field11);

/** @internal */
export const Field11$outboundSchema: z.ZodNativeEnum<typeof Field11> =
  Field11$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field11$ {
  /** @deprecated use `Field11$inboundSchema` instead. */
  export const inboundSchema = Field11$inboundSchema;
  /** @deprecated use `Field11$outboundSchema` instead. */
  export const outboundSchema = Field11$outboundSchema;
}

/** @internal */
export const Field10$inboundSchema: z.ZodNativeEnum<typeof Field10> = z
  .nativeEnum(Field10);

/** @internal */
export const Field10$outboundSchema: z.ZodNativeEnum<typeof Field10> =
  Field10$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field10$ {
  /** @deprecated use `Field10$inboundSchema` instead. */
  export const inboundSchema = Field10$inboundSchema;
  /** @deprecated use `Field10$outboundSchema` instead. */
  export const outboundSchema = Field10$outboundSchema;
}

/** @internal */
export const Field9$inboundSchema: z.ZodNativeEnum<typeof Field9> = z
  .nativeEnum(Field9);

/** @internal */
export const Field9$outboundSchema: z.ZodNativeEnum<typeof Field9> =
  Field9$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field9$ {
  /** @deprecated use `Field9$inboundSchema` instead. */
  export const inboundSchema = Field9$inboundSchema;
  /** @deprecated use `Field9$outboundSchema` instead. */
  export const outboundSchema = Field9$outboundSchema;
}

/** @internal */
export const Field8$inboundSchema: z.ZodNativeEnum<typeof Field8> = z
  .nativeEnum(Field8);

/** @internal */
export const Field8$outboundSchema: z.ZodNativeEnum<typeof Field8> =
  Field8$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Field8$ {
  /** @deprecated use `Field8$inboundSchema` instead. */
  export const inboundSchema = Field8$inboundSchema;
  /** @deprecated use `Field8$outboundSchema` instead. */
  export const outboundSchema = Field8$outboundSchema;
}

/** @internal */
export const TimeBasedGroupBySelectionField7$inboundSchema: z.ZodNativeEnum<
  typeof TimeBasedGroupBySelectionField7
> = z.nativeEnum(TimeBasedGroupBySelectionField7);

/** @internal */
export const TimeBasedGroupBySelectionField7$outboundSchema: z.ZodNativeEnum<
  typeof TimeBasedGroupBySelectionField7
> = TimeBasedGroupBySelectionField7$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeBasedGroupBySelectionField7$ {
  /** @deprecated use `TimeBasedGroupBySelectionField7$inboundSchema` instead. */
  export const inboundSchema = TimeBasedGroupBySelectionField7$inboundSchema;
  /** @deprecated use `TimeBasedGroupBySelectionField7$outboundSchema` instead. */
  export const outboundSchema = TimeBasedGroupBySelectionField7$outboundSchema;
}

/** @internal */
export const TimeBasedGroupBySelectionField6$inboundSchema: z.ZodNativeEnum<
  typeof TimeBasedGroupBySelectionField6
> = z.nativeEnum(TimeBasedGroupBySelectionField6);

/** @internal */
export const TimeBasedGroupBySelectionField6$outboundSchema: z.ZodNativeEnum<
  typeof TimeBasedGroupBySelectionField6
> = TimeBasedGroupBySelectionField6$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeBasedGroupBySelectionField6$ {
  /** @deprecated use `TimeBasedGroupBySelectionField6$inboundSchema` instead. */
  export const inboundSchema = TimeBasedGroupBySelectionField6$inboundSchema;
  /** @deprecated use `TimeBasedGroupBySelectionField6$outboundSchema` instead. */
  export const outboundSchema = TimeBasedGroupBySelectionField6$outboundSchema;
}

/** @internal */
export const TimeBasedGroupBySelectionField5$inboundSchema: z.ZodNativeEnum<
  typeof TimeBasedGroupBySelectionField5
> = z.nativeEnum(TimeBasedGroupBySelectionField5);

/** @internal */
export const TimeBasedGroupBySelectionField5$outboundSchema: z.ZodNativeEnum<
  typeof TimeBasedGroupBySelectionField5
> = TimeBasedGroupBySelectionField5$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeBasedGroupBySelectionField5$ {
  /** @deprecated use `TimeBasedGroupBySelectionField5$inboundSchema` instead. */
  export const inboundSchema = TimeBasedGroupBySelectionField5$inboundSchema;
  /** @deprecated use `TimeBasedGroupBySelectionField5$outboundSchema` instead. */
  export const outboundSchema = TimeBasedGroupBySelectionField5$outboundSchema;
}

/** @internal */
export const TimeBasedGroupBySelectionField4$inboundSchema: z.ZodNativeEnum<
  typeof TimeBasedGroupBySelectionField4
> = z.nativeEnum(TimeBasedGroupBySelectionField4);

/** @internal */
export const TimeBasedGroupBySelectionField4$outboundSchema: z.ZodNativeEnum<
  typeof TimeBasedGroupBySelectionField4
> = TimeBasedGroupBySelectionField4$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeBasedGroupBySelectionField4$ {
  /** @deprecated use `TimeBasedGroupBySelectionField4$inboundSchema` instead. */
  export const inboundSchema = TimeBasedGroupBySelectionField4$inboundSchema;
  /** @deprecated use `TimeBasedGroupBySelectionField4$outboundSchema` instead. */
  export const outboundSchema = TimeBasedGroupBySelectionField4$outboundSchema;
}

/** @internal */
export const TimeBasedGroupBySelectionField3$inboundSchema: z.ZodNativeEnum<
  typeof TimeBasedGroupBySelectionField3
> = z.nativeEnum(TimeBasedGroupBySelectionField3);

/** @internal */
export const TimeBasedGroupBySelectionField3$outboundSchema: z.ZodNativeEnum<
  typeof TimeBasedGroupBySelectionField3
> = TimeBasedGroupBySelectionField3$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeBasedGroupBySelectionField3$ {
  /** @deprecated use `TimeBasedGroupBySelectionField3$inboundSchema` instead. */
  export const inboundSchema = TimeBasedGroupBySelectionField3$inboundSchema;
  /** @deprecated use `TimeBasedGroupBySelectionField3$outboundSchema` instead. */
  export const outboundSchema = TimeBasedGroupBySelectionField3$outboundSchema;
}

/** @internal */
export const TimeBasedGroupBySelectionField2$inboundSchema: z.ZodNativeEnum<
  typeof TimeBasedGroupBySelectionField2
> = z.nativeEnum(TimeBasedGroupBySelectionField2);

/** @internal */
export const TimeBasedGroupBySelectionField2$outboundSchema: z.ZodNativeEnum<
  typeof TimeBasedGroupBySelectionField2
> = TimeBasedGroupBySelectionField2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeBasedGroupBySelectionField2$ {
  /** @deprecated use `TimeBasedGroupBySelectionField2$inboundSchema` instead. */
  export const inboundSchema = TimeBasedGroupBySelectionField2$inboundSchema;
  /** @deprecated use `TimeBasedGroupBySelectionField2$outboundSchema` instead. */
  export const outboundSchema = TimeBasedGroupBySelectionField2$outboundSchema;
}

/** @internal */
export const TimeBasedGroupBySelectionField1$inboundSchema: z.ZodNativeEnum<
  typeof TimeBasedGroupBySelectionField1
> = z.nativeEnum(TimeBasedGroupBySelectionField1);

/** @internal */
export const TimeBasedGroupBySelectionField1$outboundSchema: z.ZodNativeEnum<
  typeof TimeBasedGroupBySelectionField1
> = TimeBasedGroupBySelectionField1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeBasedGroupBySelectionField1$ {
  /** @deprecated use `TimeBasedGroupBySelectionField1$inboundSchema` instead. */
  export const inboundSchema = TimeBasedGroupBySelectionField1$inboundSchema;
  /** @deprecated use `TimeBasedGroupBySelectionField1$outboundSchema` instead. */
  export const outboundSchema = TimeBasedGroupBySelectionField1$outboundSchema;
}

/** @internal */
export const TimeBasedGroupBySelectionField$inboundSchema: z.ZodType<
  TimeBasedGroupBySelectionField,
  z.ZodTypeDef,
  unknown
> = z.union([
  TimeBasedGroupBySelectionField1$inboundSchema,
  TimeBasedGroupBySelectionField2$inboundSchema,
  TimeBasedGroupBySelectionField3$inboundSchema,
  TimeBasedGroupBySelectionField4$inboundSchema,
  TimeBasedGroupBySelectionField5$inboundSchema,
  TimeBasedGroupBySelectionField6$inboundSchema,
  TimeBasedGroupBySelectionField7$inboundSchema,
  Field8$inboundSchema,
  Field9$inboundSchema,
  Field10$inboundSchema,
  Field11$inboundSchema,
  Field12$inboundSchema,
  Field13$inboundSchema,
  Field14$inboundSchema,
  Field15$inboundSchema,
  Field16$inboundSchema,
  Field17$inboundSchema,
  Field18$inboundSchema,
  Field19$inboundSchema,
  Field20$inboundSchema,
  Field21$inboundSchema,
  Field22$inboundSchema,
  Field23$inboundSchema,
  Field24$inboundSchema,
  Field25$inboundSchema,
  Field26$inboundSchema,
  Field27$inboundSchema,
  Field28$inboundSchema,
  Field29$inboundSchema,
  Field30$inboundSchema,
  Field31$inboundSchema,
]);

/** @internal */
export type TimeBasedGroupBySelectionField$Outbound =
  | string
  | string
  | string
  | string
  | string
  | string
  | string
  | string
  | string
  | string
  | string
  | string
  | string
  | string
  | string
  | string
  | string
  | string
  | string
  | string
  | string
  | string
  | string
  | string
  | string
  | string
  | string
  | string
  | string
  | string
  | string;

/** @internal */
export const TimeBasedGroupBySelectionField$outboundSchema: z.ZodType<
  TimeBasedGroupBySelectionField$Outbound,
  z.ZodTypeDef,
  TimeBasedGroupBySelectionField
> = z.union([
  TimeBasedGroupBySelectionField1$outboundSchema,
  TimeBasedGroupBySelectionField2$outboundSchema,
  TimeBasedGroupBySelectionField3$outboundSchema,
  TimeBasedGroupBySelectionField4$outboundSchema,
  TimeBasedGroupBySelectionField5$outboundSchema,
  TimeBasedGroupBySelectionField6$outboundSchema,
  TimeBasedGroupBySelectionField7$outboundSchema,
  Field8$outboundSchema,
  Field9$outboundSchema,
  Field10$outboundSchema,
  Field11$outboundSchema,
  Field12$outboundSchema,
  Field13$outboundSchema,
  Field14$outboundSchema,
  Field15$outboundSchema,
  Field16$outboundSchema,
  Field17$outboundSchema,
  Field18$outboundSchema,
  Field19$outboundSchema,
  Field20$outboundSchema,
  Field21$outboundSchema,
  Field22$outboundSchema,
  Field23$outboundSchema,
  Field24$outboundSchema,
  Field25$outboundSchema,
  Field26$outboundSchema,
  Field27$outboundSchema,
  Field28$outboundSchema,
  Field29$outboundSchema,
  Field30$outboundSchema,
  Field31$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeBasedGroupBySelectionField$ {
  /** @deprecated use `TimeBasedGroupBySelectionField$inboundSchema` instead. */
  export const inboundSchema = TimeBasedGroupBySelectionField$inboundSchema;
  /** @deprecated use `TimeBasedGroupBySelectionField$outboundSchema` instead. */
  export const outboundSchema = TimeBasedGroupBySelectionField$outboundSchema;
  /** @deprecated use `TimeBasedGroupBySelectionField$Outbound` instead. */
  export type Outbound = TimeBasedGroupBySelectionField$Outbound;
}

export function timeBasedGroupBySelectionFieldToJSON(
  timeBasedGroupBySelectionField: TimeBasedGroupBySelectionField,
): string {
  return JSON.stringify(
    TimeBasedGroupBySelectionField$outboundSchema.parse(
      timeBasedGroupBySelectionField,
    ),
  );
}

export function timeBasedGroupBySelectionFieldFromJSON(
  jsonString: string,
): SafeParseResult<TimeBasedGroupBySelectionField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TimeBasedGroupBySelectionField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TimeBasedGroupBySelectionField' from JSON`,
  );
}

/** @internal */
export const TimeBasedGroupBySelection$inboundSchema: z.ZodType<
  TimeBasedGroupBySelection,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TimeBasedGroupBySelectionType$inboundSchema,
  timeUnit: z.union([
    TimeBasedGroupBySelectionTimeUnit1$inboundSchema,
    TimeBasedGroupBySelectionTimeUnit2$inboundSchema,
    TimeBasedGroupBySelectionTimeUnit3$inboundSchema,
    TimeBasedGroupBySelectionTimeUnit4$inboundSchema,
  ]),
  field: z.union([
    TimeBasedGroupBySelectionField1$inboundSchema,
    TimeBasedGroupBySelectionField2$inboundSchema,
    TimeBasedGroupBySelectionField3$inboundSchema,
    TimeBasedGroupBySelectionField4$inboundSchema,
    TimeBasedGroupBySelectionField5$inboundSchema,
    TimeBasedGroupBySelectionField6$inboundSchema,
    TimeBasedGroupBySelectionField7$inboundSchema,
    Field8$inboundSchema,
    Field9$inboundSchema,
    Field10$inboundSchema,
    Field11$inboundSchema,
    Field12$inboundSchema,
    Field13$inboundSchema,
    Field14$inboundSchema,
    Field15$inboundSchema,
    Field16$inboundSchema,
    Field17$inboundSchema,
    Field18$inboundSchema,
    Field19$inboundSchema,
    Field20$inboundSchema,
    Field21$inboundSchema,
    Field22$inboundSchema,
    Field23$inboundSchema,
    Field24$inboundSchema,
    Field25$inboundSchema,
    Field26$inboundSchema,
    Field27$inboundSchema,
    Field28$inboundSchema,
    Field29$inboundSchema,
    Field30$inboundSchema,
    Field31$inboundSchema,
  ]),
});

/** @internal */
export type TimeBasedGroupBySelection$Outbound = {
  type: string;
  timeUnit: string | string | string | string;
  field:
    | string
    | string
    | string
    | string
    | string
    | string
    | string
    | string
    | string
    | string
    | string
    | string
    | string
    | string
    | string
    | string
    | string
    | string
    | string
    | string
    | string
    | string
    | string
    | string
    | string
    | string
    | string
    | string
    | string
    | string
    | string;
};

/** @internal */
export const TimeBasedGroupBySelection$outboundSchema: z.ZodType<
  TimeBasedGroupBySelection$Outbound,
  z.ZodTypeDef,
  TimeBasedGroupBySelection
> = z.object({
  type: TimeBasedGroupBySelectionType$outboundSchema,
  timeUnit: z.union([
    TimeBasedGroupBySelectionTimeUnit1$outboundSchema,
    TimeBasedGroupBySelectionTimeUnit2$outboundSchema,
    TimeBasedGroupBySelectionTimeUnit3$outboundSchema,
    TimeBasedGroupBySelectionTimeUnit4$outboundSchema,
  ]),
  field: z.union([
    TimeBasedGroupBySelectionField1$outboundSchema,
    TimeBasedGroupBySelectionField2$outboundSchema,
    TimeBasedGroupBySelectionField3$outboundSchema,
    TimeBasedGroupBySelectionField4$outboundSchema,
    TimeBasedGroupBySelectionField5$outboundSchema,
    TimeBasedGroupBySelectionField6$outboundSchema,
    TimeBasedGroupBySelectionField7$outboundSchema,
    Field8$outboundSchema,
    Field9$outboundSchema,
    Field10$outboundSchema,
    Field11$outboundSchema,
    Field12$outboundSchema,
    Field13$outboundSchema,
    Field14$outboundSchema,
    Field15$outboundSchema,
    Field16$outboundSchema,
    Field17$outboundSchema,
    Field18$outboundSchema,
    Field19$outboundSchema,
    Field20$outboundSchema,
    Field21$outboundSchema,
    Field22$outboundSchema,
    Field23$outboundSchema,
    Field24$outboundSchema,
    Field25$outboundSchema,
    Field26$outboundSchema,
    Field27$outboundSchema,
    Field28$outboundSchema,
    Field29$outboundSchema,
    Field30$outboundSchema,
    Field31$outboundSchema,
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeBasedGroupBySelection$ {
  /** @deprecated use `TimeBasedGroupBySelection$inboundSchema` instead. */
  export const inboundSchema = TimeBasedGroupBySelection$inboundSchema;
  /** @deprecated use `TimeBasedGroupBySelection$outboundSchema` instead. */
  export const outboundSchema = TimeBasedGroupBySelection$outboundSchema;
  /** @deprecated use `TimeBasedGroupBySelection$Outbound` instead. */
  export type Outbound = TimeBasedGroupBySelection$Outbound;
}

export function timeBasedGroupBySelectionToJSON(
  timeBasedGroupBySelection: TimeBasedGroupBySelection,
): string {
  return JSON.stringify(
    TimeBasedGroupBySelection$outboundSchema.parse(timeBasedGroupBySelection),
  );
}

export function timeBasedGroupBySelectionFromJSON(
  jsonString: string,
): SafeParseResult<TimeBasedGroupBySelection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TimeBasedGroupBySelection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TimeBasedGroupBySelection' from JSON`,
  );
}
