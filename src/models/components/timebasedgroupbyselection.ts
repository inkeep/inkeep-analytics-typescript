/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const TimeBasedGroupBySelectionType = {
  Time: "time",
} as const;
export type TimeBasedGroupBySelectionType = ClosedEnum<
  typeof TimeBasedGroupBySelectionType
>;

export const TimeBasedGroupBySelectionTimeUnit = {
  Hour: "hour",
  Day: "day",
  Week: "week",
  Month: "month",
} as const;
export type TimeBasedGroupBySelectionTimeUnit = ClosedEnum<
  typeof TimeBasedGroupBySelectionTimeUnit
>;

export const TimeBasedGroupBySelectionField = {
  Id: "id",
  MessageIds: "messageIds",
  MessagesCount: "messagesCount",
  OrganizationId: "organizationId",
  Question: "question",
  QuestionLength: "questionLength",
  Answer: "answer",
  IsOnTopic: "isOnTopic",
  IsClear: "isClear",
  IsDocumented: "isDocumented",
  IsFeatureSupported: "isFeatureSupported",
  IsAnswerConfident: "isAnswerConfident",
  GapSummary: "gapSummary",
  Subject: "subject",
  Category: "category",
  Languages: "languages",
  FirstPartyEntities: "firstPartyEntities",
  ThirdPartyEntities: "thirdPartyEntities",
  Emotion: "emotion",
  Sentiment: "sentiment",
  QuestionType: "questionType",
  ProjectId: "projectId",
  IntegrationId: "integrationId",
  FirstMessageTime: "firstMessageTime",
  LastMessageTime: "lastMessageTime",
  LastUpdated: "lastUpdated",
  HasPositiveFeedback: "hasPositiveFeedback",
  HasNegativeFeedback: "hasNegativeFeedback",
  ConversationIds: "conversationIds",
  AreAIAnnotationsVerified: "areAIAnnotationsVerified",
  IsInitialQuestionAnswer: "isInitialQuestionAnswer",
} as const;
export type TimeBasedGroupBySelectionField = ClosedEnum<
  typeof TimeBasedGroupBySelectionField
>;

export type TimeBasedGroupBySelection = {
  type: TimeBasedGroupBySelectionType;
  timeUnit: TimeBasedGroupBySelectionTimeUnit;
  field: TimeBasedGroupBySelectionField;
};

/** @internal */
export const TimeBasedGroupBySelectionType$inboundSchema: z.ZodNativeEnum<
  typeof TimeBasedGroupBySelectionType
> = z.nativeEnum(TimeBasedGroupBySelectionType);

/** @internal */
export const TimeBasedGroupBySelectionType$outboundSchema: z.ZodNativeEnum<
  typeof TimeBasedGroupBySelectionType
> = TimeBasedGroupBySelectionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeBasedGroupBySelectionType$ {
  /** @deprecated use `TimeBasedGroupBySelectionType$inboundSchema` instead. */
  export const inboundSchema = TimeBasedGroupBySelectionType$inboundSchema;
  /** @deprecated use `TimeBasedGroupBySelectionType$outboundSchema` instead. */
  export const outboundSchema = TimeBasedGroupBySelectionType$outboundSchema;
}

/** @internal */
export const TimeBasedGroupBySelectionTimeUnit$inboundSchema: z.ZodNativeEnum<
  typeof TimeBasedGroupBySelectionTimeUnit
> = z.nativeEnum(TimeBasedGroupBySelectionTimeUnit);

/** @internal */
export const TimeBasedGroupBySelectionTimeUnit$outboundSchema: z.ZodNativeEnum<
  typeof TimeBasedGroupBySelectionTimeUnit
> = TimeBasedGroupBySelectionTimeUnit$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeBasedGroupBySelectionTimeUnit$ {
  /** @deprecated use `TimeBasedGroupBySelectionTimeUnit$inboundSchema` instead. */
  export const inboundSchema = TimeBasedGroupBySelectionTimeUnit$inboundSchema;
  /** @deprecated use `TimeBasedGroupBySelectionTimeUnit$outboundSchema` instead. */
  export const outboundSchema =
    TimeBasedGroupBySelectionTimeUnit$outboundSchema;
}

/** @internal */
export const TimeBasedGroupBySelectionField$inboundSchema: z.ZodNativeEnum<
  typeof TimeBasedGroupBySelectionField
> = z.nativeEnum(TimeBasedGroupBySelectionField);

/** @internal */
export const TimeBasedGroupBySelectionField$outboundSchema: z.ZodNativeEnum<
  typeof TimeBasedGroupBySelectionField
> = TimeBasedGroupBySelectionField$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeBasedGroupBySelectionField$ {
  /** @deprecated use `TimeBasedGroupBySelectionField$inboundSchema` instead. */
  export const inboundSchema = TimeBasedGroupBySelectionField$inboundSchema;
  /** @deprecated use `TimeBasedGroupBySelectionField$outboundSchema` instead. */
  export const outboundSchema = TimeBasedGroupBySelectionField$outboundSchema;
}

/** @internal */
export const TimeBasedGroupBySelection$inboundSchema: z.ZodType<
  TimeBasedGroupBySelection,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: TimeBasedGroupBySelectionType$inboundSchema,
  timeUnit: TimeBasedGroupBySelectionTimeUnit$inboundSchema,
  field: TimeBasedGroupBySelectionField$inboundSchema,
});

/** @internal */
export type TimeBasedGroupBySelection$Outbound = {
  type: string;
  timeUnit: string;
  field: string;
};

/** @internal */
export const TimeBasedGroupBySelection$outboundSchema: z.ZodType<
  TimeBasedGroupBySelection$Outbound,
  z.ZodTypeDef,
  TimeBasedGroupBySelection
> = z.object({
  type: TimeBasedGroupBySelectionType$outboundSchema,
  timeUnit: TimeBasedGroupBySelectionTimeUnit$outboundSchema,
  field: TimeBasedGroupBySelectionField$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeBasedGroupBySelection$ {
  /** @deprecated use `TimeBasedGroupBySelection$inboundSchema` instead. */
  export const inboundSchema = TimeBasedGroupBySelection$inboundSchema;
  /** @deprecated use `TimeBasedGroupBySelection$outboundSchema` instead. */
  export const outboundSchema = TimeBasedGroupBySelection$outboundSchema;
  /** @deprecated use `TimeBasedGroupBySelection$Outbound` instead. */
  export type Outbound = TimeBasedGroupBySelection$Outbound;
}

export function timeBasedGroupBySelectionToJSON(
  timeBasedGroupBySelection: TimeBasedGroupBySelection,
): string {
  return JSON.stringify(
    TimeBasedGroupBySelection$outboundSchema.parse(timeBasedGroupBySelection),
  );
}

export function timeBasedGroupBySelectionFromJSON(
  jsonString: string,
): SafeParseResult<TimeBasedGroupBySelection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TimeBasedGroupBySelection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TimeBasedGroupBySelection' from JSON`,
  );
}
