/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SelectConversationEventProperties = {};

export type SelectConversationEventUserProperties = {};

export const SelectConversationEventEntityType = {
  Conversation: "conversation",
} as const;
export type SelectConversationEventEntityType = ClosedEnum<
  typeof SelectConversationEventEntityType
>;

export type SelectConversationEvent = {
  id: string;
  type: string;
  conversationId: string;
  createdAt: string;
  properties?: SelectConversationEventProperties | null | undefined;
  userProperties?: SelectConversationEventUserProperties | null | undefined;
  entityType: SelectConversationEventEntityType;
};

/** @internal */
export const SelectConversationEventProperties$inboundSchema: z.ZodType<
  SelectConversationEventProperties,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type SelectConversationEventProperties$Outbound = {};

/** @internal */
export const SelectConversationEventProperties$outboundSchema: z.ZodType<
  SelectConversationEventProperties$Outbound,
  z.ZodTypeDef,
  SelectConversationEventProperties
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelectConversationEventProperties$ {
  /** @deprecated use `SelectConversationEventProperties$inboundSchema` instead. */
  export const inboundSchema = SelectConversationEventProperties$inboundSchema;
  /** @deprecated use `SelectConversationEventProperties$outboundSchema` instead. */
  export const outboundSchema =
    SelectConversationEventProperties$outboundSchema;
  /** @deprecated use `SelectConversationEventProperties$Outbound` instead. */
  export type Outbound = SelectConversationEventProperties$Outbound;
}

export function selectConversationEventPropertiesToJSON(
  selectConversationEventProperties: SelectConversationEventProperties,
): string {
  return JSON.stringify(
    SelectConversationEventProperties$outboundSchema.parse(
      selectConversationEventProperties,
    ),
  );
}

export function selectConversationEventPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<SelectConversationEventProperties, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SelectConversationEventProperties$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SelectConversationEventProperties' from JSON`,
  );
}

/** @internal */
export const SelectConversationEventUserProperties$inboundSchema: z.ZodType<
  SelectConversationEventUserProperties,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type SelectConversationEventUserProperties$Outbound = {};

/** @internal */
export const SelectConversationEventUserProperties$outboundSchema: z.ZodType<
  SelectConversationEventUserProperties$Outbound,
  z.ZodTypeDef,
  SelectConversationEventUserProperties
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelectConversationEventUserProperties$ {
  /** @deprecated use `SelectConversationEventUserProperties$inboundSchema` instead. */
  export const inboundSchema =
    SelectConversationEventUserProperties$inboundSchema;
  /** @deprecated use `SelectConversationEventUserProperties$outboundSchema` instead. */
  export const outboundSchema =
    SelectConversationEventUserProperties$outboundSchema;
  /** @deprecated use `SelectConversationEventUserProperties$Outbound` instead. */
  export type Outbound = SelectConversationEventUserProperties$Outbound;
}

export function selectConversationEventUserPropertiesToJSON(
  selectConversationEventUserProperties: SelectConversationEventUserProperties,
): string {
  return JSON.stringify(
    SelectConversationEventUserProperties$outboundSchema.parse(
      selectConversationEventUserProperties,
    ),
  );
}

export function selectConversationEventUserPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<SelectConversationEventUserProperties, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SelectConversationEventUserProperties$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SelectConversationEventUserProperties' from JSON`,
  );
}

/** @internal */
export const SelectConversationEventEntityType$inboundSchema: z.ZodNativeEnum<
  typeof SelectConversationEventEntityType
> = z.nativeEnum(SelectConversationEventEntityType);

/** @internal */
export const SelectConversationEventEntityType$outboundSchema: z.ZodNativeEnum<
  typeof SelectConversationEventEntityType
> = SelectConversationEventEntityType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelectConversationEventEntityType$ {
  /** @deprecated use `SelectConversationEventEntityType$inboundSchema` instead. */
  export const inboundSchema = SelectConversationEventEntityType$inboundSchema;
  /** @deprecated use `SelectConversationEventEntityType$outboundSchema` instead. */
  export const outboundSchema =
    SelectConversationEventEntityType$outboundSchema;
}

/** @internal */
export const SelectConversationEvent$inboundSchema: z.ZodType<
  SelectConversationEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: z.string(),
  conversationId: z.string(),
  createdAt: z.string(),
  properties: z.nullable(
    z.lazy(() => SelectConversationEventProperties$inboundSchema),
  ).optional(),
  userProperties: z.nullable(
    z.lazy(() => SelectConversationEventUserProperties$inboundSchema),
  ).optional(),
  entityType: SelectConversationEventEntityType$inboundSchema,
});

/** @internal */
export type SelectConversationEvent$Outbound = {
  id: string;
  type: string;
  conversationId: string;
  createdAt: string;
  properties?: SelectConversationEventProperties$Outbound | null | undefined;
  userProperties?:
    | SelectConversationEventUserProperties$Outbound
    | null
    | undefined;
  entityType: string;
};

/** @internal */
export const SelectConversationEvent$outboundSchema: z.ZodType<
  SelectConversationEvent$Outbound,
  z.ZodTypeDef,
  SelectConversationEvent
> = z.object({
  id: z.string(),
  type: z.string(),
  conversationId: z.string(),
  createdAt: z.string(),
  properties: z.nullable(
    z.lazy(() => SelectConversationEventProperties$outboundSchema),
  ).optional(),
  userProperties: z.nullable(
    z.lazy(() => SelectConversationEventUserProperties$outboundSchema),
  ).optional(),
  entityType: SelectConversationEventEntityType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelectConversationEvent$ {
  /** @deprecated use `SelectConversationEvent$inboundSchema` instead. */
  export const inboundSchema = SelectConversationEvent$inboundSchema;
  /** @deprecated use `SelectConversationEvent$outboundSchema` instead. */
  export const outboundSchema = SelectConversationEvent$outboundSchema;
  /** @deprecated use `SelectConversationEvent$Outbound` instead. */
  export type Outbound = SelectConversationEvent$Outbound;
}

export function selectConversationEventToJSON(
  selectConversationEvent: SelectConversationEvent,
): string {
  return JSON.stringify(
    SelectConversationEvent$outboundSchema.parse(selectConversationEvent),
  );
}

export function selectConversationEventFromJSON(
  jsonString: string,
): SafeParseResult<SelectConversationEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SelectConversationEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SelectConversationEvent' from JSON`,
  );
}
