/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SupportCopilotMessage,
  SupportCopilotMessage$inboundSchema,
  SupportCopilotMessage$Outbound,
  SupportCopilotMessage$outboundSchema,
} from "./supportcopilotmessage.js";

export const SupportCopilotConversationType = {
  SupportCopilot: "support_copilot",
} as const;
export type SupportCopilotConversationType = ClosedEnum<
  typeof SupportCopilotConversationType
>;

export type SupportCopilotConversationProperties = {};

export type SupportCopilotConversationUserProperties = {};

export const SupportCopilotConversationVisibility = {
  Private: "private",
  Public: "public",
} as const;
export type SupportCopilotConversationVisibility = ClosedEnum<
  typeof SupportCopilotConversationVisibility
>;

export type SupportCopilotConversation = {
  id: string;
  externalId?: string | null | undefined;
  externalUrl?: string | null | undefined;
  type: SupportCopilotConversationType;
  supportTicketConversationId?: string | null | undefined;
  createdAt: string;
  updatedAt: string;
  projectId?: string | null | undefined;
  integrationId?: string | null | undefined;
  properties?: SupportCopilotConversationProperties | null | undefined;
  userProperties?: SupportCopilotConversationUserProperties | null | undefined;
  tags: Array<string>;
  visibility?: SupportCopilotConversationVisibility | null | undefined;
  /**
   * The messages in the conversation. Must be at least one message.
   */
  messages: Array<SupportCopilotMessage>;
};

/** @internal */
export const SupportCopilotConversationType$inboundSchema: z.ZodNativeEnum<
  typeof SupportCopilotConversationType
> = z.nativeEnum(SupportCopilotConversationType);

/** @internal */
export const SupportCopilotConversationType$outboundSchema: z.ZodNativeEnum<
  typeof SupportCopilotConversationType
> = SupportCopilotConversationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportCopilotConversationType$ {
  /** @deprecated use `SupportCopilotConversationType$inboundSchema` instead. */
  export const inboundSchema = SupportCopilotConversationType$inboundSchema;
  /** @deprecated use `SupportCopilotConversationType$outboundSchema` instead. */
  export const outboundSchema = SupportCopilotConversationType$outboundSchema;
}

/** @internal */
export const SupportCopilotConversationProperties$inboundSchema: z.ZodType<
  SupportCopilotConversationProperties,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type SupportCopilotConversationProperties$Outbound = {};

/** @internal */
export const SupportCopilotConversationProperties$outboundSchema: z.ZodType<
  SupportCopilotConversationProperties$Outbound,
  z.ZodTypeDef,
  SupportCopilotConversationProperties
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportCopilotConversationProperties$ {
  /** @deprecated use `SupportCopilotConversationProperties$inboundSchema` instead. */
  export const inboundSchema =
    SupportCopilotConversationProperties$inboundSchema;
  /** @deprecated use `SupportCopilotConversationProperties$outboundSchema` instead. */
  export const outboundSchema =
    SupportCopilotConversationProperties$outboundSchema;
  /** @deprecated use `SupportCopilotConversationProperties$Outbound` instead. */
  export type Outbound = SupportCopilotConversationProperties$Outbound;
}

export function supportCopilotConversationPropertiesToJSON(
  supportCopilotConversationProperties: SupportCopilotConversationProperties,
): string {
  return JSON.stringify(
    SupportCopilotConversationProperties$outboundSchema.parse(
      supportCopilotConversationProperties,
    ),
  );
}

export function supportCopilotConversationPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<SupportCopilotConversationProperties, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SupportCopilotConversationProperties$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SupportCopilotConversationProperties' from JSON`,
  );
}

/** @internal */
export const SupportCopilotConversationUserProperties$inboundSchema: z.ZodType<
  SupportCopilotConversationUserProperties,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type SupportCopilotConversationUserProperties$Outbound = {};

/** @internal */
export const SupportCopilotConversationUserProperties$outboundSchema: z.ZodType<
  SupportCopilotConversationUserProperties$Outbound,
  z.ZodTypeDef,
  SupportCopilotConversationUserProperties
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportCopilotConversationUserProperties$ {
  /** @deprecated use `SupportCopilotConversationUserProperties$inboundSchema` instead. */
  export const inboundSchema =
    SupportCopilotConversationUserProperties$inboundSchema;
  /** @deprecated use `SupportCopilotConversationUserProperties$outboundSchema` instead. */
  export const outboundSchema =
    SupportCopilotConversationUserProperties$outboundSchema;
  /** @deprecated use `SupportCopilotConversationUserProperties$Outbound` instead. */
  export type Outbound = SupportCopilotConversationUserProperties$Outbound;
}

export function supportCopilotConversationUserPropertiesToJSON(
  supportCopilotConversationUserProperties:
    SupportCopilotConversationUserProperties,
): string {
  return JSON.stringify(
    SupportCopilotConversationUserProperties$outboundSchema.parse(
      supportCopilotConversationUserProperties,
    ),
  );
}

export function supportCopilotConversationUserPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<
  SupportCopilotConversationUserProperties,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SupportCopilotConversationUserProperties$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SupportCopilotConversationUserProperties' from JSON`,
  );
}

/** @internal */
export const SupportCopilotConversationVisibility$inboundSchema:
  z.ZodNativeEnum<typeof SupportCopilotConversationVisibility> = z.nativeEnum(
    SupportCopilotConversationVisibility,
  );

/** @internal */
export const SupportCopilotConversationVisibility$outboundSchema:
  z.ZodNativeEnum<typeof SupportCopilotConversationVisibility> =
    SupportCopilotConversationVisibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportCopilotConversationVisibility$ {
  /** @deprecated use `SupportCopilotConversationVisibility$inboundSchema` instead. */
  export const inboundSchema =
    SupportCopilotConversationVisibility$inboundSchema;
  /** @deprecated use `SupportCopilotConversationVisibility$outboundSchema` instead. */
  export const outboundSchema =
    SupportCopilotConversationVisibility$outboundSchema;
}

/** @internal */
export const SupportCopilotConversation$inboundSchema: z.ZodType<
  SupportCopilotConversation,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  externalId: z.nullable(z.string()).optional(),
  externalUrl: z.nullable(z.string()).optional(),
  type: SupportCopilotConversationType$inboundSchema,
  supportTicketConversationId: z.nullable(z.string()).optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
  projectId: z.nullable(z.string()).optional(),
  integrationId: z.nullable(z.string()).optional(),
  properties: z.nullable(
    z.lazy(() => SupportCopilotConversationProperties$inboundSchema),
  ).optional(),
  userProperties: z.nullable(
    z.lazy(() => SupportCopilotConversationUserProperties$inboundSchema),
  ).optional(),
  tags: z.array(z.string()),
  visibility: z.nullable(SupportCopilotConversationVisibility$inboundSchema)
    .optional(),
  messages: z.array(SupportCopilotMessage$inboundSchema),
});

/** @internal */
export type SupportCopilotConversation$Outbound = {
  id: string;
  externalId?: string | null | undefined;
  externalUrl?: string | null | undefined;
  type: string;
  supportTicketConversationId?: string | null | undefined;
  createdAt: string;
  updatedAt: string;
  projectId?: string | null | undefined;
  integrationId?: string | null | undefined;
  properties?: SupportCopilotConversationProperties$Outbound | null | undefined;
  userProperties?:
    | SupportCopilotConversationUserProperties$Outbound
    | null
    | undefined;
  tags: Array<string>;
  visibility?: string | null | undefined;
  messages: Array<SupportCopilotMessage$Outbound>;
};

/** @internal */
export const SupportCopilotConversation$outboundSchema: z.ZodType<
  SupportCopilotConversation$Outbound,
  z.ZodTypeDef,
  SupportCopilotConversation
> = z.object({
  id: z.string(),
  externalId: z.nullable(z.string()).optional(),
  externalUrl: z.nullable(z.string()).optional(),
  type: SupportCopilotConversationType$outboundSchema,
  supportTicketConversationId: z.nullable(z.string()).optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
  projectId: z.nullable(z.string()).optional(),
  integrationId: z.nullable(z.string()).optional(),
  properties: z.nullable(
    z.lazy(() => SupportCopilotConversationProperties$outboundSchema),
  ).optional(),
  userProperties: z.nullable(
    z.lazy(() => SupportCopilotConversationUserProperties$outboundSchema),
  ).optional(),
  tags: z.array(z.string()),
  visibility: z.nullable(SupportCopilotConversationVisibility$outboundSchema)
    .optional(),
  messages: z.array(SupportCopilotMessage$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportCopilotConversation$ {
  /** @deprecated use `SupportCopilotConversation$inboundSchema` instead. */
  export const inboundSchema = SupportCopilotConversation$inboundSchema;
  /** @deprecated use `SupportCopilotConversation$outboundSchema` instead. */
  export const outboundSchema = SupportCopilotConversation$outboundSchema;
  /** @deprecated use `SupportCopilotConversation$Outbound` instead. */
  export type Outbound = SupportCopilotConversation$Outbound;
}

export function supportCopilotConversationToJSON(
  supportCopilotConversation: SupportCopilotConversation,
): string {
  return JSON.stringify(
    SupportCopilotConversation$outboundSchema.parse(supportCopilotConversation),
  );
}

export function supportCopilotConversationFromJSON(
  jsonString: string,
): SafeParseResult<SupportCopilotConversation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SupportCopilotConversation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SupportCopilotConversation' from JSON`,
  );
}
