/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const OrderBySchemaField = {
  Id: "id",
  MessageIds: "messageIds",
  MessagesCount: "messagesCount",
  OrganizationId: "organizationId",
  Question: "question",
  QuestionLength: "questionLength",
  Answer: "answer",
  IsOnTopic: "isOnTopic",
  IsClear: "isClear",
  IsDocumented: "isDocumented",
  IsFeatureSupported: "isFeatureSupported",
  IsAnswerConfident: "isAnswerConfident",
  GapSummary: "gapSummary",
  Subject: "subject",
  Category: "category",
  Languages: "languages",
  FirstPartyEntities: "firstPartyEntities",
  ThirdPartyEntities: "thirdPartyEntities",
  Emotion: "emotion",
  Sentiment: "sentiment",
  QuestionType: "questionType",
  ProjectId: "projectId",
  IntegrationId: "integrationId",
  FirstMessageTime: "firstMessageTime",
  LastMessageTime: "lastMessageTime",
  LastUpdated: "lastUpdated",
  HasPositiveFeedback: "hasPositiveFeedback",
  HasNegativeFeedback: "hasNegativeFeedback",
  ConversationIds: "conversationIds",
  AreAIAnnotationsVerified: "areAIAnnotationsVerified",
  IsInitialQuestionAnswer: "isInitialQuestionAnswer",
  IdHour: "id_hour",
  IdDay: "id_day",
  IdWeek: "id_week",
  IdMonth: "id_month",
  MessageIdsHour: "messageIds_hour",
  MessageIdsDay: "messageIds_day",
  MessageIdsWeek: "messageIds_week",
  MessageIdsMonth: "messageIds_month",
  MessagesCountHour: "messagesCount_hour",
  MessagesCountDay: "messagesCount_day",
  MessagesCountWeek: "messagesCount_week",
  MessagesCountMonth: "messagesCount_month",
  OrganizationIdHour: "organizationId_hour",
  OrganizationIdDay: "organizationId_day",
  OrganizationIdWeek: "organizationId_week",
  OrganizationIdMonth: "organizationId_month",
  QuestionHour: "question_hour",
  QuestionDay: "question_day",
  QuestionWeek: "question_week",
  QuestionMonth: "question_month",
  QuestionLengthHour: "questionLength_hour",
  QuestionLengthDay: "questionLength_day",
  QuestionLengthWeek: "questionLength_week",
  QuestionLengthMonth: "questionLength_month",
  AnswerHour: "answer_hour",
  AnswerDay: "answer_day",
  AnswerWeek: "answer_week",
  AnswerMonth: "answer_month",
  IsOnTopicHour: "isOnTopic_hour",
  IsOnTopicDay: "isOnTopic_day",
  IsOnTopicWeek: "isOnTopic_week",
  IsOnTopicMonth: "isOnTopic_month",
  IsClearHour: "isClear_hour",
  IsClearDay: "isClear_day",
  IsClearWeek: "isClear_week",
  IsClearMonth: "isClear_month",
  IsDocumentedHour: "isDocumented_hour",
  IsDocumentedDay: "isDocumented_day",
  IsDocumentedWeek: "isDocumented_week",
  IsDocumentedMonth: "isDocumented_month",
  IsFeatureSupportedHour: "isFeatureSupported_hour",
  IsFeatureSupportedDay: "isFeatureSupported_day",
  IsFeatureSupportedWeek: "isFeatureSupported_week",
  IsFeatureSupportedMonth: "isFeatureSupported_month",
  IsAnswerConfidentHour: "isAnswerConfident_hour",
  IsAnswerConfidentDay: "isAnswerConfident_day",
  IsAnswerConfidentWeek: "isAnswerConfident_week",
  IsAnswerConfidentMonth: "isAnswerConfident_month",
  GapSummaryHour: "gapSummary_hour",
  GapSummaryDay: "gapSummary_day",
  GapSummaryWeek: "gapSummary_week",
  GapSummaryMonth: "gapSummary_month",
  SubjectHour: "subject_hour",
  SubjectDay: "subject_day",
  SubjectWeek: "subject_week",
  SubjectMonth: "subject_month",
  CategoryHour: "category_hour",
  CategoryDay: "category_day",
  CategoryWeek: "category_week",
  CategoryMonth: "category_month",
  LanguagesHour: "languages_hour",
  LanguagesDay: "languages_day",
  LanguagesWeek: "languages_week",
  LanguagesMonth: "languages_month",
  FirstPartyEntitiesHour: "firstPartyEntities_hour",
  FirstPartyEntitiesDay: "firstPartyEntities_day",
  FirstPartyEntitiesWeek: "firstPartyEntities_week",
  FirstPartyEntitiesMonth: "firstPartyEntities_month",
  ThirdPartyEntitiesHour: "thirdPartyEntities_hour",
  ThirdPartyEntitiesDay: "thirdPartyEntities_day",
  ThirdPartyEntitiesWeek: "thirdPartyEntities_week",
  ThirdPartyEntitiesMonth: "thirdPartyEntities_month",
  EmotionHour: "emotion_hour",
  EmotionDay: "emotion_day",
  EmotionWeek: "emotion_week",
  EmotionMonth: "emotion_month",
  SentimentHour: "sentiment_hour",
  SentimentDay: "sentiment_day",
  SentimentWeek: "sentiment_week",
  SentimentMonth: "sentiment_month",
  QuestionTypeHour: "questionType_hour",
  QuestionTypeDay: "questionType_day",
  QuestionTypeWeek: "questionType_week",
  QuestionTypeMonth: "questionType_month",
  ProjectIdHour: "projectId_hour",
  ProjectIdDay: "projectId_day",
  ProjectIdWeek: "projectId_week",
  ProjectIdMonth: "projectId_month",
  IntegrationIdHour: "integrationId_hour",
  IntegrationIdDay: "integrationId_day",
  IntegrationIdWeek: "integrationId_week",
  IntegrationIdMonth: "integrationId_month",
  FirstMessageTimeHour: "firstMessageTime_hour",
  FirstMessageTimeDay: "firstMessageTime_day",
  FirstMessageTimeWeek: "firstMessageTime_week",
  FirstMessageTimeMonth: "firstMessageTime_month",
  LastMessageTimeHour: "lastMessageTime_hour",
  LastMessageTimeDay: "lastMessageTime_day",
  LastMessageTimeWeek: "lastMessageTime_week",
  LastMessageTimeMonth: "lastMessageTime_month",
  LastUpdatedHour: "lastUpdated_hour",
  LastUpdatedDay: "lastUpdated_day",
  LastUpdatedWeek: "lastUpdated_week",
  LastUpdatedMonth: "lastUpdated_month",
  HasPositiveFeedbackHour: "hasPositiveFeedback_hour",
  HasPositiveFeedbackDay: "hasPositiveFeedback_day",
  HasPositiveFeedbackWeek: "hasPositiveFeedback_week",
  HasPositiveFeedbackMonth: "hasPositiveFeedback_month",
  HasNegativeFeedbackHour: "hasNegativeFeedback_hour",
  HasNegativeFeedbackDay: "hasNegativeFeedback_day",
  HasNegativeFeedbackWeek: "hasNegativeFeedback_week",
  HasNegativeFeedbackMonth: "hasNegativeFeedback_month",
  ConversationIdsHour: "conversationIds_hour",
  ConversationIdsDay: "conversationIds_day",
  ConversationIdsWeek: "conversationIds_week",
  ConversationIdsMonth: "conversationIds_month",
  AreAIAnnotationsVerifiedHour: "areAIAnnotationsVerified_hour",
  AreAIAnnotationsVerifiedDay: "areAIAnnotationsVerified_day",
  AreAIAnnotationsVerifiedWeek: "areAIAnnotationsVerified_week",
  AreAIAnnotationsVerifiedMonth: "areAIAnnotationsVerified_month",
  IsInitialQuestionAnswerHour: "isInitialQuestionAnswer_hour",
  IsInitialQuestionAnswerDay: "isInitialQuestionAnswer_day",
  IsInitialQuestionAnswerWeek: "isInitialQuestionAnswer_week",
  IsInitialQuestionAnswerMonth: "isInitialQuestionAnswer_month",
  SumId: "sum_id",
  CountId: "count_id",
  AvgId: "avg_id",
  MinId: "min_id",
  MaxId: "max_id",
  SumMessageIds: "sum_messageIds",
  CountMessageIds: "count_messageIds",
  AvgMessageIds: "avg_messageIds",
  MinMessageIds: "min_messageIds",
  MaxMessageIds: "max_messageIds",
  SumMessagesCount: "sum_messagesCount",
  CountMessagesCount: "count_messagesCount",
  AvgMessagesCount: "avg_messagesCount",
  MinMessagesCount: "min_messagesCount",
  MaxMessagesCount: "max_messagesCount",
  SumOrganizationId: "sum_organizationId",
  CountOrganizationId: "count_organizationId",
  AvgOrganizationId: "avg_organizationId",
  MinOrganizationId: "min_organizationId",
  MaxOrganizationId: "max_organizationId",
  SumQuestion: "sum_question",
  CountQuestion: "count_question",
  AvgQuestion: "avg_question",
  MinQuestion: "min_question",
  MaxQuestion: "max_question",
  SumQuestionLength: "sum_questionLength",
  CountQuestionLength: "count_questionLength",
  AvgQuestionLength: "avg_questionLength",
  MinQuestionLength: "min_questionLength",
  MaxQuestionLength: "max_questionLength",
  SumAnswer: "sum_answer",
  CountAnswer: "count_answer",
  AvgAnswer: "avg_answer",
  MinAnswer: "min_answer",
  MaxAnswer: "max_answer",
  SumIsOnTopic: "sum_isOnTopic",
  CountIsOnTopic: "count_isOnTopic",
  AvgIsOnTopic: "avg_isOnTopic",
  MinIsOnTopic: "min_isOnTopic",
  MaxIsOnTopic: "max_isOnTopic",
  SumIsClear: "sum_isClear",
  CountIsClear: "count_isClear",
  AvgIsClear: "avg_isClear",
  MinIsClear: "min_isClear",
  MaxIsClear: "max_isClear",
  SumIsDocumented: "sum_isDocumented",
  CountIsDocumented: "count_isDocumented",
  AvgIsDocumented: "avg_isDocumented",
  MinIsDocumented: "min_isDocumented",
  MaxIsDocumented: "max_isDocumented",
  SumIsFeatureSupported: "sum_isFeatureSupported",
  CountIsFeatureSupported: "count_isFeatureSupported",
  AvgIsFeatureSupported: "avg_isFeatureSupported",
  MinIsFeatureSupported: "min_isFeatureSupported",
  MaxIsFeatureSupported: "max_isFeatureSupported",
  SumIsAnswerConfident: "sum_isAnswerConfident",
  CountIsAnswerConfident: "count_isAnswerConfident",
  AvgIsAnswerConfident: "avg_isAnswerConfident",
  MinIsAnswerConfident: "min_isAnswerConfident",
  MaxIsAnswerConfident: "max_isAnswerConfident",
  SumGapSummary: "sum_gapSummary",
  CountGapSummary: "count_gapSummary",
  AvgGapSummary: "avg_gapSummary",
  MinGapSummary: "min_gapSummary",
  MaxGapSummary: "max_gapSummary",
  SumSubject: "sum_subject",
  CountSubject: "count_subject",
  AvgSubject: "avg_subject",
  MinSubject: "min_subject",
  MaxSubject: "max_subject",
  SumCategory: "sum_category",
  CountCategory: "count_category",
  AvgCategory: "avg_category",
  MinCategory: "min_category",
  MaxCategory: "max_category",
  SumLanguages: "sum_languages",
  CountLanguages: "count_languages",
  AvgLanguages: "avg_languages",
  MinLanguages: "min_languages",
  MaxLanguages: "max_languages",
  SumFirstPartyEntities: "sum_firstPartyEntities",
  CountFirstPartyEntities: "count_firstPartyEntities",
  AvgFirstPartyEntities: "avg_firstPartyEntities",
  MinFirstPartyEntities: "min_firstPartyEntities",
  MaxFirstPartyEntities: "max_firstPartyEntities",
  SumThirdPartyEntities: "sum_thirdPartyEntities",
  CountThirdPartyEntities: "count_thirdPartyEntities",
  AvgThirdPartyEntities: "avg_thirdPartyEntities",
  MinThirdPartyEntities: "min_thirdPartyEntities",
  MaxThirdPartyEntities: "max_thirdPartyEntities",
  SumEmotion: "sum_emotion",
  CountEmotion: "count_emotion",
  AvgEmotion: "avg_emotion",
  MinEmotion: "min_emotion",
  MaxEmotion: "max_emotion",
  SumSentiment: "sum_sentiment",
  CountSentiment: "count_sentiment",
  AvgSentiment: "avg_sentiment",
  MinSentiment: "min_sentiment",
  MaxSentiment: "max_sentiment",
  SumQuestionType: "sum_questionType",
  CountQuestionType: "count_questionType",
  AvgQuestionType: "avg_questionType",
  MinQuestionType: "min_questionType",
  MaxQuestionType: "max_questionType",
  SumProjectId: "sum_projectId",
  CountProjectId: "count_projectId",
  AvgProjectId: "avg_projectId",
  MinProjectId: "min_projectId",
  MaxProjectId: "max_projectId",
  SumIntegrationId: "sum_integrationId",
  CountIntegrationId: "count_integrationId",
  AvgIntegrationId: "avg_integrationId",
  MinIntegrationId: "min_integrationId",
  MaxIntegrationId: "max_integrationId",
  SumFirstMessageTime: "sum_firstMessageTime",
  CountFirstMessageTime: "count_firstMessageTime",
  AvgFirstMessageTime: "avg_firstMessageTime",
  MinFirstMessageTime: "min_firstMessageTime",
  MaxFirstMessageTime: "max_firstMessageTime",
  SumLastMessageTime: "sum_lastMessageTime",
  CountLastMessageTime: "count_lastMessageTime",
  AvgLastMessageTime: "avg_lastMessageTime",
  MinLastMessageTime: "min_lastMessageTime",
  MaxLastMessageTime: "max_lastMessageTime",
  SumLastUpdated: "sum_lastUpdated",
  CountLastUpdated: "count_lastUpdated",
  AvgLastUpdated: "avg_lastUpdated",
  MinLastUpdated: "min_lastUpdated",
  MaxLastUpdated: "max_lastUpdated",
  SumHasPositiveFeedback: "sum_hasPositiveFeedback",
  CountHasPositiveFeedback: "count_hasPositiveFeedback",
  AvgHasPositiveFeedback: "avg_hasPositiveFeedback",
  MinHasPositiveFeedback: "min_hasPositiveFeedback",
  MaxHasPositiveFeedback: "max_hasPositiveFeedback",
  SumHasNegativeFeedback: "sum_hasNegativeFeedback",
  CountHasNegativeFeedback: "count_hasNegativeFeedback",
  AvgHasNegativeFeedback: "avg_hasNegativeFeedback",
  MinHasNegativeFeedback: "min_hasNegativeFeedback",
  MaxHasNegativeFeedback: "max_hasNegativeFeedback",
  SumConversationIds: "sum_conversationIds",
  CountConversationIds: "count_conversationIds",
  AvgConversationIds: "avg_conversationIds",
  MinConversationIds: "min_conversationIds",
  MaxConversationIds: "max_conversationIds",
  SumAreAIAnnotationsVerified: "sum_areAIAnnotationsVerified",
  CountAreAIAnnotationsVerified: "count_areAIAnnotationsVerified",
  AvgAreAIAnnotationsVerified: "avg_areAIAnnotationsVerified",
  MinAreAIAnnotationsVerified: "min_areAIAnnotationsVerified",
  MaxAreAIAnnotationsVerified: "max_areAIAnnotationsVerified",
  SumIsInitialQuestionAnswer: "sum_isInitialQuestionAnswer",
  CountIsInitialQuestionAnswer: "count_isInitialQuestionAnswer",
  AvgIsInitialQuestionAnswer: "avg_isInitialQuestionAnswer",
  MinIsInitialQuestionAnswer: "min_isInitialQuestionAnswer",
  MaxIsInitialQuestionAnswer: "max_isInitialQuestionAnswer",
} as const;
export type OrderBySchemaField = ClosedEnum<typeof OrderBySchemaField>;

export const Direction = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type Direction = ClosedEnum<typeof Direction>;

export type OrderBySchema = {
  field: OrderBySchemaField;
  direction: Direction;
};

/** @internal */
export const OrderBySchemaField$inboundSchema: z.ZodNativeEnum<
  typeof OrderBySchemaField
> = z.nativeEnum(OrderBySchemaField);

/** @internal */
export const OrderBySchemaField$outboundSchema: z.ZodNativeEnum<
  typeof OrderBySchemaField
> = OrderBySchemaField$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderBySchemaField$ {
  /** @deprecated use `OrderBySchemaField$inboundSchema` instead. */
  export const inboundSchema = OrderBySchemaField$inboundSchema;
  /** @deprecated use `OrderBySchemaField$outboundSchema` instead. */
  export const outboundSchema = OrderBySchemaField$outboundSchema;
}

/** @internal */
export const Direction$inboundSchema: z.ZodNativeEnum<typeof Direction> = z
  .nativeEnum(Direction);

/** @internal */
export const Direction$outboundSchema: z.ZodNativeEnum<typeof Direction> =
  Direction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Direction$ {
  /** @deprecated use `Direction$inboundSchema` instead. */
  export const inboundSchema = Direction$inboundSchema;
  /** @deprecated use `Direction$outboundSchema` instead. */
  export const outboundSchema = Direction$outboundSchema;
}

/** @internal */
export const OrderBySchema$inboundSchema: z.ZodType<
  OrderBySchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: OrderBySchemaField$inboundSchema,
  direction: Direction$inboundSchema,
});

/** @internal */
export type OrderBySchema$Outbound = {
  field: string;
  direction: string;
};

/** @internal */
export const OrderBySchema$outboundSchema: z.ZodType<
  OrderBySchema$Outbound,
  z.ZodTypeDef,
  OrderBySchema
> = z.object({
  field: OrderBySchemaField$outboundSchema,
  direction: Direction$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderBySchema$ {
  /** @deprecated use `OrderBySchema$inboundSchema` instead. */
  export const inboundSchema = OrderBySchema$inboundSchema;
  /** @deprecated use `OrderBySchema$outboundSchema` instead. */
  export const outboundSchema = OrderBySchema$outboundSchema;
  /** @deprecated use `OrderBySchema$Outbound` instead. */
  export type Outbound = OrderBySchema$Outbound;
}

export function orderBySchemaToJSON(orderBySchema: OrderBySchema): string {
  return JSON.stringify(OrderBySchema$outboundSchema.parse(orderBySchema));
}

export function orderBySchemaFromJSON(
  jsonString: string,
): SafeParseResult<OrderBySchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrderBySchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrderBySchema' from JSON`,
  );
}
