/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The value to compare the field against
 */
export type ConversationsFilterConditionValue =
  | string
  | boolean
  | number
  | Array<string>;

/** @internal */
export const ConversationsFilterConditionValue$inboundSchema: z.ZodType<
  ConversationsFilterConditionValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.boolean(), z.number(), z.array(z.string())]);

/** @internal */
export type ConversationsFilterConditionValue$Outbound =
  | string
  | boolean
  | number
  | Array<string>;

/** @internal */
export const ConversationsFilterConditionValue$outboundSchema: z.ZodType<
  ConversationsFilterConditionValue$Outbound,
  z.ZodTypeDef,
  ConversationsFilterConditionValue
> = z.union([z.string(), z.boolean(), z.number(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsFilterConditionValue$ {
  /** @deprecated use `ConversationsFilterConditionValue$inboundSchema` instead. */
  export const inboundSchema = ConversationsFilterConditionValue$inboundSchema;
  /** @deprecated use `ConversationsFilterConditionValue$outboundSchema` instead. */
  export const outboundSchema =
    ConversationsFilterConditionValue$outboundSchema;
  /** @deprecated use `ConversationsFilterConditionValue$Outbound` instead. */
  export type Outbound = ConversationsFilterConditionValue$Outbound;
}

export function conversationsFilterConditionValueToJSON(
  conversationsFilterConditionValue: ConversationsFilterConditionValue,
): string {
  return JSON.stringify(
    ConversationsFilterConditionValue$outboundSchema.parse(
      conversationsFilterConditionValue,
    ),
  );
}

export function conversationsFilterConditionValueFromJSON(
  jsonString: string,
): SafeParseResult<ConversationsFilterConditionValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConversationsFilterConditionValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConversationsFilterConditionValue' from JSON`,
  );
}
