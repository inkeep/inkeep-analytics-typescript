/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Which JSON field to query keys from
 */
export const PropertyKeysRequestBodyField = {
  Properties: "properties",
  UserProperties: "userProperties",
} as const;
/**
 * Which JSON field to query keys from
 */
export type PropertyKeysRequestBodyField = ClosedEnum<
  typeof PropertyKeysRequestBodyField
>;

export const Views = {
  EventsView: "events_view",
} as const;
export type Views = ClosedEnum<typeof Views>;

/**
 * Query Property Keys Params
 */
export type PropertyKeysRequestBody = {
  /**
   * Which JSON field to query keys from
   */
  field: PropertyKeysRequestBodyField;
  /**
   * Optional search term to filter keys
   */
  search?: string | undefined;
  /**
   * Optional list of views to query (defaults to all views)
   */
  views?: Array<Views> | undefined;
};

/** @internal */
export const PropertyKeysRequestBodyField$inboundSchema: z.ZodNativeEnum<
  typeof PropertyKeysRequestBodyField
> = z.nativeEnum(PropertyKeysRequestBodyField);

/** @internal */
export const PropertyKeysRequestBodyField$outboundSchema: z.ZodNativeEnum<
  typeof PropertyKeysRequestBodyField
> = PropertyKeysRequestBodyField$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PropertyKeysRequestBodyField$ {
  /** @deprecated use `PropertyKeysRequestBodyField$inboundSchema` instead. */
  export const inboundSchema = PropertyKeysRequestBodyField$inboundSchema;
  /** @deprecated use `PropertyKeysRequestBodyField$outboundSchema` instead. */
  export const outboundSchema = PropertyKeysRequestBodyField$outboundSchema;
}

/** @internal */
export const Views$inboundSchema: z.ZodNativeEnum<typeof Views> = z.nativeEnum(
  Views,
);

/** @internal */
export const Views$outboundSchema: z.ZodNativeEnum<typeof Views> =
  Views$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Views$ {
  /** @deprecated use `Views$inboundSchema` instead. */
  export const inboundSchema = Views$inboundSchema;
  /** @deprecated use `Views$outboundSchema` instead. */
  export const outboundSchema = Views$outboundSchema;
}

/** @internal */
export const PropertyKeysRequestBody$inboundSchema: z.ZodType<
  PropertyKeysRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: PropertyKeysRequestBodyField$inboundSchema,
  search: z.string().optional(),
  views: z.array(Views$inboundSchema).optional(),
});

/** @internal */
export type PropertyKeysRequestBody$Outbound = {
  field: string;
  search?: string | undefined;
  views?: Array<string> | undefined;
};

/** @internal */
export const PropertyKeysRequestBody$outboundSchema: z.ZodType<
  PropertyKeysRequestBody$Outbound,
  z.ZodTypeDef,
  PropertyKeysRequestBody
> = z.object({
  field: PropertyKeysRequestBodyField$outboundSchema,
  search: z.string().optional(),
  views: z.array(Views$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PropertyKeysRequestBody$ {
  /** @deprecated use `PropertyKeysRequestBody$inboundSchema` instead. */
  export const inboundSchema = PropertyKeysRequestBody$inboundSchema;
  /** @deprecated use `PropertyKeysRequestBody$outboundSchema` instead. */
  export const outboundSchema = PropertyKeysRequestBody$outboundSchema;
  /** @deprecated use `PropertyKeysRequestBody$Outbound` instead. */
  export type Outbound = PropertyKeysRequestBody$Outbound;
}

export function propertyKeysRequestBodyToJSON(
  propertyKeysRequestBody: PropertyKeysRequestBody,
): string {
  return JSON.stringify(
    PropertyKeysRequestBody$outboundSchema.parse(propertyKeysRequestBody),
  );
}

export function propertyKeysRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PropertyKeysRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PropertyKeysRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PropertyKeysRequestBody' from JSON`,
  );
}
