/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  OpenAIContentItem,
  OpenAIContentItem$inboundSchema,
  OpenAIContentItem$Outbound,
  OpenAIContentItem$outboundSchema,
} from "./openaicontentitem.js";
import {
  OpenAIToolCall,
  OpenAIToolCall$inboundSchema,
  OpenAIToolCall$Outbound,
  OpenAIToolCall$outboundSchema,
} from "./openaitoolcall.js";

export const OpenAIExtendedMessageType = {
  Openai: "openai",
} as const;
export type OpenAIExtendedMessageType = ClosedEnum<
  typeof OpenAIExtendedMessageType
>;

export const Role = {
  System: "system",
  User: "user",
  Assistant: "assistant",
} as const;
export type Role = ClosedEnum<typeof Role>;

export type Content = string | Array<OpenAIContentItem>;

export const OpenAIExtendedMessageType1 = {
  Documentation: "documentation",
  Site: "site",
  DiscoursePost: "discourse_post",
  GithubIssue: "github_issue",
  GithubDiscussion: "github_discussion",
  StackoverflowQuestion: "stackoverflow_question",
  DiscordForumPost: "discord_forum_post",
  DiscordMessage: "discord_message",
  CustomQuestionAnswer: "custom_question_answer",
} as const;
export type OpenAIExtendedMessageType1 = ClosedEnum<
  typeof OpenAIExtendedMessageType1
>;

export type OpenAIExtendedMessageLinksType =
  | OpenAIExtendedMessageType1
  | string;

export type Links = {
  label?: string | null | undefined;
  url: string;
  title?: string | null | undefined;
  description?: string | null | undefined;
  type?: OpenAIExtendedMessageType1 | string | null | undefined;
  breadcrumbs?: Array<string> | null | undefined;
};

export type OpenAIExtendedMessageProperties = {};

export type OpenAIExtendedMessageUserProperties = {};

/**
 * A message that includes the OpenAI chat completion details.
 */
export type OpenAIExtendedMessage = {
  id: string;
  type: OpenAIExtendedMessageType;
  externalId?: string | null | undefined;
  externalUrl?: string | null | undefined;
  conversationId: string;
  createdAt: string;
  updatedAt: string;
  role: Role;
  content: string | Array<OpenAIContentItem>;
  name?: string | null | undefined;
  links?: Array<Links> | null | undefined;
  properties?: OpenAIExtendedMessageProperties | null | undefined;
  userProperties?: OpenAIExtendedMessageUserProperties | null | undefined;
  toolCalls?: Array<OpenAIToolCall> | null | undefined;
};

/** @internal */
export const OpenAIExtendedMessageType$inboundSchema: z.ZodNativeEnum<
  typeof OpenAIExtendedMessageType
> = z.nativeEnum(OpenAIExtendedMessageType);

/** @internal */
export const OpenAIExtendedMessageType$outboundSchema: z.ZodNativeEnum<
  typeof OpenAIExtendedMessageType
> = OpenAIExtendedMessageType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAIExtendedMessageType$ {
  /** @deprecated use `OpenAIExtendedMessageType$inboundSchema` instead. */
  export const inboundSchema = OpenAIExtendedMessageType$inboundSchema;
  /** @deprecated use `OpenAIExtendedMessageType$outboundSchema` instead. */
  export const outboundSchema = OpenAIExtendedMessageType$outboundSchema;
}

/** @internal */
export const Role$inboundSchema: z.ZodNativeEnum<typeof Role> = z.nativeEnum(
  Role,
);

/** @internal */
export const Role$outboundSchema: z.ZodNativeEnum<typeof Role> =
  Role$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Role$ {
  /** @deprecated use `Role$inboundSchema` instead. */
  export const inboundSchema = Role$inboundSchema;
  /** @deprecated use `Role$outboundSchema` instead. */
  export const outboundSchema = Role$outboundSchema;
}

/** @internal */
export const Content$inboundSchema: z.ZodType<Content, z.ZodTypeDef, unknown> =
  z.union([z.string(), z.array(OpenAIContentItem$inboundSchema)]);

/** @internal */
export type Content$Outbound = string | Array<OpenAIContentItem$Outbound>;

/** @internal */
export const Content$outboundSchema: z.ZodType<
  Content$Outbound,
  z.ZodTypeDef,
  Content
> = z.union([z.string(), z.array(OpenAIContentItem$outboundSchema)]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Content$ {
  /** @deprecated use `Content$inboundSchema` instead. */
  export const inboundSchema = Content$inboundSchema;
  /** @deprecated use `Content$outboundSchema` instead. */
  export const outboundSchema = Content$outboundSchema;
  /** @deprecated use `Content$Outbound` instead. */
  export type Outbound = Content$Outbound;
}

export function contentToJSON(content: Content): string {
  return JSON.stringify(Content$outboundSchema.parse(content));
}

export function contentFromJSON(
  jsonString: string,
): SafeParseResult<Content, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Content$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Content' from JSON`,
  );
}

/** @internal */
export const OpenAIExtendedMessageType1$inboundSchema: z.ZodNativeEnum<
  typeof OpenAIExtendedMessageType1
> = z.nativeEnum(OpenAIExtendedMessageType1);

/** @internal */
export const OpenAIExtendedMessageType1$outboundSchema: z.ZodNativeEnum<
  typeof OpenAIExtendedMessageType1
> = OpenAIExtendedMessageType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAIExtendedMessageType1$ {
  /** @deprecated use `OpenAIExtendedMessageType1$inboundSchema` instead. */
  export const inboundSchema = OpenAIExtendedMessageType1$inboundSchema;
  /** @deprecated use `OpenAIExtendedMessageType1$outboundSchema` instead. */
  export const outboundSchema = OpenAIExtendedMessageType1$outboundSchema;
}

/** @internal */
export const OpenAIExtendedMessageLinksType$inboundSchema: z.ZodType<
  OpenAIExtendedMessageLinksType,
  z.ZodTypeDef,
  unknown
> = z.union([OpenAIExtendedMessageType1$inboundSchema, z.string()]);

/** @internal */
export type OpenAIExtendedMessageLinksType$Outbound = string | string;

/** @internal */
export const OpenAIExtendedMessageLinksType$outboundSchema: z.ZodType<
  OpenAIExtendedMessageLinksType$Outbound,
  z.ZodTypeDef,
  OpenAIExtendedMessageLinksType
> = z.union([OpenAIExtendedMessageType1$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAIExtendedMessageLinksType$ {
  /** @deprecated use `OpenAIExtendedMessageLinksType$inboundSchema` instead. */
  export const inboundSchema = OpenAIExtendedMessageLinksType$inboundSchema;
  /** @deprecated use `OpenAIExtendedMessageLinksType$outboundSchema` instead. */
  export const outboundSchema = OpenAIExtendedMessageLinksType$outboundSchema;
  /** @deprecated use `OpenAIExtendedMessageLinksType$Outbound` instead. */
  export type Outbound = OpenAIExtendedMessageLinksType$Outbound;
}

export function openAIExtendedMessageLinksTypeToJSON(
  openAIExtendedMessageLinksType: OpenAIExtendedMessageLinksType,
): string {
  return JSON.stringify(
    OpenAIExtendedMessageLinksType$outboundSchema.parse(
      openAIExtendedMessageLinksType,
    ),
  );
}

export function openAIExtendedMessageLinksTypeFromJSON(
  jsonString: string,
): SafeParseResult<OpenAIExtendedMessageLinksType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenAIExtendedMessageLinksType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenAIExtendedMessageLinksType' from JSON`,
  );
}

/** @internal */
export const Links$inboundSchema: z.ZodType<Links, z.ZodTypeDef, unknown> = z
  .object({
    label: z.nullable(z.string()).optional(),
    url: z.string(),
    title: z.nullable(z.string()).optional(),
    description: z.nullable(z.string()).optional(),
    type: z.nullable(
      z.union([OpenAIExtendedMessageType1$inboundSchema, z.string()]),
    ).optional(),
    breadcrumbs: z.nullable(z.array(z.string())).optional(),
  });

/** @internal */
export type Links$Outbound = {
  label?: string | null | undefined;
  url: string;
  title?: string | null | undefined;
  description?: string | null | undefined;
  type?: string | string | null | undefined;
  breadcrumbs?: Array<string> | null | undefined;
};

/** @internal */
export const Links$outboundSchema: z.ZodType<
  Links$Outbound,
  z.ZodTypeDef,
  Links
> = z.object({
  label: z.nullable(z.string()).optional(),
  url: z.string(),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  type: z.nullable(
    z.union([OpenAIExtendedMessageType1$outboundSchema, z.string()]),
  ).optional(),
  breadcrumbs: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Links$ {
  /** @deprecated use `Links$inboundSchema` instead. */
  export const inboundSchema = Links$inboundSchema;
  /** @deprecated use `Links$outboundSchema` instead. */
  export const outboundSchema = Links$outboundSchema;
  /** @deprecated use `Links$Outbound` instead. */
  export type Outbound = Links$Outbound;
}

export function linksToJSON(links: Links): string {
  return JSON.stringify(Links$outboundSchema.parse(links));
}

export function linksFromJSON(
  jsonString: string,
): SafeParseResult<Links, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Links$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Links' from JSON`,
  );
}

/** @internal */
export const OpenAIExtendedMessageProperties$inboundSchema: z.ZodType<
  OpenAIExtendedMessageProperties,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OpenAIExtendedMessageProperties$Outbound = {};

/** @internal */
export const OpenAIExtendedMessageProperties$outboundSchema: z.ZodType<
  OpenAIExtendedMessageProperties$Outbound,
  z.ZodTypeDef,
  OpenAIExtendedMessageProperties
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAIExtendedMessageProperties$ {
  /** @deprecated use `OpenAIExtendedMessageProperties$inboundSchema` instead. */
  export const inboundSchema = OpenAIExtendedMessageProperties$inboundSchema;
  /** @deprecated use `OpenAIExtendedMessageProperties$outboundSchema` instead. */
  export const outboundSchema = OpenAIExtendedMessageProperties$outboundSchema;
  /** @deprecated use `OpenAIExtendedMessageProperties$Outbound` instead. */
  export type Outbound = OpenAIExtendedMessageProperties$Outbound;
}

export function openAIExtendedMessagePropertiesToJSON(
  openAIExtendedMessageProperties: OpenAIExtendedMessageProperties,
): string {
  return JSON.stringify(
    OpenAIExtendedMessageProperties$outboundSchema.parse(
      openAIExtendedMessageProperties,
    ),
  );
}

export function openAIExtendedMessagePropertiesFromJSON(
  jsonString: string,
): SafeParseResult<OpenAIExtendedMessageProperties, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenAIExtendedMessageProperties$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenAIExtendedMessageProperties' from JSON`,
  );
}

/** @internal */
export const OpenAIExtendedMessageUserProperties$inboundSchema: z.ZodType<
  OpenAIExtendedMessageUserProperties,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OpenAIExtendedMessageUserProperties$Outbound = {};

/** @internal */
export const OpenAIExtendedMessageUserProperties$outboundSchema: z.ZodType<
  OpenAIExtendedMessageUserProperties$Outbound,
  z.ZodTypeDef,
  OpenAIExtendedMessageUserProperties
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAIExtendedMessageUserProperties$ {
  /** @deprecated use `OpenAIExtendedMessageUserProperties$inboundSchema` instead. */
  export const inboundSchema =
    OpenAIExtendedMessageUserProperties$inboundSchema;
  /** @deprecated use `OpenAIExtendedMessageUserProperties$outboundSchema` instead. */
  export const outboundSchema =
    OpenAIExtendedMessageUserProperties$outboundSchema;
  /** @deprecated use `OpenAIExtendedMessageUserProperties$Outbound` instead. */
  export type Outbound = OpenAIExtendedMessageUserProperties$Outbound;
}

export function openAIExtendedMessageUserPropertiesToJSON(
  openAIExtendedMessageUserProperties: OpenAIExtendedMessageUserProperties,
): string {
  return JSON.stringify(
    OpenAIExtendedMessageUserProperties$outboundSchema.parse(
      openAIExtendedMessageUserProperties,
    ),
  );
}

export function openAIExtendedMessageUserPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<OpenAIExtendedMessageUserProperties, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OpenAIExtendedMessageUserProperties$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenAIExtendedMessageUserProperties' from JSON`,
  );
}

/** @internal */
export const OpenAIExtendedMessage$inboundSchema: z.ZodType<
  OpenAIExtendedMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: OpenAIExtendedMessageType$inboundSchema,
  externalId: z.nullable(z.string()).optional(),
  externalUrl: z.nullable(z.string()).optional(),
  conversationId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  role: Role$inboundSchema,
  content: z.union([z.string(), z.array(OpenAIContentItem$inboundSchema)]),
  name: z.nullable(z.string()).optional(),
  links: z.nullable(z.array(z.lazy(() => Links$inboundSchema))).optional(),
  properties: z.nullable(
    z.lazy(() => OpenAIExtendedMessageProperties$inboundSchema),
  ).optional(),
  userProperties: z.nullable(
    z.lazy(() => OpenAIExtendedMessageUserProperties$inboundSchema),
  ).optional(),
  tool_calls: z.nullable(z.array(OpenAIToolCall$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type OpenAIExtendedMessage$Outbound = {
  id: string;
  type: string;
  externalId?: string | null | undefined;
  externalUrl?: string | null | undefined;
  conversationId: string;
  createdAt: string;
  updatedAt: string;
  role: string;
  content: string | Array<OpenAIContentItem$Outbound>;
  name?: string | null | undefined;
  links?: Array<Links$Outbound> | null | undefined;
  properties?: OpenAIExtendedMessageProperties$Outbound | null | undefined;
  userProperties?:
    | OpenAIExtendedMessageUserProperties$Outbound
    | null
    | undefined;
  tool_calls?: Array<OpenAIToolCall$Outbound> | null | undefined;
};

/** @internal */
export const OpenAIExtendedMessage$outboundSchema: z.ZodType<
  OpenAIExtendedMessage$Outbound,
  z.ZodTypeDef,
  OpenAIExtendedMessage
> = z.object({
  id: z.string(),
  type: OpenAIExtendedMessageType$outboundSchema,
  externalId: z.nullable(z.string()).optional(),
  externalUrl: z.nullable(z.string()).optional(),
  conversationId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  role: Role$outboundSchema,
  content: z.union([z.string(), z.array(OpenAIContentItem$outboundSchema)]),
  name: z.nullable(z.string()).optional(),
  links: z.nullable(z.array(z.lazy(() => Links$outboundSchema))).optional(),
  properties: z.nullable(
    z.lazy(() => OpenAIExtendedMessageProperties$outboundSchema),
  ).optional(),
  userProperties: z.nullable(
    z.lazy(() => OpenAIExtendedMessageUserProperties$outboundSchema),
  ).optional(),
  toolCalls: z.nullable(z.array(OpenAIToolCall$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAIExtendedMessage$ {
  /** @deprecated use `OpenAIExtendedMessage$inboundSchema` instead. */
  export const inboundSchema = OpenAIExtendedMessage$inboundSchema;
  /** @deprecated use `OpenAIExtendedMessage$outboundSchema` instead. */
  export const outboundSchema = OpenAIExtendedMessage$outboundSchema;
  /** @deprecated use `OpenAIExtendedMessage$Outbound` instead. */
  export type Outbound = OpenAIExtendedMessage$Outbound;
}

export function openAIExtendedMessageToJSON(
  openAIExtendedMessage: OpenAIExtendedMessage,
): string {
  return JSON.stringify(
    OpenAIExtendedMessage$outboundSchema.parse(openAIExtendedMessage),
  );
}

export function openAIExtendedMessageFromJSON(
  jsonString: string,
): SafeParseResult<OpenAIExtendedMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenAIExtendedMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenAIExtendedMessage' from JSON`,
  );
}
