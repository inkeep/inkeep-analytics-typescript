/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  OpenAIChatCompletionMessage,
  OpenAIChatCompletionMessage$inboundSchema,
  OpenAIChatCompletionMessage$Outbound,
  OpenAIChatCompletionMessage$outboundSchema,
} from "./openaichatcompletionmessage.js";
import {
  OpenAIExtendedMessage,
  OpenAIExtendedMessage$inboundSchema,
  OpenAIExtendedMessage$Outbound,
  OpenAIExtendedMessage$outboundSchema,
} from "./openaiextendedmessage.js";

export const OpenAIConversationType = {
  Openai: "openai",
} as const;
export type OpenAIConversationType = ClosedEnum<typeof OpenAIConversationType>;

export type OpenAIConversationProperties = {};

export type OpenAIConversationUserProperties = {};

export type OpenAIConversation = {
  id: string;
  externalId?: string | null | undefined;
  externalUrl?: string | null | undefined;
  type: OpenAIConversationType;
  createdAt: string;
  updatedAt: string;
  projectId?: string | null | undefined;
  integrationId?: string | null | undefined;
  properties?: OpenAIConversationProperties | null | undefined;
  userProperties?: OpenAIConversationUserProperties | null | undefined;
  tags: Array<string>;
  /**
   * The messages in the conversation. Must be at least one message.
   */
  messages: Array<OpenAIExtendedMessage>;
  messagesOpenAIFormat: Array<OpenAIChatCompletionMessage>;
};

/** @internal */
export const OpenAIConversationType$inboundSchema: z.ZodNativeEnum<
  typeof OpenAIConversationType
> = z.nativeEnum(OpenAIConversationType);

/** @internal */
export const OpenAIConversationType$outboundSchema: z.ZodNativeEnum<
  typeof OpenAIConversationType
> = OpenAIConversationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAIConversationType$ {
  /** @deprecated use `OpenAIConversationType$inboundSchema` instead. */
  export const inboundSchema = OpenAIConversationType$inboundSchema;
  /** @deprecated use `OpenAIConversationType$outboundSchema` instead. */
  export const outboundSchema = OpenAIConversationType$outboundSchema;
}

/** @internal */
export const OpenAIConversationProperties$inboundSchema: z.ZodType<
  OpenAIConversationProperties,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OpenAIConversationProperties$Outbound = {};

/** @internal */
export const OpenAIConversationProperties$outboundSchema: z.ZodType<
  OpenAIConversationProperties$Outbound,
  z.ZodTypeDef,
  OpenAIConversationProperties
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAIConversationProperties$ {
  /** @deprecated use `OpenAIConversationProperties$inboundSchema` instead. */
  export const inboundSchema = OpenAIConversationProperties$inboundSchema;
  /** @deprecated use `OpenAIConversationProperties$outboundSchema` instead. */
  export const outboundSchema = OpenAIConversationProperties$outboundSchema;
  /** @deprecated use `OpenAIConversationProperties$Outbound` instead. */
  export type Outbound = OpenAIConversationProperties$Outbound;
}

export function openAIConversationPropertiesToJSON(
  openAIConversationProperties: OpenAIConversationProperties,
): string {
  return JSON.stringify(
    OpenAIConversationProperties$outboundSchema.parse(
      openAIConversationProperties,
    ),
  );
}

export function openAIConversationPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<OpenAIConversationProperties, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenAIConversationProperties$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenAIConversationProperties' from JSON`,
  );
}

/** @internal */
export const OpenAIConversationUserProperties$inboundSchema: z.ZodType<
  OpenAIConversationUserProperties,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OpenAIConversationUserProperties$Outbound = {};

/** @internal */
export const OpenAIConversationUserProperties$outboundSchema: z.ZodType<
  OpenAIConversationUserProperties$Outbound,
  z.ZodTypeDef,
  OpenAIConversationUserProperties
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAIConversationUserProperties$ {
  /** @deprecated use `OpenAIConversationUserProperties$inboundSchema` instead. */
  export const inboundSchema = OpenAIConversationUserProperties$inboundSchema;
  /** @deprecated use `OpenAIConversationUserProperties$outboundSchema` instead. */
  export const outboundSchema = OpenAIConversationUserProperties$outboundSchema;
  /** @deprecated use `OpenAIConversationUserProperties$Outbound` instead. */
  export type Outbound = OpenAIConversationUserProperties$Outbound;
}

export function openAIConversationUserPropertiesToJSON(
  openAIConversationUserProperties: OpenAIConversationUserProperties,
): string {
  return JSON.stringify(
    OpenAIConversationUserProperties$outboundSchema.parse(
      openAIConversationUserProperties,
    ),
  );
}

export function openAIConversationUserPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<OpenAIConversationUserProperties, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenAIConversationUserProperties$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenAIConversationUserProperties' from JSON`,
  );
}

/** @internal */
export const OpenAIConversation$inboundSchema: z.ZodType<
  OpenAIConversation,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  externalId: z.nullable(z.string()).optional(),
  externalUrl: z.nullable(z.string()).optional(),
  type: OpenAIConversationType$inboundSchema,
  createdAt: z.string(),
  updatedAt: z.string(),
  projectId: z.nullable(z.string()).optional(),
  integrationId: z.nullable(z.string()).optional(),
  properties: z.nullable(
    z.lazy(() => OpenAIConversationProperties$inboundSchema),
  ).optional(),
  userProperties: z.nullable(
    z.lazy(() => OpenAIConversationUserProperties$inboundSchema),
  ).optional(),
  tags: z.array(z.string()),
  messages: z.array(OpenAIExtendedMessage$inboundSchema),
  messagesOpenAIFormat: z.array(OpenAIChatCompletionMessage$inboundSchema),
});

/** @internal */
export type OpenAIConversation$Outbound = {
  id: string;
  externalId?: string | null | undefined;
  externalUrl?: string | null | undefined;
  type: string;
  createdAt: string;
  updatedAt: string;
  projectId?: string | null | undefined;
  integrationId?: string | null | undefined;
  properties?: OpenAIConversationProperties$Outbound | null | undefined;
  userProperties?: OpenAIConversationUserProperties$Outbound | null | undefined;
  tags: Array<string>;
  messages: Array<OpenAIExtendedMessage$Outbound>;
  messagesOpenAIFormat: Array<OpenAIChatCompletionMessage$Outbound>;
};

/** @internal */
export const OpenAIConversation$outboundSchema: z.ZodType<
  OpenAIConversation$Outbound,
  z.ZodTypeDef,
  OpenAIConversation
> = z.object({
  id: z.string(),
  externalId: z.nullable(z.string()).optional(),
  externalUrl: z.nullable(z.string()).optional(),
  type: OpenAIConversationType$outboundSchema,
  createdAt: z.string(),
  updatedAt: z.string(),
  projectId: z.nullable(z.string()).optional(),
  integrationId: z.nullable(z.string()).optional(),
  properties: z.nullable(
    z.lazy(() => OpenAIConversationProperties$outboundSchema),
  ).optional(),
  userProperties: z.nullable(
    z.lazy(() => OpenAIConversationUserProperties$outboundSchema),
  ).optional(),
  tags: z.array(z.string()),
  messages: z.array(OpenAIExtendedMessage$outboundSchema),
  messagesOpenAIFormat: z.array(OpenAIChatCompletionMessage$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAIConversation$ {
  /** @deprecated use `OpenAIConversation$inboundSchema` instead. */
  export const inboundSchema = OpenAIConversation$inboundSchema;
  /** @deprecated use `OpenAIConversation$outboundSchema` instead. */
  export const outboundSchema = OpenAIConversation$outboundSchema;
  /** @deprecated use `OpenAIConversation$Outbound` instead. */
  export type Outbound = OpenAIConversation$Outbound;
}

export function openAIConversationToJSON(
  openAIConversation: OpenAIConversation,
): string {
  return JSON.stringify(
    OpenAIConversation$outboundSchema.parse(openAIConversation),
  );
}

export function openAIConversationFromJSON(
  jsonString: string,
): SafeParseResult<OpenAIConversation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenAIConversation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenAIConversation' from JSON`,
  );
}
