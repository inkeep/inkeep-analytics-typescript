/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SupportTicketMessage,
  SupportTicketMessage$inboundSchema,
  SupportTicketMessage$Outbound,
  SupportTicketMessage$outboundSchema,
} from "./supportticketmessage.js";

export const SupportTicketConversationType = {
  SupportTicket: "support_ticket",
} as const;
export type SupportTicketConversationType = ClosedEnum<
  typeof SupportTicketConversationType
>;

export const SupportTicketConversationVisibility = {
  Private: "private",
  Public: "public",
} as const;
export type SupportTicketConversationVisibility = ClosedEnum<
  typeof SupportTicketConversationVisibility
>;

export type SupportTicketConversation = {
  id: string;
  externalId: string | null;
  externalUrl: string | null;
  type: SupportTicketConversationType;
  supportTicketConversationId: string | null;
  createdAt: string;
  updatedAt: string;
  projectId: string | null;
  integrationId: string | null;
  /**
   * A customizable collection of custom properties or attributes.
   */
  properties?: { [k: string]: any } | null | undefined;
  /**
   * A customizable collection of custom properties or attributes.
   */
  userProperties?: { [k: string]: any } | null | undefined;
  tags?: Array<string> | null | undefined;
  visibility: SupportTicketConversationVisibility | null;
  /**
   * The messages in the conversation. Must be at least one message.
   */
  messages: Array<SupportTicketMessage>;
};

/** @internal */
export const SupportTicketConversationType$inboundSchema: z.ZodNativeEnum<
  typeof SupportTicketConversationType
> = z.nativeEnum(SupportTicketConversationType);

/** @internal */
export const SupportTicketConversationType$outboundSchema: z.ZodNativeEnum<
  typeof SupportTicketConversationType
> = SupportTicketConversationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportTicketConversationType$ {
  /** @deprecated use `SupportTicketConversationType$inboundSchema` instead. */
  export const inboundSchema = SupportTicketConversationType$inboundSchema;
  /** @deprecated use `SupportTicketConversationType$outboundSchema` instead. */
  export const outboundSchema = SupportTicketConversationType$outboundSchema;
}

/** @internal */
export const SupportTicketConversationVisibility$inboundSchema: z.ZodNativeEnum<
  typeof SupportTicketConversationVisibility
> = z.nativeEnum(SupportTicketConversationVisibility);

/** @internal */
export const SupportTicketConversationVisibility$outboundSchema:
  z.ZodNativeEnum<typeof SupportTicketConversationVisibility> =
    SupportTicketConversationVisibility$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportTicketConversationVisibility$ {
  /** @deprecated use `SupportTicketConversationVisibility$inboundSchema` instead. */
  export const inboundSchema =
    SupportTicketConversationVisibility$inboundSchema;
  /** @deprecated use `SupportTicketConversationVisibility$outboundSchema` instead. */
  export const outboundSchema =
    SupportTicketConversationVisibility$outboundSchema;
}

/** @internal */
export const SupportTicketConversation$inboundSchema: z.ZodType<
  SupportTicketConversation,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  externalId: z.nullable(z.string()),
  externalUrl: z.nullable(z.string()),
  type: SupportTicketConversationType$inboundSchema,
  supportTicketConversationId: z.nullable(z.string()),
  createdAt: z.string(),
  updatedAt: z.string(),
  projectId: z.nullable(z.string()),
  integrationId: z.nullable(z.string()),
  properties: z.nullable(z.record(z.any())).optional(),
  userProperties: z.nullable(z.record(z.any())).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  visibility: z.nullable(SupportTicketConversationVisibility$inboundSchema),
  messages: z.array(SupportTicketMessage$inboundSchema),
});

/** @internal */
export type SupportTicketConversation$Outbound = {
  id: string;
  externalId: string | null;
  externalUrl: string | null;
  type: string;
  supportTicketConversationId: string | null;
  createdAt: string;
  updatedAt: string;
  projectId: string | null;
  integrationId: string | null;
  properties?: { [k: string]: any } | null | undefined;
  userProperties?: { [k: string]: any } | null | undefined;
  tags?: Array<string> | null | undefined;
  visibility: string | null;
  messages: Array<SupportTicketMessage$Outbound>;
};

/** @internal */
export const SupportTicketConversation$outboundSchema: z.ZodType<
  SupportTicketConversation$Outbound,
  z.ZodTypeDef,
  SupportTicketConversation
> = z.object({
  id: z.string(),
  externalId: z.nullable(z.string()),
  externalUrl: z.nullable(z.string()),
  type: SupportTicketConversationType$outboundSchema,
  supportTicketConversationId: z.nullable(z.string()),
  createdAt: z.string(),
  updatedAt: z.string(),
  projectId: z.nullable(z.string()),
  integrationId: z.nullable(z.string()),
  properties: z.nullable(z.record(z.any())).optional(),
  userProperties: z.nullable(z.record(z.any())).optional(),
  tags: z.nullable(z.array(z.string())).optional(),
  visibility: z.nullable(SupportTicketConversationVisibility$outboundSchema),
  messages: z.array(SupportTicketMessage$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportTicketConversation$ {
  /** @deprecated use `SupportTicketConversation$inboundSchema` instead. */
  export const inboundSchema = SupportTicketConversation$inboundSchema;
  /** @deprecated use `SupportTicketConversation$outboundSchema` instead. */
  export const outboundSchema = SupportTicketConversation$outboundSchema;
  /** @deprecated use `SupportTicketConversation$Outbound` instead. */
  export type Outbound = SupportTicketConversation$Outbound;
}

export function supportTicketConversationToJSON(
  supportTicketConversation: SupportTicketConversation,
): string {
  return JSON.stringify(
    SupportTicketConversation$outboundSchema.parse(supportTicketConversation),
  );
}

export function supportTicketConversationFromJSON(
  jsonString: string,
): SafeParseResult<SupportTicketConversation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SupportTicketConversation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SupportTicketConversation' from JSON`,
  );
}
