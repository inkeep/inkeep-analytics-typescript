/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SelectMessageEventProperties = {};

export type SelectMessageEventUserProperties = {};

export const SelectMessageEventEntityType = {
  Message: "message",
} as const;
export type SelectMessageEventEntityType = ClosedEnum<
  typeof SelectMessageEventEntityType
>;

export type SelectMessageEvent = {
  id: string;
  type: string;
  messageId: string;
  createdAt: string;
  projectId?: string | null | undefined;
  integrationId?: string | null | undefined;
  properties?: SelectMessageEventProperties | null | undefined;
  userProperties?: SelectMessageEventUserProperties | null | undefined;
  entityType: SelectMessageEventEntityType;
};

/** @internal */
export const SelectMessageEventProperties$inboundSchema: z.ZodType<
  SelectMessageEventProperties,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type SelectMessageEventProperties$Outbound = {};

/** @internal */
export const SelectMessageEventProperties$outboundSchema: z.ZodType<
  SelectMessageEventProperties$Outbound,
  z.ZodTypeDef,
  SelectMessageEventProperties
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelectMessageEventProperties$ {
  /** @deprecated use `SelectMessageEventProperties$inboundSchema` instead. */
  export const inboundSchema = SelectMessageEventProperties$inboundSchema;
  /** @deprecated use `SelectMessageEventProperties$outboundSchema` instead. */
  export const outboundSchema = SelectMessageEventProperties$outboundSchema;
  /** @deprecated use `SelectMessageEventProperties$Outbound` instead. */
  export type Outbound = SelectMessageEventProperties$Outbound;
}

export function selectMessageEventPropertiesToJSON(
  selectMessageEventProperties: SelectMessageEventProperties,
): string {
  return JSON.stringify(
    SelectMessageEventProperties$outboundSchema.parse(
      selectMessageEventProperties,
    ),
  );
}

export function selectMessageEventPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<SelectMessageEventProperties, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SelectMessageEventProperties$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SelectMessageEventProperties' from JSON`,
  );
}

/** @internal */
export const SelectMessageEventUserProperties$inboundSchema: z.ZodType<
  SelectMessageEventUserProperties,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type SelectMessageEventUserProperties$Outbound = {};

/** @internal */
export const SelectMessageEventUserProperties$outboundSchema: z.ZodType<
  SelectMessageEventUserProperties$Outbound,
  z.ZodTypeDef,
  SelectMessageEventUserProperties
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelectMessageEventUserProperties$ {
  /** @deprecated use `SelectMessageEventUserProperties$inboundSchema` instead. */
  export const inboundSchema = SelectMessageEventUserProperties$inboundSchema;
  /** @deprecated use `SelectMessageEventUserProperties$outboundSchema` instead. */
  export const outboundSchema = SelectMessageEventUserProperties$outboundSchema;
  /** @deprecated use `SelectMessageEventUserProperties$Outbound` instead. */
  export type Outbound = SelectMessageEventUserProperties$Outbound;
}

export function selectMessageEventUserPropertiesToJSON(
  selectMessageEventUserProperties: SelectMessageEventUserProperties,
): string {
  return JSON.stringify(
    SelectMessageEventUserProperties$outboundSchema.parse(
      selectMessageEventUserProperties,
    ),
  );
}

export function selectMessageEventUserPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<SelectMessageEventUserProperties, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SelectMessageEventUserProperties$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SelectMessageEventUserProperties' from JSON`,
  );
}

/** @internal */
export const SelectMessageEventEntityType$inboundSchema: z.ZodNativeEnum<
  typeof SelectMessageEventEntityType
> = z.nativeEnum(SelectMessageEventEntityType);

/** @internal */
export const SelectMessageEventEntityType$outboundSchema: z.ZodNativeEnum<
  typeof SelectMessageEventEntityType
> = SelectMessageEventEntityType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelectMessageEventEntityType$ {
  /** @deprecated use `SelectMessageEventEntityType$inboundSchema` instead. */
  export const inboundSchema = SelectMessageEventEntityType$inboundSchema;
  /** @deprecated use `SelectMessageEventEntityType$outboundSchema` instead. */
  export const outboundSchema = SelectMessageEventEntityType$outboundSchema;
}

/** @internal */
export const SelectMessageEvent$inboundSchema: z.ZodType<
  SelectMessageEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: z.string(),
  messageId: z.string(),
  createdAt: z.string(),
  projectId: z.nullable(z.string()).optional(),
  integrationId: z.nullable(z.string()).optional(),
  properties: z.nullable(
    z.lazy(() => SelectMessageEventProperties$inboundSchema),
  ).optional(),
  userProperties: z.nullable(
    z.lazy(() => SelectMessageEventUserProperties$inboundSchema),
  ).optional(),
  entityType: SelectMessageEventEntityType$inboundSchema,
});

/** @internal */
export type SelectMessageEvent$Outbound = {
  id: string;
  type: string;
  messageId: string;
  createdAt: string;
  projectId?: string | null | undefined;
  integrationId?: string | null | undefined;
  properties?: SelectMessageEventProperties$Outbound | null | undefined;
  userProperties?: SelectMessageEventUserProperties$Outbound | null | undefined;
  entityType: string;
};

/** @internal */
export const SelectMessageEvent$outboundSchema: z.ZodType<
  SelectMessageEvent$Outbound,
  z.ZodTypeDef,
  SelectMessageEvent
> = z.object({
  id: z.string(),
  type: z.string(),
  messageId: z.string(),
  createdAt: z.string(),
  projectId: z.nullable(z.string()).optional(),
  integrationId: z.nullable(z.string()).optional(),
  properties: z.nullable(
    z.lazy(() => SelectMessageEventProperties$outboundSchema),
  ).optional(),
  userProperties: z.nullable(
    z.lazy(() => SelectMessageEventUserProperties$outboundSchema),
  ).optional(),
  entityType: SelectMessageEventEntityType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SelectMessageEvent$ {
  /** @deprecated use `SelectMessageEvent$inboundSchema` instead. */
  export const inboundSchema = SelectMessageEvent$inboundSchema;
  /** @deprecated use `SelectMessageEvent$outboundSchema` instead. */
  export const outboundSchema = SelectMessageEvent$outboundSchema;
  /** @deprecated use `SelectMessageEvent$Outbound` instead. */
  export type Outbound = SelectMessageEvent$Outbound;
}

export function selectMessageEventToJSON(
  selectMessageEvent: SelectMessageEvent,
): string {
  return JSON.stringify(
    SelectMessageEvent$outboundSchema.parse(selectMessageEvent),
  );
}

export function selectMessageEventFromJSON(
  jsonString: string,
): SafeParseResult<SelectMessageEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SelectMessageEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SelectMessageEvent' from JSON`,
  );
}
