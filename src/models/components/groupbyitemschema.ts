/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GroupByItemSchemaField = {
  Id: "id",
  MessageIds: "messageIds",
  MessagesCount: "messagesCount",
  OrganizationId: "organizationId",
  Question: "question",
  QuestionLength: "questionLength",
  Answer: "answer",
  IsOnTopic: "isOnTopic",
  IsClear: "isClear",
  IsDocumented: "isDocumented",
  IsFeatureSupported: "isFeatureSupported",
  IsAnswerConfident: "isAnswerConfident",
  GapSummary: "gapSummary",
  Subject: "subject",
  Category: "category",
  Languages: "languages",
  FirstPartyEntities: "firstPartyEntities",
  ThirdPartyEntities: "thirdPartyEntities",
  Emotion: "emotion",
  Sentiment: "sentiment",
  QuestionType: "questionType",
  ProjectId: "projectId",
  IntegrationId: "integrationId",
  FirstMessageTime: "firstMessageTime",
  LastMessageTime: "lastMessageTime",
  LastUpdated: "lastUpdated",
  HasPositiveFeedback: "hasPositiveFeedback",
  HasNegativeFeedback: "hasNegativeFeedback",
  ConversationIds: "conversationIds",
  AreAIAnnotationsVerified: "areAIAnnotationsVerified",
  IsInitialQuestionAnswer: "isInitialQuestionAnswer",
} as const;
export type GroupByItemSchemaField = ClosedEnum<typeof GroupByItemSchemaField>;

export type GroupByItemSchema = {
  field: GroupByItemSchemaField;
};

/** @internal */
export const GroupByItemSchemaField$inboundSchema: z.ZodNativeEnum<
  typeof GroupByItemSchemaField
> = z.nativeEnum(GroupByItemSchemaField);

/** @internal */
export const GroupByItemSchemaField$outboundSchema: z.ZodNativeEnum<
  typeof GroupByItemSchemaField
> = GroupByItemSchemaField$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GroupByItemSchemaField$ {
  /** @deprecated use `GroupByItemSchemaField$inboundSchema` instead. */
  export const inboundSchema = GroupByItemSchemaField$inboundSchema;
  /** @deprecated use `GroupByItemSchemaField$outboundSchema` instead. */
  export const outboundSchema = GroupByItemSchemaField$outboundSchema;
}

/** @internal */
export const GroupByItemSchema$inboundSchema: z.ZodType<
  GroupByItemSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: GroupByItemSchemaField$inboundSchema,
});

/** @internal */
export type GroupByItemSchema$Outbound = {
  field: string;
};

/** @internal */
export const GroupByItemSchema$outboundSchema: z.ZodType<
  GroupByItemSchema$Outbound,
  z.ZodTypeDef,
  GroupByItemSchema
> = z.object({
  field: GroupByItemSchemaField$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GroupByItemSchema$ {
  /** @deprecated use `GroupByItemSchema$inboundSchema` instead. */
  export const inboundSchema = GroupByItemSchema$inboundSchema;
  /** @deprecated use `GroupByItemSchema$outboundSchema` instead. */
  export const outboundSchema = GroupByItemSchema$outboundSchema;
  /** @deprecated use `GroupByItemSchema$Outbound` instead. */
  export type Outbound = GroupByItemSchema$Outbound;
}

export function groupByItemSchemaToJSON(
  groupByItemSchema: GroupByItemSchema,
): string {
  return JSON.stringify(
    GroupByItemSchema$outboundSchema.parse(groupByItemSchema),
  );
}

export function groupByItemSchemaFromJSON(
  jsonString: string,
): SafeParseResult<GroupByItemSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GroupByItemSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GroupByItemSchema' from JSON`,
  );
}
