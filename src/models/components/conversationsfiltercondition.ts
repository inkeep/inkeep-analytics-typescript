/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ConversationsField,
  ConversationsField$inboundSchema,
  ConversationsField$outboundSchema,
} from "./conversationsfield.js";
import {
  ConversationsFilterConditionValue,
  ConversationsFilterConditionValue$inboundSchema,
  ConversationsFilterConditionValue$Outbound,
  ConversationsFilterConditionValue$outboundSchema,
} from "./conversationsfilterconditionvalue.js";
import {
  FilterOperator,
  FilterOperator$inboundSchema,
  FilterOperator$outboundSchema,
} from "./filteroperator.js";

export type Condition = {
  /**
   * Available fields for Conversations
   */
  field: ConversationsField;
  /**
   * Available operators for filtering data
   */
  operator: FilterOperator;
  /**
   * The value to compare the field against
   */
  value: ConversationsFilterConditionValue;
};

export type ConversationsFilterCondition = {
  condition: Condition;
};

/** @internal */
export const Condition$inboundSchema: z.ZodType<
  Condition,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: ConversationsField$inboundSchema,
  operator: FilterOperator$inboundSchema,
  value: ConversationsFilterConditionValue$inboundSchema,
});

/** @internal */
export type Condition$Outbound = {
  field: string;
  operator: string;
  value: ConversationsFilterConditionValue$Outbound;
};

/** @internal */
export const Condition$outboundSchema: z.ZodType<
  Condition$Outbound,
  z.ZodTypeDef,
  Condition
> = z.object({
  field: ConversationsField$outboundSchema,
  operator: FilterOperator$outboundSchema,
  value: ConversationsFilterConditionValue$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Condition$ {
  /** @deprecated use `Condition$inboundSchema` instead. */
  export const inboundSchema = Condition$inboundSchema;
  /** @deprecated use `Condition$outboundSchema` instead. */
  export const outboundSchema = Condition$outboundSchema;
  /** @deprecated use `Condition$Outbound` instead. */
  export type Outbound = Condition$Outbound;
}

export function conditionToJSON(condition: Condition): string {
  return JSON.stringify(Condition$outboundSchema.parse(condition));
}

export function conditionFromJSON(
  jsonString: string,
): SafeParseResult<Condition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Condition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Condition' from JSON`,
  );
}

/** @internal */
export const ConversationsFilterCondition$inboundSchema: z.ZodType<
  ConversationsFilterCondition,
  z.ZodTypeDef,
  unknown
> = z.object({
  condition: z.lazy(() => Condition$inboundSchema),
});

/** @internal */
export type ConversationsFilterCondition$Outbound = {
  condition: Condition$Outbound;
};

/** @internal */
export const ConversationsFilterCondition$outboundSchema: z.ZodType<
  ConversationsFilterCondition$Outbound,
  z.ZodTypeDef,
  ConversationsFilterCondition
> = z.object({
  condition: z.lazy(() => Condition$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsFilterCondition$ {
  /** @deprecated use `ConversationsFilterCondition$inboundSchema` instead. */
  export const inboundSchema = ConversationsFilterCondition$inboundSchema;
  /** @deprecated use `ConversationsFilterCondition$outboundSchema` instead. */
  export const outboundSchema = ConversationsFilterCondition$outboundSchema;
  /** @deprecated use `ConversationsFilterCondition$Outbound` instead. */
  export type Outbound = ConversationsFilterCondition$Outbound;
}

export function conversationsFilterConditionToJSON(
  conversationsFilterCondition: ConversationsFilterCondition,
): string {
  return JSON.stringify(
    ConversationsFilterCondition$outboundSchema.parse(
      conversationsFilterCondition,
    ),
  );
}

export function conversationsFilterConditionFromJSON(
  jsonString: string,
): SafeParseResult<ConversationsFilterCondition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConversationsFilterCondition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConversationsFilterCondition' from JSON`,
  );
}
