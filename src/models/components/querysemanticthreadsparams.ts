/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SemanticThreadFilter,
  SemanticThreadFilter$inboundSchema,
  SemanticThreadFilter$Outbound,
  SemanticThreadFilter$outboundSchema,
} from "./semanticthreadfilter.js";
import {
  SemanticThreadGroupBy,
  SemanticThreadGroupBy$inboundSchema,
  SemanticThreadGroupBy$Outbound,
  SemanticThreadGroupBy$outboundSchema,
} from "./semanticthreadgroupby.js";
import {
  SemanticThreadOrderBy,
  SemanticThreadOrderBy$inboundSchema,
  SemanticThreadOrderBy$Outbound,
  SemanticThreadOrderBy$outboundSchema,
} from "./semanticthreadorderby.js";
import {
  SemanticThreadSelection,
  SemanticThreadSelection$inboundSchema,
  SemanticThreadSelection$Outbound,
  SemanticThreadSelection$outboundSchema,
} from "./semanticthreadselection.js";

export type QuerySemanticThreadsParams = {
  select?: Array<SemanticThreadSelection> | undefined;
  groupBy?: Array<SemanticThreadGroupBy> | undefined;
  where?: SemanticThreadFilter | undefined;
  orderBy?: Array<SemanticThreadOrderBy> | undefined;
  /**
   * Notes are not persisted, but may be useful for your debugging purposes
   */
  notes?: string | undefined;
};

/** @internal */
export const QuerySemanticThreadsParams$inboundSchema: z.ZodType<
  QuerySemanticThreadsParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  select: z.array(SemanticThreadSelection$inboundSchema).optional(),
  groupBy: z.array(SemanticThreadGroupBy$inboundSchema).optional(),
  where: SemanticThreadFilter$inboundSchema.optional(),
  orderBy: z.array(SemanticThreadOrderBy$inboundSchema).optional(),
  notes: z.string().optional(),
});

/** @internal */
export type QuerySemanticThreadsParams$Outbound = {
  select?: Array<SemanticThreadSelection$Outbound> | undefined;
  groupBy?: Array<SemanticThreadGroupBy$Outbound> | undefined;
  where?: SemanticThreadFilter$Outbound | undefined;
  orderBy?: Array<SemanticThreadOrderBy$Outbound> | undefined;
  notes?: string | undefined;
};

/** @internal */
export const QuerySemanticThreadsParams$outboundSchema: z.ZodType<
  QuerySemanticThreadsParams$Outbound,
  z.ZodTypeDef,
  QuerySemanticThreadsParams
> = z.object({
  select: z.array(SemanticThreadSelection$outboundSchema).optional(),
  groupBy: z.array(SemanticThreadGroupBy$outboundSchema).optional(),
  where: SemanticThreadFilter$outboundSchema.optional(),
  orderBy: z.array(SemanticThreadOrderBy$outboundSchema).optional(),
  notes: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QuerySemanticThreadsParams$ {
  /** @deprecated use `QuerySemanticThreadsParams$inboundSchema` instead. */
  export const inboundSchema = QuerySemanticThreadsParams$inboundSchema;
  /** @deprecated use `QuerySemanticThreadsParams$outboundSchema` instead. */
  export const outboundSchema = QuerySemanticThreadsParams$outboundSchema;
  /** @deprecated use `QuerySemanticThreadsParams$Outbound` instead. */
  export type Outbound = QuerySemanticThreadsParams$Outbound;
}

export function querySemanticThreadsParamsToJSON(
  querySemanticThreadsParams: QuerySemanticThreadsParams,
): string {
  return JSON.stringify(
    QuerySemanticThreadsParams$outboundSchema.parse(querySemanticThreadsParams),
  );
}

export function querySemanticThreadsParamsFromJSON(
  jsonString: string,
): SafeParseResult<QuerySemanticThreadsParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QuerySemanticThreadsParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QuerySemanticThreadsParams' from JSON`,
  );
}
