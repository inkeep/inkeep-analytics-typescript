/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EventsFilter,
  EventsFilter$inboundSchema,
  EventsFilter$Outbound,
  EventsFilter$outboundSchema,
} from "./eventsfilter.js";
import {
  EventsGroupBy,
  EventsGroupBy$inboundSchema,
  EventsGroupBy$Outbound,
  EventsGroupBy$outboundSchema,
} from "./eventsgroupby.js";
import {
  EventsOrderBy,
  EventsOrderBy$inboundSchema,
  EventsOrderBy$Outbound,
  EventsOrderBy$outboundSchema,
} from "./eventsorderby.js";
import {
  EventsSelection,
  EventsSelection$inboundSchema,
  EventsSelection$Outbound,
  EventsSelection$outboundSchema,
} from "./eventsselection.js";

export type QueryEventsParams = {
  select?: Array<EventsSelection> | undefined;
  groupBy?: Array<EventsGroupBy> | undefined;
  where?: EventsFilter | undefined;
  orderBy?: Array<EventsOrderBy> | undefined;
  /**
   * Notes are not persisted, but may be useful for your debugging purposes
   */
  notes?: string | undefined;
};

/** @internal */
export const QueryEventsParams$inboundSchema: z.ZodType<
  QueryEventsParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  select: z.array(EventsSelection$inboundSchema).optional(),
  groupBy: z.array(EventsGroupBy$inboundSchema).optional(),
  where: EventsFilter$inboundSchema.optional(),
  orderBy: z.array(EventsOrderBy$inboundSchema).optional(),
  notes: z.string().optional(),
});

/** @internal */
export type QueryEventsParams$Outbound = {
  select?: Array<EventsSelection$Outbound> | undefined;
  groupBy?: Array<EventsGroupBy$Outbound> | undefined;
  where?: EventsFilter$Outbound | undefined;
  orderBy?: Array<EventsOrderBy$Outbound> | undefined;
  notes?: string | undefined;
};

/** @internal */
export const QueryEventsParams$outboundSchema: z.ZodType<
  QueryEventsParams$Outbound,
  z.ZodTypeDef,
  QueryEventsParams
> = z.object({
  select: z.array(EventsSelection$outboundSchema).optional(),
  groupBy: z.array(EventsGroupBy$outboundSchema).optional(),
  where: EventsFilter$outboundSchema.optional(),
  orderBy: z.array(EventsOrderBy$outboundSchema).optional(),
  notes: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryEventsParams$ {
  /** @deprecated use `QueryEventsParams$inboundSchema` instead. */
  export const inboundSchema = QueryEventsParams$inboundSchema;
  /** @deprecated use `QueryEventsParams$outboundSchema` instead. */
  export const outboundSchema = QueryEventsParams$outboundSchema;
  /** @deprecated use `QueryEventsParams$Outbound` instead. */
  export type Outbound = QueryEventsParams$Outbound;
}

export function queryEventsParamsToJSON(
  queryEventsParams: QueryEventsParams,
): string {
  return JSON.stringify(
    QueryEventsParams$outboundSchema.parse(queryEventsParams),
  );
}

export function queryEventsParamsFromJSON(
  jsonString: string,
): SafeParseResult<QueryEventsParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryEventsParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryEventsParams' from JSON`,
  );
}
