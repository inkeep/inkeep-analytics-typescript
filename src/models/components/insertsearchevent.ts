/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const InsertSearchEventEntityType = {
  Search: "search",
} as const;
export type InsertSearchEventEntityType = ClosedEnum<
  typeof InsertSearchEventEntityType
>;

export type InsertSearchEvent = {
  id?: string | undefined;
  type: string;
  searchQuery: string;
  /**
   * A timestamp in ISO 8601 format with timezone information. If not provided, the current time will be used.
   */
  createdAt?: Date | null | undefined;
  projectId?: string | null | undefined;
  integrationId?: string | null | undefined;
  /**
   * A customizable collection of custom properties or attributes.
   */
  properties?: { [k: string]: any } | null | undefined;
  /**
   * A customizable collection of custom properties or attributes.
   */
  userProperties?: { [k: string]: any } | null | undefined;
  entityType: InsertSearchEventEntityType;
};

/** @internal */
export const InsertSearchEventEntityType$inboundSchema: z.ZodNativeEnum<
  typeof InsertSearchEventEntityType
> = z.nativeEnum(InsertSearchEventEntityType);

/** @internal */
export const InsertSearchEventEntityType$outboundSchema: z.ZodNativeEnum<
  typeof InsertSearchEventEntityType
> = InsertSearchEventEntityType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsertSearchEventEntityType$ {
  /** @deprecated use `InsertSearchEventEntityType$inboundSchema` instead. */
  export const inboundSchema = InsertSearchEventEntityType$inboundSchema;
  /** @deprecated use `InsertSearchEventEntityType$outboundSchema` instead. */
  export const outboundSchema = InsertSearchEventEntityType$outboundSchema;
}

/** @internal */
export const InsertSearchEvent$inboundSchema: z.ZodType<
  InsertSearchEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: z.string(),
  searchQuery: z.string(),
  createdAt: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  projectId: z.nullable(z.string()).optional(),
  integrationId: z.nullable(z.string()).optional(),
  properties: z.nullable(z.record(z.any())).optional(),
  userProperties: z.nullable(z.record(z.any())).optional(),
  entityType: InsertSearchEventEntityType$inboundSchema,
});

/** @internal */
export type InsertSearchEvent$Outbound = {
  id?: string | undefined;
  type: string;
  searchQuery: string;
  createdAt?: string | null | undefined;
  projectId?: string | null | undefined;
  integrationId?: string | null | undefined;
  properties?: { [k: string]: any } | null | undefined;
  userProperties?: { [k: string]: any } | null | undefined;
  entityType: string;
};

/** @internal */
export const InsertSearchEvent$outboundSchema: z.ZodType<
  InsertSearchEvent$Outbound,
  z.ZodTypeDef,
  InsertSearchEvent
> = z.object({
  id: z.string().optional(),
  type: z.string(),
  searchQuery: z.string(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  projectId: z.nullable(z.string()).optional(),
  integrationId: z.nullable(z.string()).optional(),
  properties: z.nullable(z.record(z.any())).optional(),
  userProperties: z.nullable(z.record(z.any())).optional(),
  entityType: InsertSearchEventEntityType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsertSearchEvent$ {
  /** @deprecated use `InsertSearchEvent$inboundSchema` instead. */
  export const inboundSchema = InsertSearchEvent$inboundSchema;
  /** @deprecated use `InsertSearchEvent$outboundSchema` instead. */
  export const outboundSchema = InsertSearchEvent$outboundSchema;
  /** @deprecated use `InsertSearchEvent$Outbound` instead. */
  export type Outbound = InsertSearchEvent$Outbound;
}

export function insertSearchEventToJSON(
  insertSearchEvent: InsertSearchEvent,
): string {
  return JSON.stringify(
    InsertSearchEvent$outboundSchema.parse(insertSearchEvent),
  );
}

export function insertSearchEventFromJSON(
  jsonString: string,
): SafeParseResult<InsertSearchEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsertSearchEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsertSearchEvent' from JSON`,
  );
}
