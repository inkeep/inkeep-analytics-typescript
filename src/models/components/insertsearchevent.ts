/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type InsertSearchEventProperties = {};

export type InsertSearchEventUserProperties = {};

export const InsertSearchEventEntityType = {
  Search: "search",
} as const;
export type InsertSearchEventEntityType = ClosedEnum<
  typeof InsertSearchEventEntityType
>;

export type InsertSearchEvent = {
  id?: string | undefined;
  type: string;
  searchQuery: string;
  createdAt?: string | null | undefined;
  properties?: InsertSearchEventProperties | null | undefined;
  userProperties?: InsertSearchEventUserProperties | null | undefined;
  entityType: InsertSearchEventEntityType;
};

/** @internal */
export const InsertSearchEventProperties$inboundSchema: z.ZodType<
  InsertSearchEventProperties,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InsertSearchEventProperties$Outbound = {};

/** @internal */
export const InsertSearchEventProperties$outboundSchema: z.ZodType<
  InsertSearchEventProperties$Outbound,
  z.ZodTypeDef,
  InsertSearchEventProperties
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsertSearchEventProperties$ {
  /** @deprecated use `InsertSearchEventProperties$inboundSchema` instead. */
  export const inboundSchema = InsertSearchEventProperties$inboundSchema;
  /** @deprecated use `InsertSearchEventProperties$outboundSchema` instead. */
  export const outboundSchema = InsertSearchEventProperties$outboundSchema;
  /** @deprecated use `InsertSearchEventProperties$Outbound` instead. */
  export type Outbound = InsertSearchEventProperties$Outbound;
}

export function insertSearchEventPropertiesToJSON(
  insertSearchEventProperties: InsertSearchEventProperties,
): string {
  return JSON.stringify(
    InsertSearchEventProperties$outboundSchema.parse(
      insertSearchEventProperties,
    ),
  );
}

export function insertSearchEventPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<InsertSearchEventProperties, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsertSearchEventProperties$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsertSearchEventProperties' from JSON`,
  );
}

/** @internal */
export const InsertSearchEventUserProperties$inboundSchema: z.ZodType<
  InsertSearchEventUserProperties,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InsertSearchEventUserProperties$Outbound = {};

/** @internal */
export const InsertSearchEventUserProperties$outboundSchema: z.ZodType<
  InsertSearchEventUserProperties$Outbound,
  z.ZodTypeDef,
  InsertSearchEventUserProperties
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsertSearchEventUserProperties$ {
  /** @deprecated use `InsertSearchEventUserProperties$inboundSchema` instead. */
  export const inboundSchema = InsertSearchEventUserProperties$inboundSchema;
  /** @deprecated use `InsertSearchEventUserProperties$outboundSchema` instead. */
  export const outboundSchema = InsertSearchEventUserProperties$outboundSchema;
  /** @deprecated use `InsertSearchEventUserProperties$Outbound` instead. */
  export type Outbound = InsertSearchEventUserProperties$Outbound;
}

export function insertSearchEventUserPropertiesToJSON(
  insertSearchEventUserProperties: InsertSearchEventUserProperties,
): string {
  return JSON.stringify(
    InsertSearchEventUserProperties$outboundSchema.parse(
      insertSearchEventUserProperties,
    ),
  );
}

export function insertSearchEventUserPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<InsertSearchEventUserProperties, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsertSearchEventUserProperties$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsertSearchEventUserProperties' from JSON`,
  );
}

/** @internal */
export const InsertSearchEventEntityType$inboundSchema: z.ZodNativeEnum<
  typeof InsertSearchEventEntityType
> = z.nativeEnum(InsertSearchEventEntityType);

/** @internal */
export const InsertSearchEventEntityType$outboundSchema: z.ZodNativeEnum<
  typeof InsertSearchEventEntityType
> = InsertSearchEventEntityType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsertSearchEventEntityType$ {
  /** @deprecated use `InsertSearchEventEntityType$inboundSchema` instead. */
  export const inboundSchema = InsertSearchEventEntityType$inboundSchema;
  /** @deprecated use `InsertSearchEventEntityType$outboundSchema` instead. */
  export const outboundSchema = InsertSearchEventEntityType$outboundSchema;
}

/** @internal */
export const InsertSearchEvent$inboundSchema: z.ZodType<
  InsertSearchEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: z.string(),
  searchQuery: z.string(),
  createdAt: z.nullable(z.string()).optional(),
  properties: z.nullable(
    z.lazy(() => InsertSearchEventProperties$inboundSchema),
  ).optional(),
  userProperties: z.nullable(
    z.lazy(() => InsertSearchEventUserProperties$inboundSchema),
  ).optional(),
  entityType: InsertSearchEventEntityType$inboundSchema,
});

/** @internal */
export type InsertSearchEvent$Outbound = {
  id?: string | undefined;
  type: string;
  searchQuery: string;
  createdAt?: string | null | undefined;
  properties?: InsertSearchEventProperties$Outbound | null | undefined;
  userProperties?: InsertSearchEventUserProperties$Outbound | null | undefined;
  entityType: string;
};

/** @internal */
export const InsertSearchEvent$outboundSchema: z.ZodType<
  InsertSearchEvent$Outbound,
  z.ZodTypeDef,
  InsertSearchEvent
> = z.object({
  id: z.string().optional(),
  type: z.string(),
  searchQuery: z.string(),
  createdAt: z.nullable(z.string()).optional(),
  properties: z.nullable(
    z.lazy(() => InsertSearchEventProperties$outboundSchema),
  ).optional(),
  userProperties: z.nullable(
    z.lazy(() => InsertSearchEventUserProperties$outboundSchema),
  ).optional(),
  entityType: InsertSearchEventEntityType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsertSearchEvent$ {
  /** @deprecated use `InsertSearchEvent$inboundSchema` instead. */
  export const inboundSchema = InsertSearchEvent$inboundSchema;
  /** @deprecated use `InsertSearchEvent$outboundSchema` instead. */
  export const outboundSchema = InsertSearchEvent$outboundSchema;
  /** @deprecated use `InsertSearchEvent$Outbound` instead. */
  export type Outbound = InsertSearchEvent$Outbound;
}

export function insertSearchEventToJSON(
  insertSearchEvent: InsertSearchEvent,
): string {
  return JSON.stringify(
    InsertSearchEvent$outboundSchema.parse(insertSearchEvent),
  );
}

export function insertSearchEventFromJSON(
  jsonString: string,
): SafeParseResult<InsertSearchEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsertSearchEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsertSearchEvent' from JSON`,
  );
}
