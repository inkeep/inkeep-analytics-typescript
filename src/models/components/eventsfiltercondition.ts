/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EventsField,
  EventsField$inboundSchema,
  EventsField$outboundSchema,
} from "./eventsfield.js";
import {
  EventsFilterConditionValue,
  EventsFilterConditionValue$inboundSchema,
  EventsFilterConditionValue$Outbound,
  EventsFilterConditionValue$outboundSchema,
} from "./eventsfilterconditionvalue.js";
import {
  FilterOperator,
  FilterOperator$inboundSchema,
  FilterOperator$outboundSchema,
} from "./filteroperator.js";

export type EventsFilterConditionCondition = {
  /**
   * Available fields for Events
   */
  field: EventsField;
  /**
   * Available operators for filtering data
   */
  operator: FilterOperator;
  /**
   * The value to compare the field against. For JSON fields, can be either a JSON object or a {path, value} pair.
   */
  value: EventsFilterConditionValue;
};

export type EventsFilterCondition = {
  condition: EventsFilterConditionCondition;
};

/** @internal */
export const EventsFilterConditionCondition$inboundSchema: z.ZodType<
  EventsFilterConditionCondition,
  z.ZodTypeDef,
  unknown
> = z.object({
  field: EventsField$inboundSchema,
  operator: FilterOperator$inboundSchema,
  value: EventsFilterConditionValue$inboundSchema,
});

/** @internal */
export type EventsFilterConditionCondition$Outbound = {
  field: string;
  operator: string;
  value: EventsFilterConditionValue$Outbound;
};

/** @internal */
export const EventsFilterConditionCondition$outboundSchema: z.ZodType<
  EventsFilterConditionCondition$Outbound,
  z.ZodTypeDef,
  EventsFilterConditionCondition
> = z.object({
  field: EventsField$outboundSchema,
  operator: FilterOperator$outboundSchema,
  value: EventsFilterConditionValue$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsFilterConditionCondition$ {
  /** @deprecated use `EventsFilterConditionCondition$inboundSchema` instead. */
  export const inboundSchema = EventsFilterConditionCondition$inboundSchema;
  /** @deprecated use `EventsFilterConditionCondition$outboundSchema` instead. */
  export const outboundSchema = EventsFilterConditionCondition$outboundSchema;
  /** @deprecated use `EventsFilterConditionCondition$Outbound` instead. */
  export type Outbound = EventsFilterConditionCondition$Outbound;
}

export function eventsFilterConditionConditionToJSON(
  eventsFilterConditionCondition: EventsFilterConditionCondition,
): string {
  return JSON.stringify(
    EventsFilterConditionCondition$outboundSchema.parse(
      eventsFilterConditionCondition,
    ),
  );
}

export function eventsFilterConditionConditionFromJSON(
  jsonString: string,
): SafeParseResult<EventsFilterConditionCondition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventsFilterConditionCondition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventsFilterConditionCondition' from JSON`,
  );
}

/** @internal */
export const EventsFilterCondition$inboundSchema: z.ZodType<
  EventsFilterCondition,
  z.ZodTypeDef,
  unknown
> = z.object({
  condition: z.lazy(() => EventsFilterConditionCondition$inboundSchema),
});

/** @internal */
export type EventsFilterCondition$Outbound = {
  condition: EventsFilterConditionCondition$Outbound;
};

/** @internal */
export const EventsFilterCondition$outboundSchema: z.ZodType<
  EventsFilterCondition$Outbound,
  z.ZodTypeDef,
  EventsFilterCondition
> = z.object({
  condition: z.lazy(() => EventsFilterConditionCondition$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsFilterCondition$ {
  /** @deprecated use `EventsFilterCondition$inboundSchema` instead. */
  export const inboundSchema = EventsFilterCondition$inboundSchema;
  /** @deprecated use `EventsFilterCondition$outboundSchema` instead. */
  export const outboundSchema = EventsFilterCondition$outboundSchema;
  /** @deprecated use `EventsFilterCondition$Outbound` instead. */
  export type Outbound = EventsFilterCondition$Outbound;
}

export function eventsFilterConditionToJSON(
  eventsFilterCondition: EventsFilterCondition,
): string {
  return JSON.stringify(
    EventsFilterCondition$outboundSchema.parse(eventsFilterCondition),
  );
}

export function eventsFilterConditionFromJSON(
  jsonString: string,
): SafeParseResult<EventsFilterCondition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventsFilterCondition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventsFilterCondition' from JSON`,
  );
}
