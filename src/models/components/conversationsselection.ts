/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ConversationsAggregationSelection,
  ConversationsAggregationSelection$inboundSchema,
  ConversationsAggregationSelection$Outbound,
  ConversationsAggregationSelection$outboundSchema,
} from "./conversationsaggregationselection.js";
import {
  ConversationsSimpleFieldSelection,
  ConversationsSimpleFieldSelection$inboundSchema,
  ConversationsSimpleFieldSelection$Outbound,
  ConversationsSimpleFieldSelection$outboundSchema,
} from "./conversationssimplefieldselection.js";
import {
  ConversationsTimeBasedGroupBySelection,
  ConversationsTimeBasedGroupBySelection$inboundSchema,
  ConversationsTimeBasedGroupBySelection$Outbound,
  ConversationsTimeBasedGroupBySelection$outboundSchema,
} from "./conversationstimebasedgroupbyselection.js";

/**
 * Fields to select from conversations
 */
export type ConversationsSelection =
  | (ConversationsAggregationSelection & { type: "aggregation" })
  | (ConversationsTimeBasedGroupBySelection & { type: "time" })
  | (ConversationsSimpleFieldSelection & { type: "field" });

/** @internal */
export const ConversationsSelection$inboundSchema: z.ZodType<
  ConversationsSelection,
  z.ZodTypeDef,
  unknown
> = z.union([
  ConversationsAggregationSelection$inboundSchema.and(
    z.object({ type: z.literal("aggregation") }).transform((v) => ({
      type: v.type,
    })),
  ),
  ConversationsTimeBasedGroupBySelection$inboundSchema.and(
    z.object({ type: z.literal("time") }).transform((v) => ({ type: v.type })),
  ),
  ConversationsSimpleFieldSelection$inboundSchema.and(
    z.object({ type: z.literal("field") }).transform((v) => ({ type: v.type })),
  ),
]);

/** @internal */
export type ConversationsSelection$Outbound =
  | (ConversationsAggregationSelection$Outbound & { type: "aggregation" })
  | (ConversationsTimeBasedGroupBySelection$Outbound & { type: "time" })
  | (ConversationsSimpleFieldSelection$Outbound & { type: "field" });

/** @internal */
export const ConversationsSelection$outboundSchema: z.ZodType<
  ConversationsSelection$Outbound,
  z.ZodTypeDef,
  ConversationsSelection
> = z.union([
  ConversationsAggregationSelection$outboundSchema.and(
    z.object({ type: z.literal("aggregation") }).transform((v) => ({
      type: v.type,
    })),
  ),
  ConversationsTimeBasedGroupBySelection$outboundSchema.and(
    z.object({ type: z.literal("time") }).transform((v) => ({ type: v.type })),
  ),
  ConversationsSimpleFieldSelection$outboundSchema.and(
    z.object({ type: z.literal("field") }).transform((v) => ({ type: v.type })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConversationsSelection$ {
  /** @deprecated use `ConversationsSelection$inboundSchema` instead. */
  export const inboundSchema = ConversationsSelection$inboundSchema;
  /** @deprecated use `ConversationsSelection$outboundSchema` instead. */
  export const outboundSchema = ConversationsSelection$outboundSchema;
  /** @deprecated use `ConversationsSelection$Outbound` instead. */
  export type Outbound = ConversationsSelection$Outbound;
}

export function conversationsSelectionToJSON(
  conversationsSelection: ConversationsSelection,
): string {
  return JSON.stringify(
    ConversationsSelection$outboundSchema.parse(conversationsSelection),
  );
}

export function conversationsSelectionFromJSON(
  jsonString: string,
): SafeParseResult<ConversationsSelection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ConversationsSelection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ConversationsSelection' from JSON`,
  );
}
