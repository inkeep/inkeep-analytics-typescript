/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const SupportCopilotMessageType = {
  SupportCopilot: "support_copilot",
} as const;
export type SupportCopilotMessageType = ClosedEnum<
  typeof SupportCopilotMessageType
>;

export const SupportCopilotMessageType1 = {
  Documentation: "documentation",
  Site: "site",
  DiscoursePost: "discourse_post",
  GithubIssue: "github_issue",
  GithubDiscussion: "github_discussion",
  StackoverflowQuestion: "stackoverflow_question",
  DiscordForumPost: "discord_forum_post",
  DiscordMessage: "discord_message",
  CustomQuestionAnswer: "custom_question_answer",
} as const;
export type SupportCopilotMessageType1 = ClosedEnum<
  typeof SupportCopilotMessageType1
>;

export type SupportCopilotMessageLinksType =
  | SupportCopilotMessageType1
  | string;

export type SupportCopilotMessageLinks = {
  label?: string | null | undefined;
  url: string;
  title?: string | null | undefined;
  description?: string | null | undefined;
  type?: SupportCopilotMessageType1 | string | null | undefined;
  breadcrumbs?: Array<string> | null | undefined;
};

export type SupportCopilotMessageProperties = {};

export type SupportCopilotMessageUserProperties = {};

export type SupportCopilotMessage = {
  id: string;
  type: SupportCopilotMessageType;
  externalId?: string | null | undefined;
  externalUrl?: string | null | undefined;
  conversationId: string;
  createdAt: string;
  updatedAt: string;
  role: string;
  content?: string | null | undefined;
  name?: string | null | undefined;
  links?: Array<SupportCopilotMessageLinks> | null | undefined;
  properties?: SupportCopilotMessageProperties | null | undefined;
  userProperties?: SupportCopilotMessageUserProperties | null | undefined;
};

/** @internal */
export const SupportCopilotMessageType$inboundSchema: z.ZodNativeEnum<
  typeof SupportCopilotMessageType
> = z.nativeEnum(SupportCopilotMessageType);

/** @internal */
export const SupportCopilotMessageType$outboundSchema: z.ZodNativeEnum<
  typeof SupportCopilotMessageType
> = SupportCopilotMessageType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportCopilotMessageType$ {
  /** @deprecated use `SupportCopilotMessageType$inboundSchema` instead. */
  export const inboundSchema = SupportCopilotMessageType$inboundSchema;
  /** @deprecated use `SupportCopilotMessageType$outboundSchema` instead. */
  export const outboundSchema = SupportCopilotMessageType$outboundSchema;
}

/** @internal */
export const SupportCopilotMessageType1$inboundSchema: z.ZodNativeEnum<
  typeof SupportCopilotMessageType1
> = z.nativeEnum(SupportCopilotMessageType1);

/** @internal */
export const SupportCopilotMessageType1$outboundSchema: z.ZodNativeEnum<
  typeof SupportCopilotMessageType1
> = SupportCopilotMessageType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportCopilotMessageType1$ {
  /** @deprecated use `SupportCopilotMessageType1$inboundSchema` instead. */
  export const inboundSchema = SupportCopilotMessageType1$inboundSchema;
  /** @deprecated use `SupportCopilotMessageType1$outboundSchema` instead. */
  export const outboundSchema = SupportCopilotMessageType1$outboundSchema;
}

/** @internal */
export const SupportCopilotMessageLinksType$inboundSchema: z.ZodType<
  SupportCopilotMessageLinksType,
  z.ZodTypeDef,
  unknown
> = z.union([SupportCopilotMessageType1$inboundSchema, z.string()]);

/** @internal */
export type SupportCopilotMessageLinksType$Outbound = string | string;

/** @internal */
export const SupportCopilotMessageLinksType$outboundSchema: z.ZodType<
  SupportCopilotMessageLinksType$Outbound,
  z.ZodTypeDef,
  SupportCopilotMessageLinksType
> = z.union([SupportCopilotMessageType1$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportCopilotMessageLinksType$ {
  /** @deprecated use `SupportCopilotMessageLinksType$inboundSchema` instead. */
  export const inboundSchema = SupportCopilotMessageLinksType$inboundSchema;
  /** @deprecated use `SupportCopilotMessageLinksType$outboundSchema` instead. */
  export const outboundSchema = SupportCopilotMessageLinksType$outboundSchema;
  /** @deprecated use `SupportCopilotMessageLinksType$Outbound` instead. */
  export type Outbound = SupportCopilotMessageLinksType$Outbound;
}

export function supportCopilotMessageLinksTypeToJSON(
  supportCopilotMessageLinksType: SupportCopilotMessageLinksType,
): string {
  return JSON.stringify(
    SupportCopilotMessageLinksType$outboundSchema.parse(
      supportCopilotMessageLinksType,
    ),
  );
}

export function supportCopilotMessageLinksTypeFromJSON(
  jsonString: string,
): SafeParseResult<SupportCopilotMessageLinksType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SupportCopilotMessageLinksType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SupportCopilotMessageLinksType' from JSON`,
  );
}

/** @internal */
export const SupportCopilotMessageLinks$inboundSchema: z.ZodType<
  SupportCopilotMessageLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.nullable(z.string()).optional(),
  url: z.string(),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  type: z.nullable(
    z.union([SupportCopilotMessageType1$inboundSchema, z.string()]),
  ).optional(),
  breadcrumbs: z.nullable(z.array(z.string())).optional(),
});

/** @internal */
export type SupportCopilotMessageLinks$Outbound = {
  label?: string | null | undefined;
  url: string;
  title?: string | null | undefined;
  description?: string | null | undefined;
  type?: string | string | null | undefined;
  breadcrumbs?: Array<string> | null | undefined;
};

/** @internal */
export const SupportCopilotMessageLinks$outboundSchema: z.ZodType<
  SupportCopilotMessageLinks$Outbound,
  z.ZodTypeDef,
  SupportCopilotMessageLinks
> = z.object({
  label: z.nullable(z.string()).optional(),
  url: z.string(),
  title: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  type: z.nullable(
    z.union([SupportCopilotMessageType1$outboundSchema, z.string()]),
  ).optional(),
  breadcrumbs: z.nullable(z.array(z.string())).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportCopilotMessageLinks$ {
  /** @deprecated use `SupportCopilotMessageLinks$inboundSchema` instead. */
  export const inboundSchema = SupportCopilotMessageLinks$inboundSchema;
  /** @deprecated use `SupportCopilotMessageLinks$outboundSchema` instead. */
  export const outboundSchema = SupportCopilotMessageLinks$outboundSchema;
  /** @deprecated use `SupportCopilotMessageLinks$Outbound` instead. */
  export type Outbound = SupportCopilotMessageLinks$Outbound;
}

export function supportCopilotMessageLinksToJSON(
  supportCopilotMessageLinks: SupportCopilotMessageLinks,
): string {
  return JSON.stringify(
    SupportCopilotMessageLinks$outboundSchema.parse(supportCopilotMessageLinks),
  );
}

export function supportCopilotMessageLinksFromJSON(
  jsonString: string,
): SafeParseResult<SupportCopilotMessageLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SupportCopilotMessageLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SupportCopilotMessageLinks' from JSON`,
  );
}

/** @internal */
export const SupportCopilotMessageProperties$inboundSchema: z.ZodType<
  SupportCopilotMessageProperties,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type SupportCopilotMessageProperties$Outbound = {};

/** @internal */
export const SupportCopilotMessageProperties$outboundSchema: z.ZodType<
  SupportCopilotMessageProperties$Outbound,
  z.ZodTypeDef,
  SupportCopilotMessageProperties
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportCopilotMessageProperties$ {
  /** @deprecated use `SupportCopilotMessageProperties$inboundSchema` instead. */
  export const inboundSchema = SupportCopilotMessageProperties$inboundSchema;
  /** @deprecated use `SupportCopilotMessageProperties$outboundSchema` instead. */
  export const outboundSchema = SupportCopilotMessageProperties$outboundSchema;
  /** @deprecated use `SupportCopilotMessageProperties$Outbound` instead. */
  export type Outbound = SupportCopilotMessageProperties$Outbound;
}

export function supportCopilotMessagePropertiesToJSON(
  supportCopilotMessageProperties: SupportCopilotMessageProperties,
): string {
  return JSON.stringify(
    SupportCopilotMessageProperties$outboundSchema.parse(
      supportCopilotMessageProperties,
    ),
  );
}

export function supportCopilotMessagePropertiesFromJSON(
  jsonString: string,
): SafeParseResult<SupportCopilotMessageProperties, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SupportCopilotMessageProperties$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SupportCopilotMessageProperties' from JSON`,
  );
}

/** @internal */
export const SupportCopilotMessageUserProperties$inboundSchema: z.ZodType<
  SupportCopilotMessageUserProperties,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type SupportCopilotMessageUserProperties$Outbound = {};

/** @internal */
export const SupportCopilotMessageUserProperties$outboundSchema: z.ZodType<
  SupportCopilotMessageUserProperties$Outbound,
  z.ZodTypeDef,
  SupportCopilotMessageUserProperties
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportCopilotMessageUserProperties$ {
  /** @deprecated use `SupportCopilotMessageUserProperties$inboundSchema` instead. */
  export const inboundSchema =
    SupportCopilotMessageUserProperties$inboundSchema;
  /** @deprecated use `SupportCopilotMessageUserProperties$outboundSchema` instead. */
  export const outboundSchema =
    SupportCopilotMessageUserProperties$outboundSchema;
  /** @deprecated use `SupportCopilotMessageUserProperties$Outbound` instead. */
  export type Outbound = SupportCopilotMessageUserProperties$Outbound;
}

export function supportCopilotMessageUserPropertiesToJSON(
  supportCopilotMessageUserProperties: SupportCopilotMessageUserProperties,
): string {
  return JSON.stringify(
    SupportCopilotMessageUserProperties$outboundSchema.parse(
      supportCopilotMessageUserProperties,
    ),
  );
}

export function supportCopilotMessageUserPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<SupportCopilotMessageUserProperties, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SupportCopilotMessageUserProperties$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SupportCopilotMessageUserProperties' from JSON`,
  );
}

/** @internal */
export const SupportCopilotMessage$inboundSchema: z.ZodType<
  SupportCopilotMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: SupportCopilotMessageType$inboundSchema,
  externalId: z.nullable(z.string()).optional(),
  externalUrl: z.nullable(z.string()).optional(),
  conversationId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  role: z.string(),
  content: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  links: z.nullable(
    z.array(z.lazy(() => SupportCopilotMessageLinks$inboundSchema)),
  ).optional(),
  properties: z.nullable(
    z.lazy(() => SupportCopilotMessageProperties$inboundSchema),
  ).optional(),
  userProperties: z.nullable(
    z.lazy(() => SupportCopilotMessageUserProperties$inboundSchema),
  ).optional(),
});

/** @internal */
export type SupportCopilotMessage$Outbound = {
  id: string;
  type: string;
  externalId?: string | null | undefined;
  externalUrl?: string | null | undefined;
  conversationId: string;
  createdAt: string;
  updatedAt: string;
  role: string;
  content?: string | null | undefined;
  name?: string | null | undefined;
  links?: Array<SupportCopilotMessageLinks$Outbound> | null | undefined;
  properties?: SupportCopilotMessageProperties$Outbound | null | undefined;
  userProperties?:
    | SupportCopilotMessageUserProperties$Outbound
    | null
    | undefined;
};

/** @internal */
export const SupportCopilotMessage$outboundSchema: z.ZodType<
  SupportCopilotMessage$Outbound,
  z.ZodTypeDef,
  SupportCopilotMessage
> = z.object({
  id: z.string(),
  type: SupportCopilotMessageType$outboundSchema,
  externalId: z.nullable(z.string()).optional(),
  externalUrl: z.nullable(z.string()).optional(),
  conversationId: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
  role: z.string(),
  content: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  links: z.nullable(
    z.array(z.lazy(() => SupportCopilotMessageLinks$outboundSchema)),
  ).optional(),
  properties: z.nullable(
    z.lazy(() => SupportCopilotMessageProperties$outboundSchema),
  ).optional(),
  userProperties: z.nullable(
    z.lazy(() => SupportCopilotMessageUserProperties$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportCopilotMessage$ {
  /** @deprecated use `SupportCopilotMessage$inboundSchema` instead. */
  export const inboundSchema = SupportCopilotMessage$inboundSchema;
  /** @deprecated use `SupportCopilotMessage$outboundSchema` instead. */
  export const outboundSchema = SupportCopilotMessage$outboundSchema;
  /** @deprecated use `SupportCopilotMessage$Outbound` instead. */
  export type Outbound = SupportCopilotMessage$Outbound;
}

export function supportCopilotMessageToJSON(
  supportCopilotMessage: SupportCopilotMessage,
): string {
  return JSON.stringify(
    SupportCopilotMessage$outboundSchema.parse(supportCopilotMessage),
  );
}

export function supportCopilotMessageFromJSON(
  jsonString: string,
): SafeParseResult<SupportCopilotMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SupportCopilotMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SupportCopilotMessage' from JSON`,
  );
}
