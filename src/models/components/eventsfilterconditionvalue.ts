/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Value4 = string | number | boolean;

export type EventsFilterConditionValueValue =
  | string
  | number
  | boolean
  | Array<string | number | boolean | null>;

export type EventsFilterConditionValue6 = {
  path: Array<string>;
  value:
    | string
    | number
    | boolean
    | Array<string | number | boolean | null>
    | null;
};

/**
 * The value to compare the field against. For JSON fields, can be either a JSON object or a {path, value} pair.
 */
export type EventsFilterConditionValue =
  | EventsFilterConditionValue6
  | string
  | boolean
  | number
  | Array<string>
  | { [k: string]: any };

/** @internal */
export const Value4$inboundSchema: z.ZodType<Value4, z.ZodTypeDef, unknown> = z
  .union([z.string(), z.number(), z.boolean()]);

/** @internal */
export type Value4$Outbound = string | number | boolean;

/** @internal */
export const Value4$outboundSchema: z.ZodType<
  Value4$Outbound,
  z.ZodTypeDef,
  Value4
> = z.union([z.string(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Value4$ {
  /** @deprecated use `Value4$inboundSchema` instead. */
  export const inboundSchema = Value4$inboundSchema;
  /** @deprecated use `Value4$outboundSchema` instead. */
  export const outboundSchema = Value4$outboundSchema;
  /** @deprecated use `Value4$Outbound` instead. */
  export type Outbound = Value4$Outbound;
}

export function value4ToJSON(value4: Value4): string {
  return JSON.stringify(Value4$outboundSchema.parse(value4));
}

export function value4FromJSON(
  jsonString: string,
): SafeParseResult<Value4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Value4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Value4' from JSON`,
  );
}

/** @internal */
export const EventsFilterConditionValueValue$inboundSchema: z.ZodType<
  EventsFilterConditionValueValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.nullable(z.union([z.string(), z.number(), z.boolean()]))),
]);

/** @internal */
export type EventsFilterConditionValueValue$Outbound =
  | string
  | number
  | boolean
  | Array<string | number | boolean | null>;

/** @internal */
export const EventsFilterConditionValueValue$outboundSchema: z.ZodType<
  EventsFilterConditionValueValue$Outbound,
  z.ZodTypeDef,
  EventsFilterConditionValueValue
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.nullable(z.union([z.string(), z.number(), z.boolean()]))),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsFilterConditionValueValue$ {
  /** @deprecated use `EventsFilterConditionValueValue$inboundSchema` instead. */
  export const inboundSchema = EventsFilterConditionValueValue$inboundSchema;
  /** @deprecated use `EventsFilterConditionValueValue$outboundSchema` instead. */
  export const outboundSchema = EventsFilterConditionValueValue$outboundSchema;
  /** @deprecated use `EventsFilterConditionValueValue$Outbound` instead. */
  export type Outbound = EventsFilterConditionValueValue$Outbound;
}

export function eventsFilterConditionValueValueToJSON(
  eventsFilterConditionValueValue: EventsFilterConditionValueValue,
): string {
  return JSON.stringify(
    EventsFilterConditionValueValue$outboundSchema.parse(
      eventsFilterConditionValueValue,
    ),
  );
}

export function eventsFilterConditionValueValueFromJSON(
  jsonString: string,
): SafeParseResult<EventsFilterConditionValueValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventsFilterConditionValueValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventsFilterConditionValueValue' from JSON`,
  );
}

/** @internal */
export const EventsFilterConditionValue6$inboundSchema: z.ZodType<
  EventsFilterConditionValue6,
  z.ZodTypeDef,
  unknown
> = z.object({
  path: z.array(z.string()),
  value: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.nullable(z.union([z.string(), z.number(), z.boolean()]))),
    ]),
  ),
});

/** @internal */
export type EventsFilterConditionValue6$Outbound = {
  path: Array<string>;
  value:
    | string
    | number
    | boolean
    | Array<string | number | boolean | null>
    | null;
};

/** @internal */
export const EventsFilterConditionValue6$outboundSchema: z.ZodType<
  EventsFilterConditionValue6$Outbound,
  z.ZodTypeDef,
  EventsFilterConditionValue6
> = z.object({
  path: z.array(z.string()),
  value: z.nullable(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.nullable(z.union([z.string(), z.number(), z.boolean()]))),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsFilterConditionValue6$ {
  /** @deprecated use `EventsFilterConditionValue6$inboundSchema` instead. */
  export const inboundSchema = EventsFilterConditionValue6$inboundSchema;
  /** @deprecated use `EventsFilterConditionValue6$outboundSchema` instead. */
  export const outboundSchema = EventsFilterConditionValue6$outboundSchema;
  /** @deprecated use `EventsFilterConditionValue6$Outbound` instead. */
  export type Outbound = EventsFilterConditionValue6$Outbound;
}

export function eventsFilterConditionValue6ToJSON(
  eventsFilterConditionValue6: EventsFilterConditionValue6,
): string {
  return JSON.stringify(
    EventsFilterConditionValue6$outboundSchema.parse(
      eventsFilterConditionValue6,
    ),
  );
}

export function eventsFilterConditionValue6FromJSON(
  jsonString: string,
): SafeParseResult<EventsFilterConditionValue6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventsFilterConditionValue6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventsFilterConditionValue6' from JSON`,
  );
}

/** @internal */
export const EventsFilterConditionValue$inboundSchema: z.ZodType<
  EventsFilterConditionValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => EventsFilterConditionValue6$inboundSchema),
  z.string(),
  z.boolean(),
  z.number(),
  z.array(z.string()),
  z.record(z.any()),
]);

/** @internal */
export type EventsFilterConditionValue$Outbound =
  | EventsFilterConditionValue6$Outbound
  | string
  | boolean
  | number
  | Array<string>
  | { [k: string]: any };

/** @internal */
export const EventsFilterConditionValue$outboundSchema: z.ZodType<
  EventsFilterConditionValue$Outbound,
  z.ZodTypeDef,
  EventsFilterConditionValue
> = z.union([
  z.lazy(() => EventsFilterConditionValue6$outboundSchema),
  z.string(),
  z.boolean(),
  z.number(),
  z.array(z.string()),
  z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsFilterConditionValue$ {
  /** @deprecated use `EventsFilterConditionValue$inboundSchema` instead. */
  export const inboundSchema = EventsFilterConditionValue$inboundSchema;
  /** @deprecated use `EventsFilterConditionValue$outboundSchema` instead. */
  export const outboundSchema = EventsFilterConditionValue$outboundSchema;
  /** @deprecated use `EventsFilterConditionValue$Outbound` instead. */
  export type Outbound = EventsFilterConditionValue$Outbound;
}

export function eventsFilterConditionValueToJSON(
  eventsFilterConditionValue: EventsFilterConditionValue,
): string {
  return JSON.stringify(
    EventsFilterConditionValue$outboundSchema.parse(eventsFilterConditionValue),
  );
}

export function eventsFilterConditionValueFromJSON(
  jsonString: string,
): SafeParseResult<EventsFilterConditionValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventsFilterConditionValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventsFilterConditionValue' from JSON`,
  );
}
