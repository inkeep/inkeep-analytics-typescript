/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The value to compare the field against
 */
export type EventsFilterConditionValue =
  | string
  | boolean
  | number
  | Array<string>;

/** @internal */
export const EventsFilterConditionValue$inboundSchema: z.ZodType<
  EventsFilterConditionValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.boolean(), z.number(), z.array(z.string())]);

/** @internal */
export type EventsFilterConditionValue$Outbound =
  | string
  | boolean
  | number
  | Array<string>;

/** @internal */
export const EventsFilterConditionValue$outboundSchema: z.ZodType<
  EventsFilterConditionValue$Outbound,
  z.ZodTypeDef,
  EventsFilterConditionValue
> = z.union([z.string(), z.boolean(), z.number(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsFilterConditionValue$ {
  /** @deprecated use `EventsFilterConditionValue$inboundSchema` instead. */
  export const inboundSchema = EventsFilterConditionValue$inboundSchema;
  /** @deprecated use `EventsFilterConditionValue$outboundSchema` instead. */
  export const outboundSchema = EventsFilterConditionValue$outboundSchema;
  /** @deprecated use `EventsFilterConditionValue$Outbound` instead. */
  export type Outbound = EventsFilterConditionValue$Outbound;
}

export function eventsFilterConditionValueToJSON(
  eventsFilterConditionValue: EventsFilterConditionValue,
): string {
  return JSON.stringify(
    EventsFilterConditionValue$outboundSchema.parse(eventsFilterConditionValue),
  );
}

export function eventsFilterConditionValueFromJSON(
  jsonString: string,
): SafeParseResult<EventsFilterConditionValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventsFilterConditionValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventsFilterConditionValue' from JSON`,
  );
}
