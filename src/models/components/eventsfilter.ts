/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EventsCondition,
  EventsCondition$inboundSchema,
  EventsCondition$Outbound,
  EventsCondition$outboundSchema,
} from "./eventscondition.js";

export type EventsFilterOr = EventsFilter1 | EventsFilter2 | EventsFilter3;

export type EventsFilter3 = {
  /**
   * Or condition
   */
  or: Array<EventsFilter1 | EventsFilter2 | EventsFilter3>;
};

export type EventsFilterAnd = EventsFilter1 | EventsFilter2 | EventsFilter3;

export type EventsFilter2 = {
  /**
   * And condition
   */
  and: Array<EventsFilter1 | EventsFilter2 | EventsFilter3>;
};

export type EventsFilter1 = {
  condition: EventsCondition;
};

export type EventsFilter = EventsFilter1 | EventsFilter2 | EventsFilter3;

/** @internal */
export const EventsFilterOr$inboundSchema: z.ZodType<
  EventsFilterOr,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => EventsFilter1$inboundSchema),
  z.lazy(() => EventsFilter2$inboundSchema),
  z.lazy(() => EventsFilter3$inboundSchema),
]);

/** @internal */
export type EventsFilterOr$Outbound =
  | EventsFilter1$Outbound
  | EventsFilter2$Outbound
  | EventsFilter3$Outbound;

/** @internal */
export const EventsFilterOr$outboundSchema: z.ZodType<
  EventsFilterOr$Outbound,
  z.ZodTypeDef,
  EventsFilterOr
> = z.union([
  z.lazy(() => EventsFilter1$outboundSchema),
  z.lazy(() => EventsFilter2$outboundSchema),
  z.lazy(() => EventsFilter3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsFilterOr$ {
  /** @deprecated use `EventsFilterOr$inboundSchema` instead. */
  export const inboundSchema = EventsFilterOr$inboundSchema;
  /** @deprecated use `EventsFilterOr$outboundSchema` instead. */
  export const outboundSchema = EventsFilterOr$outboundSchema;
  /** @deprecated use `EventsFilterOr$Outbound` instead. */
  export type Outbound = EventsFilterOr$Outbound;
}

export function eventsFilterOrToJSON(eventsFilterOr: EventsFilterOr): string {
  return JSON.stringify(EventsFilterOr$outboundSchema.parse(eventsFilterOr));
}

export function eventsFilterOrFromJSON(
  jsonString: string,
): SafeParseResult<EventsFilterOr, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventsFilterOr$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventsFilterOr' from JSON`,
  );
}

/** @internal */
export const EventsFilter3$inboundSchema: z.ZodType<
  EventsFilter3,
  z.ZodTypeDef,
  unknown
> = z.object({
  or: z.array(
    z.union([
      z.lazy(() => EventsFilter1$inboundSchema),
      z.lazy(() => EventsFilter2$inboundSchema),
      z.lazy(() => EventsFilter3$inboundSchema),
    ]),
  ),
});

/** @internal */
export type EventsFilter3$Outbound = {
  or: Array<
    EventsFilter1$Outbound | EventsFilter2$Outbound | EventsFilter3$Outbound
  >;
};

/** @internal */
export const EventsFilter3$outboundSchema: z.ZodType<
  EventsFilter3$Outbound,
  z.ZodTypeDef,
  EventsFilter3
> = z.object({
  or: z.array(
    z.union([
      z.lazy(() => EventsFilter1$outboundSchema),
      z.lazy(() => EventsFilter2$outboundSchema),
      z.lazy(() => EventsFilter3$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsFilter3$ {
  /** @deprecated use `EventsFilter3$inboundSchema` instead. */
  export const inboundSchema = EventsFilter3$inboundSchema;
  /** @deprecated use `EventsFilter3$outboundSchema` instead. */
  export const outboundSchema = EventsFilter3$outboundSchema;
  /** @deprecated use `EventsFilter3$Outbound` instead. */
  export type Outbound = EventsFilter3$Outbound;
}

export function eventsFilter3ToJSON(eventsFilter3: EventsFilter3): string {
  return JSON.stringify(EventsFilter3$outboundSchema.parse(eventsFilter3));
}

export function eventsFilter3FromJSON(
  jsonString: string,
): SafeParseResult<EventsFilter3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventsFilter3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventsFilter3' from JSON`,
  );
}

/** @internal */
export const EventsFilterAnd$inboundSchema: z.ZodType<
  EventsFilterAnd,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => EventsFilter1$inboundSchema),
  z.lazy(() => EventsFilter2$inboundSchema),
  z.lazy(() => EventsFilter3$inboundSchema),
]);

/** @internal */
export type EventsFilterAnd$Outbound =
  | EventsFilter1$Outbound
  | EventsFilter2$Outbound
  | EventsFilter3$Outbound;

/** @internal */
export const EventsFilterAnd$outboundSchema: z.ZodType<
  EventsFilterAnd$Outbound,
  z.ZodTypeDef,
  EventsFilterAnd
> = z.union([
  z.lazy(() => EventsFilter1$outboundSchema),
  z.lazy(() => EventsFilter2$outboundSchema),
  z.lazy(() => EventsFilter3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsFilterAnd$ {
  /** @deprecated use `EventsFilterAnd$inboundSchema` instead. */
  export const inboundSchema = EventsFilterAnd$inboundSchema;
  /** @deprecated use `EventsFilterAnd$outboundSchema` instead. */
  export const outboundSchema = EventsFilterAnd$outboundSchema;
  /** @deprecated use `EventsFilterAnd$Outbound` instead. */
  export type Outbound = EventsFilterAnd$Outbound;
}

export function eventsFilterAndToJSON(
  eventsFilterAnd: EventsFilterAnd,
): string {
  return JSON.stringify(EventsFilterAnd$outboundSchema.parse(eventsFilterAnd));
}

export function eventsFilterAndFromJSON(
  jsonString: string,
): SafeParseResult<EventsFilterAnd, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventsFilterAnd$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventsFilterAnd' from JSON`,
  );
}

/** @internal */
export const EventsFilter2$inboundSchema: z.ZodType<
  EventsFilter2,
  z.ZodTypeDef,
  unknown
> = z.object({
  and: z.array(
    z.union([
      z.lazy(() => EventsFilter1$inboundSchema),
      z.lazy(() => EventsFilter2$inboundSchema),
      z.lazy(() => EventsFilter3$inboundSchema),
    ]),
  ),
});

/** @internal */
export type EventsFilter2$Outbound = {
  and: Array<
    EventsFilter1$Outbound | EventsFilter2$Outbound | EventsFilter3$Outbound
  >;
};

/** @internal */
export const EventsFilter2$outboundSchema: z.ZodType<
  EventsFilter2$Outbound,
  z.ZodTypeDef,
  EventsFilter2
> = z.object({
  and: z.array(
    z.union([
      z.lazy(() => EventsFilter1$outboundSchema),
      z.lazy(() => EventsFilter2$outboundSchema),
      z.lazy(() => EventsFilter3$outboundSchema),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsFilter2$ {
  /** @deprecated use `EventsFilter2$inboundSchema` instead. */
  export const inboundSchema = EventsFilter2$inboundSchema;
  /** @deprecated use `EventsFilter2$outboundSchema` instead. */
  export const outboundSchema = EventsFilter2$outboundSchema;
  /** @deprecated use `EventsFilter2$Outbound` instead. */
  export type Outbound = EventsFilter2$Outbound;
}

export function eventsFilter2ToJSON(eventsFilter2: EventsFilter2): string {
  return JSON.stringify(EventsFilter2$outboundSchema.parse(eventsFilter2));
}

export function eventsFilter2FromJSON(
  jsonString: string,
): SafeParseResult<EventsFilter2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventsFilter2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventsFilter2' from JSON`,
  );
}

/** @internal */
export const EventsFilter1$inboundSchema: z.ZodType<
  EventsFilter1,
  z.ZodTypeDef,
  unknown
> = z.object({
  condition: EventsCondition$inboundSchema,
});

/** @internal */
export type EventsFilter1$Outbound = {
  condition: EventsCondition$Outbound;
};

/** @internal */
export const EventsFilter1$outboundSchema: z.ZodType<
  EventsFilter1$Outbound,
  z.ZodTypeDef,
  EventsFilter1
> = z.object({
  condition: EventsCondition$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsFilter1$ {
  /** @deprecated use `EventsFilter1$inboundSchema` instead. */
  export const inboundSchema = EventsFilter1$inboundSchema;
  /** @deprecated use `EventsFilter1$outboundSchema` instead. */
  export const outboundSchema = EventsFilter1$outboundSchema;
  /** @deprecated use `EventsFilter1$Outbound` instead. */
  export type Outbound = EventsFilter1$Outbound;
}

export function eventsFilter1ToJSON(eventsFilter1: EventsFilter1): string {
  return JSON.stringify(EventsFilter1$outboundSchema.parse(eventsFilter1));
}

export function eventsFilter1FromJSON(
  jsonString: string,
): SafeParseResult<EventsFilter1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventsFilter1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventsFilter1' from JSON`,
  );
}

/** @internal */
export const EventsFilter$inboundSchema: z.ZodType<
  EventsFilter,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => EventsFilter1$inboundSchema),
  z.lazy(() => EventsFilter2$inboundSchema),
  z.lazy(() => EventsFilter3$inboundSchema),
]);

/** @internal */
export type EventsFilter$Outbound =
  | EventsFilter1$Outbound
  | EventsFilter2$Outbound
  | EventsFilter3$Outbound;

/** @internal */
export const EventsFilter$outboundSchema: z.ZodType<
  EventsFilter$Outbound,
  z.ZodTypeDef,
  EventsFilter
> = z.union([
  z.lazy(() => EventsFilter1$outboundSchema),
  z.lazy(() => EventsFilter2$outboundSchema),
  z.lazy(() => EventsFilter3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsFilter$ {
  /** @deprecated use `EventsFilter$inboundSchema` instead. */
  export const inboundSchema = EventsFilter$inboundSchema;
  /** @deprecated use `EventsFilter$outboundSchema` instead. */
  export const outboundSchema = EventsFilter$outboundSchema;
  /** @deprecated use `EventsFilter$Outbound` instead. */
  export type Outbound = EventsFilter$Outbound;
}

export function eventsFilterToJSON(eventsFilter: EventsFilter): string {
  return JSON.stringify(EventsFilter$outboundSchema.parse(eventsFilter));
}

export function eventsFilterFromJSON(
  jsonString: string,
): SafeParseResult<EventsFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventsFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventsFilter' from JSON`,
  );
}
