/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetFeedbackByIdRequest = {
  id: string;
};

export const GetFeedbackByIdType = {
  Positive: "positive",
  Negative: "negative",
} as const;
export type GetFeedbackByIdType = ClosedEnum<typeof GetFeedbackByIdType>;

export type GetFeedbackByIdReasons = {
  label: string;
  details: string;
};

/**
 * The unique identifier for the user. This value is sent by the inkeep widget.
 */
export type GetFeedbackByIdId = string | number;

/**
 * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
 */
export type GetFeedbackByIdUserId = string | number;

/**
 * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
 */
export type GetFeedbackByIdUserProperties = {
  /**
   * The unique identifier for the user. This value is sent by the inkeep widget.
   */
  id?: string | number | null | undefined;
  /**
   * The type of identification for the user. This value is sent by the inkeep widget.
   */
  identificationType?: string | null | undefined;
  /**
   * The unique identifier for the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  userId?: string | number | null | undefined;
  /**
   * The name of the support agent assigned to the user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  supportAgentName?: string | null | undefined;
  /**
   * The type of user. This value is sent by the Inkeep Support Agent Copilot. This value is used to create the graphs on the Inkeep Portal.
   */
  userType?: string | null | undefined;
  additionalProperties?: { [k: string]: any };
};

export const GetFeedbackByIdFeedbackType = {
  Positive: "positive",
  Negative: "negative",
  New: "new",
} as const;
export type GetFeedbackByIdFeedbackType = ClosedEnum<
  typeof GetFeedbackByIdFeedbackType
>;

export type GetFeedbackByIdSources = {
  type: GetFeedbackByIdFeedbackType | null;
  title?: string | null | undefined;
  url?: string | null | undefined;
};

/**
 * Feedback retrieved successfully
 */
export type GetFeedbackByIdResponseBody = {
  id: string;
  type: GetFeedbackByIdType;
  messageId: string;
  createdAt: string;
  reasons?: Array<GetFeedbackByIdReasons> | null | undefined;
  details: string;
  /**
   * A customizable collection of custom properties or attributes.
   */
  properties?: { [k: string]: any } | null | undefined;
  /**
   * A customizable collection of custom properties or attributes. Some properties have first class support for the Inkeep Portal or Widget and are noted in the description.
   */
  userProperties?: GetFeedbackByIdUserProperties | null | undefined;
  sources?: Array<GetFeedbackByIdSources> | null | undefined;
  conversation: components.Conversation;
  message: components.Message;
};

/** @internal */
export const GetFeedbackByIdRequest$inboundSchema: z.ZodType<
  GetFeedbackByIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetFeedbackByIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetFeedbackByIdRequest$outboundSchema: z.ZodType<
  GetFeedbackByIdRequest$Outbound,
  z.ZodTypeDef,
  GetFeedbackByIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFeedbackByIdRequest$ {
  /** @deprecated use `GetFeedbackByIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetFeedbackByIdRequest$inboundSchema;
  /** @deprecated use `GetFeedbackByIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetFeedbackByIdRequest$outboundSchema;
  /** @deprecated use `GetFeedbackByIdRequest$Outbound` instead. */
  export type Outbound = GetFeedbackByIdRequest$Outbound;
}

export function getFeedbackByIdRequestToJSON(
  getFeedbackByIdRequest: GetFeedbackByIdRequest,
): string {
  return JSON.stringify(
    GetFeedbackByIdRequest$outboundSchema.parse(getFeedbackByIdRequest),
  );
}

export function getFeedbackByIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetFeedbackByIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFeedbackByIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFeedbackByIdRequest' from JSON`,
  );
}

/** @internal */
export const GetFeedbackByIdType$inboundSchema: z.ZodNativeEnum<
  typeof GetFeedbackByIdType
> = z.nativeEnum(GetFeedbackByIdType);

/** @internal */
export const GetFeedbackByIdType$outboundSchema: z.ZodNativeEnum<
  typeof GetFeedbackByIdType
> = GetFeedbackByIdType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFeedbackByIdType$ {
  /** @deprecated use `GetFeedbackByIdType$inboundSchema` instead. */
  export const inboundSchema = GetFeedbackByIdType$inboundSchema;
  /** @deprecated use `GetFeedbackByIdType$outboundSchema` instead. */
  export const outboundSchema = GetFeedbackByIdType$outboundSchema;
}

/** @internal */
export const GetFeedbackByIdReasons$inboundSchema: z.ZodType<
  GetFeedbackByIdReasons,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string(),
  details: z.string(),
});

/** @internal */
export type GetFeedbackByIdReasons$Outbound = {
  label: string;
  details: string;
};

/** @internal */
export const GetFeedbackByIdReasons$outboundSchema: z.ZodType<
  GetFeedbackByIdReasons$Outbound,
  z.ZodTypeDef,
  GetFeedbackByIdReasons
> = z.object({
  label: z.string(),
  details: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFeedbackByIdReasons$ {
  /** @deprecated use `GetFeedbackByIdReasons$inboundSchema` instead. */
  export const inboundSchema = GetFeedbackByIdReasons$inboundSchema;
  /** @deprecated use `GetFeedbackByIdReasons$outboundSchema` instead. */
  export const outboundSchema = GetFeedbackByIdReasons$outboundSchema;
  /** @deprecated use `GetFeedbackByIdReasons$Outbound` instead. */
  export type Outbound = GetFeedbackByIdReasons$Outbound;
}

export function getFeedbackByIdReasonsToJSON(
  getFeedbackByIdReasons: GetFeedbackByIdReasons,
): string {
  return JSON.stringify(
    GetFeedbackByIdReasons$outboundSchema.parse(getFeedbackByIdReasons),
  );
}

export function getFeedbackByIdReasonsFromJSON(
  jsonString: string,
): SafeParseResult<GetFeedbackByIdReasons, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFeedbackByIdReasons$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFeedbackByIdReasons' from JSON`,
  );
}

/** @internal */
export const GetFeedbackByIdId$inboundSchema: z.ZodType<
  GetFeedbackByIdId,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type GetFeedbackByIdId$Outbound = string | number;

/** @internal */
export const GetFeedbackByIdId$outboundSchema: z.ZodType<
  GetFeedbackByIdId$Outbound,
  z.ZodTypeDef,
  GetFeedbackByIdId
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFeedbackByIdId$ {
  /** @deprecated use `GetFeedbackByIdId$inboundSchema` instead. */
  export const inboundSchema = GetFeedbackByIdId$inboundSchema;
  /** @deprecated use `GetFeedbackByIdId$outboundSchema` instead. */
  export const outboundSchema = GetFeedbackByIdId$outboundSchema;
  /** @deprecated use `GetFeedbackByIdId$Outbound` instead. */
  export type Outbound = GetFeedbackByIdId$Outbound;
}

export function getFeedbackByIdIdToJSON(
  getFeedbackByIdId: GetFeedbackByIdId,
): string {
  return JSON.stringify(
    GetFeedbackByIdId$outboundSchema.parse(getFeedbackByIdId),
  );
}

export function getFeedbackByIdIdFromJSON(
  jsonString: string,
): SafeParseResult<GetFeedbackByIdId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFeedbackByIdId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFeedbackByIdId' from JSON`,
  );
}

/** @internal */
export const GetFeedbackByIdUserId$inboundSchema: z.ZodType<
  GetFeedbackByIdUserId,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type GetFeedbackByIdUserId$Outbound = string | number;

/** @internal */
export const GetFeedbackByIdUserId$outboundSchema: z.ZodType<
  GetFeedbackByIdUserId$Outbound,
  z.ZodTypeDef,
  GetFeedbackByIdUserId
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFeedbackByIdUserId$ {
  /** @deprecated use `GetFeedbackByIdUserId$inboundSchema` instead. */
  export const inboundSchema = GetFeedbackByIdUserId$inboundSchema;
  /** @deprecated use `GetFeedbackByIdUserId$outboundSchema` instead. */
  export const outboundSchema = GetFeedbackByIdUserId$outboundSchema;
  /** @deprecated use `GetFeedbackByIdUserId$Outbound` instead. */
  export type Outbound = GetFeedbackByIdUserId$Outbound;
}

export function getFeedbackByIdUserIdToJSON(
  getFeedbackByIdUserId: GetFeedbackByIdUserId,
): string {
  return JSON.stringify(
    GetFeedbackByIdUserId$outboundSchema.parse(getFeedbackByIdUserId),
  );
}

export function getFeedbackByIdUserIdFromJSON(
  jsonString: string,
): SafeParseResult<GetFeedbackByIdUserId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFeedbackByIdUserId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFeedbackByIdUserId' from JSON`,
  );
}

/** @internal */
export const GetFeedbackByIdUserProperties$inboundSchema: z.ZodType<
  GetFeedbackByIdUserProperties,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    id: z.nullable(z.union([z.string(), z.number()])).optional(),
    identificationType: z.nullable(z.string()).optional(),
    userId: z.nullable(z.union([z.string(), z.number()])).optional(),
    supportAgentName: z.nullable(z.string()).optional(),
    userType: z.nullable(z.string()).optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
);

/** @internal */
export type GetFeedbackByIdUserProperties$Outbound = {
  id?: string | number | null | undefined;
  identificationType?: string | null | undefined;
  userId?: string | number | null | undefined;
  supportAgentName?: string | null | undefined;
  userType?: string | null | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const GetFeedbackByIdUserProperties$outboundSchema: z.ZodType<
  GetFeedbackByIdUserProperties$Outbound,
  z.ZodTypeDef,
  GetFeedbackByIdUserProperties
> = z.object({
  id: z.nullable(z.union([z.string(), z.number()])).optional(),
  identificationType: z.nullable(z.string()).optional(),
  userId: z.nullable(z.union([z.string(), z.number()])).optional(),
  supportAgentName: z.nullable(z.string()).optional(),
  userType: z.nullable(z.string()).optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFeedbackByIdUserProperties$ {
  /** @deprecated use `GetFeedbackByIdUserProperties$inboundSchema` instead. */
  export const inboundSchema = GetFeedbackByIdUserProperties$inboundSchema;
  /** @deprecated use `GetFeedbackByIdUserProperties$outboundSchema` instead. */
  export const outboundSchema = GetFeedbackByIdUserProperties$outboundSchema;
  /** @deprecated use `GetFeedbackByIdUserProperties$Outbound` instead. */
  export type Outbound = GetFeedbackByIdUserProperties$Outbound;
}

export function getFeedbackByIdUserPropertiesToJSON(
  getFeedbackByIdUserProperties: GetFeedbackByIdUserProperties,
): string {
  return JSON.stringify(
    GetFeedbackByIdUserProperties$outboundSchema.parse(
      getFeedbackByIdUserProperties,
    ),
  );
}

export function getFeedbackByIdUserPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<GetFeedbackByIdUserProperties, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFeedbackByIdUserProperties$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFeedbackByIdUserProperties' from JSON`,
  );
}

/** @internal */
export const GetFeedbackByIdFeedbackType$inboundSchema: z.ZodNativeEnum<
  typeof GetFeedbackByIdFeedbackType
> = z.nativeEnum(GetFeedbackByIdFeedbackType);

/** @internal */
export const GetFeedbackByIdFeedbackType$outboundSchema: z.ZodNativeEnum<
  typeof GetFeedbackByIdFeedbackType
> = GetFeedbackByIdFeedbackType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFeedbackByIdFeedbackType$ {
  /** @deprecated use `GetFeedbackByIdFeedbackType$inboundSchema` instead. */
  export const inboundSchema = GetFeedbackByIdFeedbackType$inboundSchema;
  /** @deprecated use `GetFeedbackByIdFeedbackType$outboundSchema` instead. */
  export const outboundSchema = GetFeedbackByIdFeedbackType$outboundSchema;
}

/** @internal */
export const GetFeedbackByIdSources$inboundSchema: z.ZodType<
  GetFeedbackByIdSources,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.nullable(GetFeedbackByIdFeedbackType$inboundSchema),
  title: z.nullable(z.string()).optional(),
  url: z.nullable(z.string()).optional(),
});

/** @internal */
export type GetFeedbackByIdSources$Outbound = {
  type: string | null;
  title?: string | null | undefined;
  url?: string | null | undefined;
};

/** @internal */
export const GetFeedbackByIdSources$outboundSchema: z.ZodType<
  GetFeedbackByIdSources$Outbound,
  z.ZodTypeDef,
  GetFeedbackByIdSources
> = z.object({
  type: z.nullable(GetFeedbackByIdFeedbackType$outboundSchema),
  title: z.nullable(z.string()).optional(),
  url: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFeedbackByIdSources$ {
  /** @deprecated use `GetFeedbackByIdSources$inboundSchema` instead. */
  export const inboundSchema = GetFeedbackByIdSources$inboundSchema;
  /** @deprecated use `GetFeedbackByIdSources$outboundSchema` instead. */
  export const outboundSchema = GetFeedbackByIdSources$outboundSchema;
  /** @deprecated use `GetFeedbackByIdSources$Outbound` instead. */
  export type Outbound = GetFeedbackByIdSources$Outbound;
}

export function getFeedbackByIdSourcesToJSON(
  getFeedbackByIdSources: GetFeedbackByIdSources,
): string {
  return JSON.stringify(
    GetFeedbackByIdSources$outboundSchema.parse(getFeedbackByIdSources),
  );
}

export function getFeedbackByIdSourcesFromJSON(
  jsonString: string,
): SafeParseResult<GetFeedbackByIdSources, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFeedbackByIdSources$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFeedbackByIdSources' from JSON`,
  );
}

/** @internal */
export const GetFeedbackByIdResponseBody$inboundSchema: z.ZodType<
  GetFeedbackByIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: GetFeedbackByIdType$inboundSchema,
  messageId: z.string(),
  createdAt: z.string(),
  reasons: z.nullable(
    z.array(z.lazy(() => GetFeedbackByIdReasons$inboundSchema)),
  ).optional(),
  details: z.string(),
  properties: z.nullable(z.record(z.any())).optional(),
  userProperties: z.nullable(
    z.lazy(() => GetFeedbackByIdUserProperties$inboundSchema),
  ).optional(),
  sources: z.nullable(
    z.array(z.lazy(() => GetFeedbackByIdSources$inboundSchema)),
  ).optional(),
  conversation: components.Conversation$inboundSchema,
  message: components.Message$inboundSchema,
});

/** @internal */
export type GetFeedbackByIdResponseBody$Outbound = {
  id: string;
  type: string;
  messageId: string;
  createdAt: string;
  reasons?: Array<GetFeedbackByIdReasons$Outbound> | null | undefined;
  details: string;
  properties?: { [k: string]: any } | null | undefined;
  userProperties?: GetFeedbackByIdUserProperties$Outbound | null | undefined;
  sources?: Array<GetFeedbackByIdSources$Outbound> | null | undefined;
  conversation: components.Conversation$Outbound;
  message: components.Message$Outbound;
};

/** @internal */
export const GetFeedbackByIdResponseBody$outboundSchema: z.ZodType<
  GetFeedbackByIdResponseBody$Outbound,
  z.ZodTypeDef,
  GetFeedbackByIdResponseBody
> = z.object({
  id: z.string(),
  type: GetFeedbackByIdType$outboundSchema,
  messageId: z.string(),
  createdAt: z.string(),
  reasons: z.nullable(
    z.array(z.lazy(() => GetFeedbackByIdReasons$outboundSchema)),
  ).optional(),
  details: z.string(),
  properties: z.nullable(z.record(z.any())).optional(),
  userProperties: z.nullable(
    z.lazy(() => GetFeedbackByIdUserProperties$outboundSchema),
  ).optional(),
  sources: z.nullable(
    z.array(z.lazy(() => GetFeedbackByIdSources$outboundSchema)),
  ).optional(),
  conversation: components.Conversation$outboundSchema,
  message: components.Message$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFeedbackByIdResponseBody$ {
  /** @deprecated use `GetFeedbackByIdResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetFeedbackByIdResponseBody$inboundSchema;
  /** @deprecated use `GetFeedbackByIdResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetFeedbackByIdResponseBody$outboundSchema;
  /** @deprecated use `GetFeedbackByIdResponseBody$Outbound` instead. */
  export type Outbound = GetFeedbackByIdResponseBody$Outbound;
}

export function getFeedbackByIdResponseBodyToJSON(
  getFeedbackByIdResponseBody: GetFeedbackByIdResponseBody,
): string {
  return JSON.stringify(
    GetFeedbackByIdResponseBody$outboundSchema.parse(
      getFeedbackByIdResponseBody,
    ),
  );
}

export function getFeedbackByIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetFeedbackByIdResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFeedbackByIdResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFeedbackByIdResponseBody' from JSON`,
  );
}
