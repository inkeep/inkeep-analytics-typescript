/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAllFeedbackSecurity = {
  webIntegrationKey?: string | undefined;
  apiIntegrationKey?: string | undefined;
};

/** @internal */
export const GetAllFeedbackSecurity$inboundSchema: z.ZodType<
  GetAllFeedbackSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  WebIntegrationKey: z.string().optional(),
  ApiIntegrationKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "WebIntegrationKey": "webIntegrationKey",
    "ApiIntegrationKey": "apiIntegrationKey",
  });
});

/** @internal */
export type GetAllFeedbackSecurity$Outbound = {
  WebIntegrationKey?: string | undefined;
  ApiIntegrationKey?: string | undefined;
};

/** @internal */
export const GetAllFeedbackSecurity$outboundSchema: z.ZodType<
  GetAllFeedbackSecurity$Outbound,
  z.ZodTypeDef,
  GetAllFeedbackSecurity
> = z.object({
  webIntegrationKey: z.string().optional(),
  apiIntegrationKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    webIntegrationKey: "WebIntegrationKey",
    apiIntegrationKey: "ApiIntegrationKey",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllFeedbackSecurity$ {
  /** @deprecated use `GetAllFeedbackSecurity$inboundSchema` instead. */
  export const inboundSchema = GetAllFeedbackSecurity$inboundSchema;
  /** @deprecated use `GetAllFeedbackSecurity$outboundSchema` instead. */
  export const outboundSchema = GetAllFeedbackSecurity$outboundSchema;
  /** @deprecated use `GetAllFeedbackSecurity$Outbound` instead. */
  export type Outbound = GetAllFeedbackSecurity$Outbound;
}

export function getAllFeedbackSecurityToJSON(
  getAllFeedbackSecurity: GetAllFeedbackSecurity,
): string {
  return JSON.stringify(
    GetAllFeedbackSecurity$outboundSchema.parse(getAllFeedbackSecurity),
  );
}

export function getAllFeedbackSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetAllFeedbackSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllFeedbackSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllFeedbackSecurity' from JSON`,
  );
}
